MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=4.000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=0
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.958
fWaveSmoothing=0.450
fWaveParam=0.000
fModWaveAlphaStart=0.000
fModWaveAlphaEnd=1.320
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=0.190
ib_size=0.500
ib_r=1.000
ib_g=1.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=25.600
nMotionVectorsY=9.600
mv_dx=0.000
mv_dy=0.000
mv_l=0.000
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.230
b2n=0.000
b3n=0.000
b1x=0.930
b2x=1.000
b3x=0.000
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=0
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=0.150
wavecode_0_a=1.000
wave_0_per_frame1=t1 = sin( time )
wave_0_per_point1=n=sample*6.283;
wave_0_per_point2=phs=-sample * 0.2;
wave_0_per_point3=tm=treb_att + phs*4 + t1;
wave_0_per_point4=
wave_0_per_point5=flip=flip+1;
wave_0_per_point6=flip=flip*below(flip,2);
wave_0_per_point7=
wave_0_per_point8=xp=0;
wave_0_per_point9=yp=(flip*0.1-0.05)*(sample);
wave_0_per_point10=zp=0;
wave_0_per_point11=
wave_0_per_point12=//spin;
wave_0_per_point13=ang=tm*20 + sin(tm*76 + time*4)*0.01;
wave_0_per_point14=sa=sin(ang);ca=cos(ang);
wave_0_per_point15=xr=xp*sa + yp*ca;
wave_0_per_point16=yr=xp*ca - yp*sa;
wave_0_per_point17=zr=zp;
wave_0_per_point18=
wave_0_per_point19=xp=xr;
wave_0_per_point20=yp=yr + 0.05 + (sin(tm)*0.5 + 0.5)*0.2 + 0.05;
wave_0_per_point21=zp=zr;
wave_0_per_point22=
wave_0_per_point23=//wrist movement;
wave_0_per_point24=ang=sin(tm*2);
wave_0_per_point25=
wave_0_per_point26=xq=xp;
wave_0_per_point27=sa=sin(ang);ca=cos(ang);
wave_0_per_point28=yq=yp*sa + zp*ca;
wave_0_per_point29=zq=yp*ca - zp*sa;
wave_0_per_point30=
wave_0_per_point31=
wave_0_per_point32=ang=tm*8;
wave_0_per_point33=sa=sin(ang);ca=cos(ang);
wave_0_per_point34=xp=xq*sa + yq*ca;
wave_0_per_point35=yp=xq*ca - yq*sa;
wave_0_per_point36=zp=zq;
wave_0_per_point37=
wave_0_per_point38=//forearm movement;
wave_0_per_point39=zp=zp-0.3;
wave_0_per_point40=ang=3.14 + sin(tm*2 - 0.5)*2.5;
wave_0_per_point41=xq=xp;
wave_0_per_point42=sa=sin(ang);ca=cos(ang);
wave_0_per_point43=yq=yp*sa + zp*ca;
wave_0_per_point44=zq=yp*ca - zp*sa;
wave_0_per_point45=
wave_0_per_point46=//upper arm twist
wave_0_per_point47=ang=-1.0 + cos(tm*3 + 0.5);
wave_0_per_point48=xp=xq*sa + yq*ca;
wave_0_per_point49=yp=xq*ca - yq*sa;
wave_0_per_point50=zp=zq;
wave_0_per_point51=
wave_0_per_point52=//upper arm outward;
wave_0_per_point53=zp=zp-0.35;
wave_0_per_point54=ang=cos(tm*1)*1.75 - 1.05;
wave_0_per_point55=sa=sin(ang);ca=cos(ang);
wave_0_per_point56=xq=xp*sa + zp*ca;
wave_0_per_point57=yq=yp;
wave_0_per_point58=zq=xp*ca - zp*sa;
wave_0_per_point59=
wave_0_per_point60=//upper arm up down;
wave_0_per_point61=ang=cos(tm);
wave_0_per_point62=xp=xq;
wave_0_per_point63=sa=sin(ang);ca=cos(ang);
wave_0_per_point64=yp=yq*ca - zq*sa;
wave_0_per_point65=zp=yq*sa + zq*ca;
wave_0_per_point66=
wave_0_per_point67=//xp=xq;yp=yq;zp=zq;
wave_0_per_point68=
wave_0_per_point69=
wave_0_per_point70=//project into screenspace and draw on screen
wave_0_per_point71=zp=zp+1.2;
wave_0_per_point72=xs=xp/zp;
wave_0_per_point73=ys=yp/zp;
wave_0_per_point74=
wave_0_per_point75=x=xs+0.35;
wave_0_per_point76=y=ys*1.3+0.6;
wave_0_per_point77=
wave_0_per_point78=
wave_0_per_point79=a=(1-sample);
wave_0_per_point80=
wavecode_1_enabled=1
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=0.150
wavecode_1_a=1.000
wave_1_per_point1=n=sample*6.283;
wave_1_per_point2=phs=-sample * 0.2;
wave_1_per_point3=tm=treb_att + phs*4;
wave_1_per_point4=
wave_1_per_point5=flip=flip+1;
wave_1_per_point6=flip=flip*below(flip,2);
wave_1_per_point7=
wave_1_per_point8=xp=0;
wave_1_per_point9=yp=(flip*0.1-0.05)*(sample);
wave_1_per_point10=zp=0;
wave_1_per_point11=
wave_1_per_point12=//spin;
wave_1_per_point13=ang=tm*20 + sin(tm*76 + time*4)*0.01;
wave_1_per_point14=sa=sin(ang);ca=cos(ang);
wave_1_per_point15=xr=xp*sa + yp*ca;
wave_1_per_point16=yr=xp*ca - yp*sa;
wave_1_per_point17=zr=zp;
wave_1_per_point18=
wave_1_per_point19=xp=xr;
wave_1_per_point20=yp=yr + 0.05 + (sin(tm)*0.5 + 0.5)*0.2 + 0.05;
wave_1_per_point21=zp=zr;
wave_1_per_point22=
wave_1_per_point23=//wrist movement;
wave_1_per_point24=ang=sin(tm*2);
wave_1_per_point25=
wave_1_per_point26=xq=xp;
wave_1_per_point27=sa=sin(ang);ca=cos(ang);
wave_1_per_point28=yq=yp*sa + zp*ca;
wave_1_per_point29=zq=yp*ca - zp*sa;
wave_1_per_point30=
wave_1_per_point31=
wave_1_per_point32=ang=tm*8;
wave_1_per_point33=sa=sin(ang);ca=cos(ang);
wave_1_per_point34=xp=xq*sa + yq*ca;
wave_1_per_point35=yp=xq*ca - yq*sa;
wave_1_per_point36=zp=zq;
wave_1_per_point37=
wave_1_per_point38=//forearm movement;
wave_1_per_point39=zp=zp-0.3;
wave_1_per_point40=ang=3.14 + sin(tm*2 - 0.5)*2.5;
wave_1_per_point41=xq=xp;
wave_1_per_point42=sa=sin(ang);ca=cos(ang);
wave_1_per_point43=yq=yp*sa + zp*ca;
wave_1_per_point44=zq=yp*ca - zp*sa;
wave_1_per_point45=
wave_1_per_point46=//upper arm twist
wave_1_per_point47=ang=-1.0 + cos(tm*3 + 0.5);
wave_1_per_point48=xp=xq*sa + yq*ca;
wave_1_per_point49=yp=xq*ca - yq*sa;
wave_1_per_point50=zp=zq;
wave_1_per_point51=
wave_1_per_point52=//upper arm outward;
wave_1_per_point53=zp=zp-0.35;
wave_1_per_point54=ang=cos(tm*1)*1.75 - 1.05;
wave_1_per_point55=sa=sin(ang);ca=cos(ang);
wave_1_per_point56=xq=xp*sa + zp*ca;
wave_1_per_point57=yq=yp;
wave_1_per_point58=zq=xp*ca - zp*sa;
wave_1_per_point59=
wave_1_per_point60=//upper arm up down;
wave_1_per_point61=ang=cos(tm);
wave_1_per_point62=xp=xq;
wave_1_per_point63=sa=sin(ang);ca=cos(ang);
wave_1_per_point64=yp=yq*ca - zq*sa;
wave_1_per_point65=zp=yq*sa + zq*ca;
wave_1_per_point66=
wave_1_per_point67=//xp=xq;yp=yq;zp=zq;
wave_1_per_point68=
wave_1_per_point69=
wave_1_per_point70=//project into screenspace and draw on screen
wave_1_per_point71=zp=zp+1.2;
wave_1_per_point72=xs=xp/zp;
wave_1_per_point73=ys=yp/zp;
wave_1_per_point74=
wave_1_per_point75=x=xs+0.5;
wave_1_per_point76=y=ys*.3+0.6;
wave_1_per_point77=
wave_1_per_point78=
wave_1_per_point79=a=(1-sample)*0.5;
wave_1_per_point80=
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=0
wavecode_2_scaling=0.89152
wavecode_2_smoothing=0.82000
wavecode_2_r=0.000
wavecode_2_g=0.200
wavecode_2_b=0.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=0
shapecode_0_sides=54
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.160
shapecode_0_y=0.450
shapecode_0_rad=0.28207
shapecode_0_ang=3.14159
shapecode_0_tex_ang=1.13097
shapecode_0_tex_zoom=1.00814
shapecode_0_r=0.990
shapecode_0_g=0.620
shapecode_0_b=0.820
shapecode_0_a=1.000
shapecode_0_r2=1.000
shapecode_0_g2=1.000
shapecode_0_b2=1.000
shapecode_0_a2=0.000
shapecode_0_border_r=0.000
shapecode_0_border_g=0.000
shapecode_0_border_b=0.000
shapecode_0_border_a=0.000
shape_0_per_frame1=rad=.026+(treb_att*0.05);
shapecode_1_enabled=0
shapecode_1_sides=100
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=1
shapecode_1_num_inst=1
shapecode_1_x=0.120
shapecode_1_y=0.530
shapecode_1_rad=0.39317
shapecode_1_ang=0.00000
shapecode_1_tex_ang=3.14159
shapecode_1_tex_zoom=1.43503
shapecode_1_r=0.710
shapecode_1_g=1.000
shapecode_1_b=1.000
shapecode_1_a=0.760
shapecode_1_r2=1.000
shapecode_1_g2=1.000
shapecode_1_b2=1.000
shapecode_1_a2=0.000
shapecode_1_border_r=0.300
shapecode_1_border_g=0.700
shapecode_1_border_b=0.800
shapecode_1_border_a=0.000
shape_1_per_frame1=rad=.16+(mid_att*0.06);
shapecode_2_enabled=0
shapecode_2_sides=44
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=1
shapecode_2_num_inst=1
shapecode_2_x=0.063
shapecode_2_y=0.440
shapecode_2_rad=0.10616
shapecode_2_ang=0.00000
shapecode_2_tex_ang=6.28319
shapecode_2_tex_zoom=1.18903
shapecode_2_r=1.000
shapecode_2_g=0.100
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=1.000
shapecode_2_a2=0.000
shapecode_2_border_r=0.000
shapecode_2_border_g=0.000
shapecode_2_border_b=0.000
shapecode_2_border_a=0.000
shape_2_per_frame1=
shape_2_per_frame2=rad=.016+(bass_att*0.05);
shapecode_3_enabled=0
shapecode_3_sides=100
shapecode_3_additive=1
shapecode_3_thickOutline=1
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.120
shapecode_3_y=0.410
shapecode_3_rad=0.18274
shapecode_3_ang=2.89027
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.49981
shapecode_3_r=0.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=1.000
shapecode_3_b2=0.700
shapecode_3_a2=0.000
shapecode_3_border_r=0.000
shapecode_3_border_g=0.000
shapecode_3_border_b=0.000
shapecode_3_border_a=0.000
shape_3_per_frame1=y=.49-(treb_att*0.03)
per_frame_init_1=//******** INITIALIZATION *********
per_frame_init_2=//---------- some global vars, do not change -------------
per_frame_init_3=avg = 0.01;
per_frame_init_4=q7 = .25; //MyZoom
per_frame_init_5=q8 =  rand(2.0)-1.0; //fractal modifier
per_frame_init_6=//q8 = 1; //#
per_frame_init_7=q16 = 1 + rand(2); //Tele ; rather fish eye
per_frame_init_8=//q16 = 1; //#
per_frame_init_9=q18 = rand(0.8)+.1; //brightness balance back/front
per_frame_init_10=q30 = 1; //logarithmic Z-Dist storage; unused
per_frame_init_11=q31 =128;
per_frame_init_12=start = 1; travel = 0; RotZ = 0; look = 0; slow = 0; t0 = time+3; lampx = .5; lampy = .5;
per_frame_init_13=cran0 = rand(1);
per_frame_init_14=n = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); 
per_frame_init_15=n = 0; loop (10000,  megabuf(n)=0; n=n+1; ); 
per_frame_init_16=trelx = 0;  trely = 0; trelz = 0;
per_frame_init_17=reg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;
per_frame_init_18=
per_frame_init_19=//Find random starting point
per_frame_init_20=while (exec2(
per_frame_init_21=  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;
per_frame_init_22=  PosX = rand(5)-2;   PosY = rand(5)-2;   PosZ = rand(5)-2; 
per_frame_init_23=
per_frame_init_24=//  PosX = 3.3; PosY = 2; PosZ = -2; ran1 = 0; ran2 = 0; ran3 = 0; //#
per_frame_init_25=
per_frame_init_26=  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); 
per_frame_init_27=  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);
per_frame_init_28=
per_frame_init_29=  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;
per_frame_init_30=  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;
per_frame_init_31=  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;
per_frame_init_32=
per_frame_init_33=  //***********BOT*************
per_frame_init_34=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_init_35=  dist = 0.001;
per_frame_init_36=  while (exec2(
per_frame_init_37=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_init_38=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_init_39=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_init_40=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_init_41=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_init_42=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_init_43=    loop (7+1,
per_frame_init_44=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_init_45=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_init_46=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_init_47=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_init_48=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_init_49=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_init_50=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_init_51=    );
per_frame_init_52=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_init_53=    dist *= 1.05;
per_frame_init_54=  ,(dist < 0.6)*(len > 30)));
per_frame_init_55=,(dist < .06))); //end while
per_frame_init_56=
per_frame_init_57=
per_frame_init_58=
per_frame_1=fps_ = .0 * fps_ + 1*if(fps<=25,fps,25+.5*(fps-25)); 
per_frame_2=dec_s = 1-.06*30/fps_;
per_frame_3=beat = (time >  t0+3); t0 = if(beat, time, t0);
per_frame_4=
per_frame_5=//code by anandamide
per_frame_6=eosVol = (bass+mid+treb)*0.25;
per_frame_7=eosVol = eosVol * eosVol;
per_frame_8=eosVol = eosVol * eosVol;
per_frame_9=eosTime = eosTime + eosVol * 0.001 * 60.0/fps;
per_frame_10=
per_frame_11=eosTime2 = eosTime2 + eosVol * 0.013 * 60.0/fps;
per_frame_12=
per_frame_13=eosTime = if( eosTime > 15000.0, -15000.0, eosTime );//seems to be floating accuracy issues above certain values
per_frame_14=eosTime2 = if( eosTime2 > 15000.0, -15000.0, eosTime );
per_frame_15=q30 = 1.0 - (eosTime2-int(eosTime2));
per_frame_16=q9 = eosTime / 13.0;
per_frame_17=monitor = eosTime;
per_frame_18=q9 = eosTime/5.0;
per_frame_19=c0 = (q9-0.00)-int(q9-0.00);
per_frame_20=c1 = (q9-0.25)-int(q9-0.25);
per_frame_21=c2 = (q9-0.50)-int(q9-0.50);
per_frame_22=c3 = (q9-0.75)-int(q9-0.75);
per_frame_23=c0 = abs(c0-0.5);
per_frame_24=c1 = abs(c1-0.5);
per_frame_25=c2 = abs(c2-0.5);
per_frame_26=c3 = abs(c3-0.5);
per_frame_27=c0 = max( min( (c0 - 0.33)/(0.4-0.33), 1.0), 0.0 );
per_frame_28=c1 = max( min( (c1 - 0.33)/(0.4-0.33), 1.0), 0.0 );
per_frame_29=c2 = max( min( (c2 - 0.33)/(0.4-0.33), 1.0), 0.0 );
per_frame_30=c3 = max( min( (c3 - 0.33)/(0.4-0.33), 1.0), 0.0 );
per_frame_31=c0 = c0*c0*(3.0-2.0*c0);
per_frame_32=c1 = c1*c1*(3.0-2.0*c1);
per_frame_33=c2 = c2*c2*(3.0-2.0*c2);
per_frame_34=c3 = c3*c3*(3.0-2.0*c3);
per_frame_35=//eosVol = 2;
per_frame_36=texAng = texAng + eosVol * c0 * -0.007;
per_frame_37=texAng = texAng + eosVol * c1 * 0.0065;
per_frame_38=texAng = texAng + eosVol * c2 * -0.0183;
per_frame_39=texAng = texAng + eosVol * c3 * 0.0184;
per_frame_40=
per_frame_41=q15 = texAng;
per_frame_42=q17 = 1.0 / ( (c0 + c1) * eosVol * 0.1 + (c2+c3)* eosVol*0.011 + 0.7 );
per_frame_43=//end anandamide code
per_frame_44=
per_frame_45=speed = min(0.2,dist_-0.02) * (1.0+2.0*avg) * (1.0-slow*0.0)*0.7/q7;
per_frame_46=
per_frame_47=
per_frame_48=speed = speed * (0.1+min(eosVol,1.5)*0.5);//anandamide
per_frame_49=ds = speed*0.25/fps_;//anandamide
per_frame_50=
per_frame_51=RotZ = if (RotZ==0,beat*(rand(100)<20*travel)*(rand(10)/10-.3),
per_frame_52=                   bnot(beat*(rand(100)<30))*RotZ);
per_frame_53=slow = if (bnot(slow), beat*(rand(1000*avg)<6), bnot(beat*(rand(100)<50)));
per_frame_54=look = if (bnot(look), beat*(rand(1000*speed)<12), bnot(beat*(rand(100)<50)));
per_frame_55=
per_frame_56=//Lamp View
per_frame_57=lx = if (beat,rand(150)/200+.15,lx);
per_frame_58=ly = if (beat,rand(150)/200+.15,ly);
per_frame_59=lampx = lampx * dec_s + (1-dec_s)*if (look,lx,0.5);
per_frame_60=lampy = lampy * dec_s + (1-dec_s)*if (look,ly,0.5);
per_frame_61=q1 = lampx; q2 = lampy;
per_frame_62=
per_frame_63=//Position 
per_frame_64=DirX= reg26; DirY= reg27; DirZ = reg28;
per_frame_65=PosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ; 
per_frame_66=q4 = PosX; q5 = PosY; q6 = PosZ;
per_frame_67=
per_frame_68=angchg = (.2-dist_)*(dist_ < .2)*0.5;
per_frame_69=travel = if (angchg > 0,0,travel+ds);
per_frame_70=v1 = v1 * dec_s + (1-dec_s)* RotZ * ds;
per_frame_71=v2 = v2 *dec_s + (1-dec_s)*angchg *xslope/fps_;
per_frame_72=v3 = v3 *dec_s + (1-dec_s)*(angchg *yslope/fps_ + 2*v1*sin(time*.1));
per_frame_73=//v2 = .008;
per_frame_74=//push old RotMat
per_frame_75=reg30 =reg20; reg31 =reg21; reg32 =reg22; 
per_frame_76=reg33 =reg23; reg34 =reg24; reg35 =reg25; 
per_frame_77=reg36 =reg26; reg37 =reg27; reg38 =reg28; 
per_frame_78=
per_frame_79=iterationDrop = (abs(v1)+abs(v2)+abs(v3)) * 1000.0;
per_frame_80=iterationDrop = min( iterationDrop, 5.0 );
per_frame_81=q29 = iterationDrop;
per_frame_82=
per_frame_83=n = 0; avg = 0;
per_frame_84=loop (5,
per_frame_85=  n = n+1;
per_frame_86=  //new Rot. Mat for infinitesimal angles
per_frame_87=  ran1 = rand(100)/100;
per_frame_88=  ran2 = rand(100)/200-.25;
per_frame_89=  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;
per_frame_90=  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); 
per_frame_91=  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);
per_frame_92=  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;
per_frame_93=  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;
per_frame_94=  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;
per_frame_95=
per_frame_96=  //pop old RotMat
per_frame_97=  reg20 =reg30; reg21 =reg31; reg22 =reg32; 
per_frame_98=  reg23 =reg33; reg24 =reg34; reg25 =reg35; 
per_frame_99=  reg26 =reg36; reg27 =reg37; reg28 =reg38; 
per_frame_100=
per_frame_101=  //Multiply new RotMat by old one
per_frame_102=  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;
per_frame_103=  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;
per_frame_104=  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;
per_frame_105=  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;
per_frame_106=  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;
per_frame_107=  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;
per_frame_108=  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;
per_frame_109=  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;
per_frame_110=  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;
per_frame_111=
per_frame_112=  reg20 =q20; reg21 =q21; reg22 =q22;
per_frame_113=  reg23 =q23; reg24 =q24; reg25 =q25;
per_frame_114=  reg26 =q26; reg27 =q27; reg28 =q28;
per_frame_115=
per_frame_116=
per_frame_117=  //***********BOT*************
per_frame_118=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_119=  dist = 0.002;
per_frame_120=  while (exec2(
per_frame_121=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_122=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_123=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_124=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_125=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_126=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_127=    loop (7+1,
per_frame_128=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_129=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_130=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_131=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_132=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_133=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_134=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_135=    );
per_frame_136=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_137=    dist *= 1.1;
per_frame_138=  ,(dist < 0.6)*(len > 30)));
per_frame_139=  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points
per_frame_140=  avg = avg+abs(megabuf(n)/5);
per_frame_141=); //end loop 5
per_frame_142=
per_frame_143=n = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));
per_frame_144=
per_frame_145=xslope = min(max(2/avg*(megabuf(1)-megabuf(3)),-3),3);
per_frame_146=yslope = min(max(2/avg*(megabuf(4)-megabuf(2)),-3),3);
per_frame_147=
per_frame_148=dist_ = dist_*dec_s + (1-dec_s)*dist;
per_frame_149=
per_frame_150=q10 = ds*q7; //compensation of lin. movement in GetDist and zoom uv
per_frame_151=q14 = 1*abs(ds) + 2*(abs(v1) + abs(v2) + abs(v3)) + 1.0/255 + start*.05; 
per_frame_152=q19 = .5 + .5*sin(time*.02+cran0*6); //brightness backgd
per_frame_153=start = start * .9;
per_frame_154=q11 = v1; q12 = v2; q13 = v3;
per_frame_155=//forward comp. of Rotation
per_pixel_1= warp = 0; dx = .00; zoom = 1; dy = 0;
warp_1=`
warp_2=`
warp_3=`float dist, struc, len; float2 uv0, uv1; float3 uv2; float4 box;
warp_4=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
warp_5=`
warp_6=`static const float3 CamPos = float3(q4,q5,q6);
warp_7=`static const float sustain = .98 - q14, change = q14, ds = q10;
warp_8=`static const float myzoom = q7, limit = 24, tele=q16;
warp_9=`
warp_10=`float GetDist(float2 uvi) {float2 tmp; tmp = tex2D (sampler_pc_main, uvi).gb; 
warp_11=`  return 1-(tmp.y + 1.0/255*tmp.x + ds*.7);}
warp_12=`
warp_13=`float2 PutDist(float x) {float fg, fb; fg = modf((1-x)*255.0,fb);
warp_14=`  return (float2(fg,fb/255.0));}
warp_15=`
warp_16=`float MinDist (float2 uvi) 
warp_17=`{
warp_18=`   float tmp; float4 nb; float4 nb2; float2 pix;
warp_19=`   pix = texsize.zw*(1.0+length(uvi-0.5)*8.0);
warp_20=`   tmp = GetDist(uvi);
warp_21=`   nb.x = GetDist(uvi+pix*float2(-1,-1));  
warp_22=`   nb.y = GetDist(uvi+pix*float2(1,-1));
warp_23=`   nb.z = GetDist(uvi+pix*float2(1,1));   
warp_24=`   nb.w = GetDist(uvi+pix*float2(-1,1));
warp_25=`   nb2.x = GetDist(uvi+pix*float2(0,-1));  
warp_26=`   nb2.y = GetDist(uvi+pix*float2(1,0));
warp_27=`   nb2.z = GetDist(uvi+pix*float2(0,1));   
warp_28=`   nb2.w = GetDist(uvi+pix*float2(-1,0));
warp_29=`   //Eo.S. more efficient usage of min to get min value of all 8 GetDist() calls, removes 11ALU
warp_30=`   nb = min( nb, nb2 );
warp_31=`   nb.xy = min( nb.xy, nb.zw );
warp_32=`   tmp = min( nb.x, nb.y );
warp_33=`   return tmp;
warp_34=`}
warp_35=`
warp_36=`float3 Get1 (float2 uvi) {float3 tmp; float2 pix;
warp_37=`   return lerp (GetPixel(uvi), tmp = GetBlur1(uvi),change*4);} //#
warp_38=`
warp_39=`float4 mbox (float3 uvi, float dist) {float3 zz, zz0; float tmp, li;
warp_40=`  zz = uvi; zz0 = zz+q8; li=0;
warp_41=`  int iterations = 10.0 - max( saturate(dist*2.0)*3.0, saturate(q29/5.0)*3.0 );
warp_42=`  for (int n = 0; n <= iterations; n++) {
warp_43=`    zz = 2.0*clamp(zz,-1,1)-zz;  tmp = dot(zz,zz);
warp_44=`    if (tmp <= 0.25) {zz *= 4; li=limit;} else if (tmp <= 1) {zz /= pow(tmp,1);}
warp_45=`    zz = 2.6*zz + zz0;}
warp_46=`  return float4(zz,li);}
warp_47=`
warp_48=`shader_body {
warp_49=`uv1 = (uv-.5)*aspect.xy*tele;
warp_50=`uv = (uv-.5)*(1-ds/(GetDist(uv))) + .5;
warp_51=`
warp_52=`float baseDist = GetDist(uv);
warp_53=`float3 noise = frac(1000.0*tex2D (sampler_noise_lq,uv+rand_frame.yz)); 
warp_54=`
warp_55=`dist = noise.r;
warp_56=`   if (noise.g > 0.1) 
warp_57=`   {
warp_58=`       float3 noiseBiased = noise - float3( 0.4, 0.5, 0.5 );
warp_59=`//Eo.S. combine the subtraction on noise to a single float3 to ensure compiler does the subtraction in a single ALU
warp_60=`       dist = MinDist( (noiseBiased.zy) * 0.003 +uv ) +  0.008 * (noiseBiased.x) * abs(noiseBiased.y);
warp_61=`   }
warp_62=`dist = min(dist,baseDist);
warp_63=`float tdist = dist + pow(dist,3);
warp_64=`uv2 = mul(float3(uv1*tdist,tdist-.0)/myzoom,RotMat)+CamPos;
warp_65=`uv2 = (frac(uv2/8.0+.5)-.5)*8.0;
warp_66=`box = mbox (uv2, baseDist);
warp_67=`len = (length(box.xyz));
warp_68=`struc = length(box.xyw)/limit;
warp_69=`float dec = log(1+len/limit)*.02*(1-baseDist);
warp_70=`if ((dist <= baseDist) && (len < limit) && (dist > 0.005)){
warp_71=` ret.r = (1-sustain)*struc+sustain*(Get1(uv).r); ret.gb=  PutDist(dist); 
warp_72=`} 
warp_73=` else {
warp_74=` ret = tex2D(sampler_fc_main,uv)*float3(sustain,0,1-dec)-float3(1.0/255,0,change/6);
warp_75=`} 
warp_76=`
warp_77=`}
comp_1=`#define sat saturate
comp_2=`static const float2 pix = texsize.zw;
comp_3=`float glow, tmp, lamp, dist, bdist, b2dist, dist_c;
comp_4=`float2 dz, uv1, uv3;
comp_5=`static const float3 CamPos = float3(q4,q5,q6);
comp_6=`static const float myzoom = q7;
comp_7=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
comp_8=`static const float3 col_back = float3(0,0.4,1);
comp_9=`static const float3 col_struc =  float3(1,.7,.3) + .2*slow_roam_sin;
comp_10=`static float2 center = float2 (q1,q2);
comp_11=`
comp_12=`float3 GetBlurX (float2 uvi, float x) {return lerp (GetPixel(uvi), GetBlur1(uvi), x);}
comp_13=`float GetDist(float2 uvi)   {return 1-GetPixel(uvi).b;}
comp_14=`float GetDistB(float2 uvi)  {return 1-GetBlur1(uvi).b;}
comp_15=`float GetDistB2(float2 uvi) {return 1-GetBlur2(uvi).b;}
comp_16=`
comp_17=`//code by anandamide
comp_18=`sampler sampler_anandamideCTFree00;
comp_19=`static const float4 channelMask = smoothstep( 0.33, 0.40, abs(frac( q9 - float4(0.0,0.25,0.5,0.75) )-0.5) );
comp_20=`
comp_21=`static const float sAng = sin(q15)*q17;
comp_22=`static const float cAng = cos(q15)*q17;
comp_23=`static const float2x2 texMat = float2x2( sAng, cAng, cAng, -sAng );
comp_24=`//end anandamide code
comp_25=`
comp_26=`float MinDistB (float2 uvi) {float tmp; float4 nb; //##nicht ideal
comp_27=`  tmp = GetDist(uvi);
comp_28=`  tmp = min(tmp,GetDistB2(uvi)) ;
comp_29=`  return tmp;}
comp_30=`
comp_31=`shader_body { 
comp_32=`
comp_33=`//TEXTURE - by anandamide
comp_34=`float2 uvBase = uv;
comp_35=`
comp_36=`float2 uvTex = (uvBase-0.5) * aspect * 2.0 + 0.5 + float2( 0.75, 0.1 );
comp_37=`uvTex = mul( uvTex-0.5, texMat ) + 0.5;
comp_38=`
comp_39=`float4 tex = tex2D( sampler_anandamideCTFree00, uvTex );
comp_40=`tex = dot( tex, channelMask );
comp_41=`
comp_42=`
comp_43=`float2 texMaskWork = saturate( abs(uvTex-0.5) * 200.0 - 100.0 );
comp_44=`float texMask = 1.0 - max( texMaskWork.x, texMaskWork.y );
comp_45=`tex *= texMask;
comp_46=`
comp_47=`uv = (uv-0.5) * (1.0-tex*0.02) + 0.5;
comp_48=`//end - anandamide
comp_49=`
comp_50=`uv1 = (uv-center)*aspect.xy;
comp_51=`
comp_52=`
comp_53=`//Glow
comp_54=`float3 uv2 = mul(float3((uv-.5)*MinDistB(uv),MinDistB(uv))/myzoom,RotMat)+CamPos;
comp_55=`//glow = pow (sat(tex2D (sampler_noise_hq,.02*uv2).r-.5)*1,1);
comp_56=`uv += .002*glow*tex2D (sampler_noise_mq,uv/2+float2(0,time/4));
comp_57=`
comp_58=`dist = MinDistB(uv);
comp_59=`bdist = lerp(dist,GetDistB(uv),.2);
comp_60=`b2dist= lerp(dist,GetDistB(uv),1);;
comp_61=`dist_c = clamp(GetDistB2 (center),.1,0); //center distance
comp_62=`
comp_63=`float focus = sat(abs(b2dist-dist_c)*.003);
comp_64=`float struc = GetBlurX(uvBase,focus).r;//focus).r;
comp_65=`
comp_66=`ret = pow(struc,1.5)* (.1+pow(1-focus,.8) *lerp(dist,1-dist,q18)) / (treb+col_struc);
comp_67=`
comp_68=`//Glow
comp_69=`glow *=  (.8+ .1/tex3D (sampler_noisevol_lq,(uv2*2)));
comp_70=`ret += saturate(exp(-4*max(struc,bdist))) * float3(glow,glow,glow);
comp_71=`
comp_72=`//distant light
comp_73=`ret += bdist*bdist*col_back *q19*mid;
comp_74=`
comp_75=`//Lamp
comp_76=`uv3 = uv1; 
comp_77=`lamp = saturate(1-4*length(uv3))*struc*saturate(1-2*bdist)*1.6;
comp_78=`ret += (1-lum(ret))*lamp*float3(.15,.15,1) ;
comp_79=`
comp_80=`//code by anandamide
comp_81=`float scanWidth = 5.0;//width is actually 1/scanWidth
comp_82=`float scan = (dist-(1.0+1.0/scanWidth)) + (q30)*(1.0+1.0/scanWidth*2.0);
comp_83=`scan = saturate( scan * 5.0 );
comp_84=`scan *= (1.0-scan)*4.0;
comp_85=`
comp_86=`float lumRet = dot( ret, float3( 0.33, 0.5, 0.17 ) );
comp_87=`//ret += tex * 0.1 * saturate(1.0-lumRet*3.0);
comp_88=`
comp_89=`ret *= scan * 3.0 + 1.0;
comp_90=`ret *= tex * 1.0 + 1.0;
comp_91=`//end anandamide
comp_92=`
comp_93=`//ret = struc;
comp_94=`ret = 1-exp((-2.6)*ret);
comp_95=`
comp_96=`}
comp_97=`
comp_98=`//-------------------------------------------
comp_99=`//Written by martin
comp_100=`
