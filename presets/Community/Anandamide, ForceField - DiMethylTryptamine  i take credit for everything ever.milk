MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=2
PSVERSION_COMP=3
[preset00]
fRating=0.000
fGammaAdj=1.280
fDecay=0.960
fVideoEchoZoom=0.997
fVideoEchoAlpha=0.000
nVideoEchoOrientation=1
nWaveMode=2
bAdditiveWaves=0
bWaveDots=1
bWaveThick=0
bModWaveAlphaByVolume=0
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.012
fWaveSmoothing=0.900
fWaveParam=0.000
fModWaveAlphaStart=0.750
fModWaveAlphaEnd=0.950
fWarpAnimSpeed=5.278
fWarpScale=0.010
fZoomExponent=1.47412
fShader=0.000
zoom=1.03030
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=1.00000
sy=1.00000
wave_r=0.500
wave_g=0.400
wave_b=0.300
wave_x=0.500
wave_y=0.500
ob_size=0.005
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.010
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=19.640
nMotionVectorsY=11.600
mv_dx=0.020
mv_dy=-0.020
mv_l=4.400
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=1.000
wave_0_init1=ma=.5;
wave_0_init2=my=.5;
wave_0_init3=md=0; //direction 0 1 2 3
wave_0_per_point1=oldmd=md;
wave_0_per_point2=md=(md+int(rand(4)))%4;
wave_0_per_point3=md=if(equal(md,oldmd),(md+1)%4,md);
wave_0_per_point4=
wave_0_per_point5=mx=mx+(equal(md,0)*.002*bass);
wave_0_per_point6=mx=mx-(equal(md,1)*.002*bass);
wave_0_per_point7=my=my+(equal(md,2)*.002*treb);
wave_0_per_point8=my=my-(equal(md,3)*.002*treb);
wave_0_per_point9=
wave_0_per_point10=mx=if(above(mx,.9),.5,mx);
wave_0_per_point11=mx=if(below(mx,.1),.5,mx);
wave_0_per_point12=my=if(above(my,.9),.5,my);
wave_0_per_point13=my=if(below(my,.1),.5,my);
wave_0_per_point14=
wave_0_per_point15=x=mx;
wave_0_per_point16=y=my;
wave_0_per_point17=a=bass*.1;
wave_0_per_point18=
wave_0_per_point19=r=bass*.5;
wavecode_1_enabled=1
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=1
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wave_1_init1=mx=.5;
wave_1_init2=my=.5;
wave_1_init3=md=1;
wave_1_per_point1=oldmd=md;
wave_1_per_point2=md=(md+int(rand(4)))%4;
wave_1_per_point3=md=if(equal(md,oldmd),(md+1)%4,md);
wave_1_per_point4=
wave_1_per_point5=mx=mx+(equal(md,0)*.002*bass);
wave_1_per_point6=mx=mx-(equal(md,1)*.002*bass);
wave_1_per_point7=my=my+(equal(md,2)*.002*treb);
wave_1_per_point8=my=my-(equal(md,3)*.002*treb);
wave_1_per_point9=
wave_1_per_point10=mx=if(above(mx,.9),.5,mx);
wave_1_per_point11=mx=if(below(mx,.1),.5,mx);
wave_1_per_point12=my=if(above(my,.9),.5,my);
wave_1_per_point13=my=if(below(my,.1),.5,my);
wave_1_per_point14=
wave_1_per_point15=x=mx;
wave_1_per_point16=y=my;
wave_1_per_point17=a=bass*.1;
wave_1_per_point18=
wave_1_per_point19=g=treb*.5;
wavecode_2_enabled=1
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=1
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=1
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wave_2_init1=mx=.5;
wave_2_init2=my=.5;
wave_2_init3=md=2;
wave_2_per_point1=oldmd=md;
wave_2_per_point2=md=(md+int(rand(4)))%4;
wave_2_per_point3=md=if(equal(md,oldmd),(md+1)%4,md);
wave_2_per_point4=
wave_2_per_point5=mx=mx+(equal(md,0)*.002*bass);
wave_2_per_point6=mx=mx-(equal(md,1)*.002*bass);
wave_2_per_point7=my=my+(equal(md,2)*.002*treb);
wave_2_per_point8=my=my-(equal(md,3)*.002*treb);
wave_2_per_point9=
wave_2_per_point10=mx=if(above(mx,.9),.5,mx);
wave_2_per_point11=mx=if(below(mx,.1),.5,mx);
wave_2_per_point12=my=if(above(my,.9),.5,my);
wave_2_per_point13=my=if(below(my,.1),.5,my);
wave_2_per_point14=
wave_2_per_point15=x=mx;
wave_2_per_point16=y=my;
wave_2_per_point17=a=bass*.1;
wavecode_3_enabled=1
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=1
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
wave_3_init1=mx=.5;
wave_3_init2=my=.4;
wave_3_init3=md=3;
wave_3_per_point1=oldmd=md;
wave_3_per_point2=md=(md+int(rand(4)))%4;
wave_3_per_point3=md=if(equal(md,oldmd),(md+1)%4,md);
wave_3_per_point4=
wave_3_per_point5=mx=mx+(equal(md,0)*.002*bass);
wave_3_per_point6=mx=mx-(equal(md,1)*.002*bass);
wave_3_per_point7=my=my+(equal(md,2)*.002*treb);
wave_3_per_point8=my=my-(equal(md,3)*.002*treb);
wave_3_per_point9=
wave_3_per_point10=mx=if(above(mx,.9),.5,mx);
wave_3_per_point11=mx=if(below(mx,.1),.5,mx);
wave_3_per_point12=my=if(above(my,.9),.5,my);
wave_3_per_point13=my=if(below(my,.1),.5,my);
wave_3_per_point14=
wave_3_per_point15=x=mx;
wave_3_per_point16=y=my;
wave_3_per_point17=a=bass*.1;
shapecode_0_enabled=1
shapecode_0_sides=12
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=92
shapecode_0_x=0.800
shapecode_0_y=0.500
shapecode_0_rad=0.02705
shapecode_0_ang=1.57080
shapecode_0_tex_ang=1.25664
shapecode_0_tex_zoom=3.07268
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=1.000
shapecode_0_r2=0.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=0.000
shapecode_0_border_b=0.000
shapecode_0_border_a=0.000
shape_0_per_frame1=t1 = time - int (time);
shape_0_per_frame2=sample = instance/num_inst;
shape_0_per_frame3=t_abs = sample*3;
shape_0_per_frame4=t_rel = sample-time/5;
shape_0_per_frame5=
shape_0_per_frame6=ampl = 2*t_abs/2 ;
shape_0_per_frame7=
shape_0_per_frame8=k1=sin(time/13);
shape_0_per_frame9=k2=sin(time/12);
shape_0_per_frame10=ox = ampl*sin (t_abs*(31+5*k1)) + sin(time/25)*(1-t_abs)*0.4  ;
shape_0_per_frame11=oy = ampl*cos (t_abs*(31+5*k2));
shape_0_per_frame12=oz = -1  ;
shape_0_per_frame13=
shape_0_per_frame14=
shape_0_per_frame15=r = sqr(sin(t_rel*3.4));
shape_0_per_frame16=g = sqr(sin(t_rel));
shape_0_per_frame17=b = sqr (cos(t_rel*1.8));
shape_0_per_frame18=
shape_0_per_frame19=//a=(0.1*(sin(t_abs*3)) + 0.6*q3*below (abs(1-t_abs-t1 ),0.3))*a;
shape_0_per_frame20=
shape_0_per_frame21=xang = time/9.5;
shape_0_per_frame22=yang = 0*time/7;
shape_0_per_frame23=zang = -time/22;
shape_0_per_frame24=fov = 0.5;
shape_0_per_frame25=
shape_0_per_frame26=
shape_0_per_frame27=// Rotation um x,y,z
shape_0_per_frame28=
shape_0_per_frame29=mx = ox*cos(zang) - oy*sin(zang);
shape_0_per_frame30=my = ox*sin(zang) + oy*cos(zang);
shape_0_per_frame31=
shape_0_per_frame32=ox = mx;
shape_0_per_frame33=oy = my;
shape_0_per_frame34=mx = ox*cos(yang) + oz*sin(yang);
shape_0_per_frame35=mz = - ox*sin(yang) + oz*cos(yang);
shape_0_per_frame36=ox = mx;
shape_0_per_frame37=oz = mz;
shape_0_per_frame38=my = oy*cos(xang) - oz*sin(xang);
shape_0_per_frame39=mz = oy*sin(xang) + oz*cos(xang);
shape_0_per_frame40=oy = my;
shape_0_per_frame41=oz = mz;
shape_0_per_frame42=
shape_0_per_frame43=oz = oz - 6;
shape_0_per_frame44=x = ox*fov/oz +0.5;
shape_0_per_frame45=//x = (x-.5)*0.75 + 0.5;
shape_0_per_frame46=y = oy*fov/oz + 0.5;
shape_0_per_frame47=
shape_0_per_frame48=a=1/mz*.5;
shape_0_per_frame49=//a2=1/mz*.5;
shape_0_per_frame50=//border_a=1/mz*.5;
shape_0_per_frame51=rad=1/mz*.005;
shapecode_1_enabled=1
shapecode_1_sides=6
shapecode_1_additive=1
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=200
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.10000
shapecode_1_ang=1.82212
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=1.000
shapecode_1_g=0.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=1.000
shapecode_1_b2=0.000
shapecode_1_a2=0.000
shapecode_1_border_r=0.400
shapecode_1_border_g=0.000
shapecode_1_border_b=0.000
shapecode_1_border_a=0.140
shape_1_per_frame1=/*2010 Anandamide Logistics 
shape_1_per_frame2=Anandamide is Phat and Eo.S.
shape_1_per_frame3=Concept by Phat
shape_1_per_frame4=Graffiti font created in Context Free by ForceField
shape_1_per_frame5=Spraypaint can concept by Phat
shape_1_per_frame6=Spraypaint can 3d modeling created in 3d Studio Max by Eo.S.
shape_1_per_frame7=Graffiti created by Phat with character and graffiti illustrations from Phat Eo.S. and ForceField
shape_1_per_frame8=Graffiti created in Structure Synth by Phat
shape_1_per_frame9=Milkdrop code created by Eo.S.
shape_1_per_frame10=
shape_1_per_frame11=Special thanks to Phong who masked out the electromagnetic spectrum used in the graffiti 
shape_1_per_frame12=If your going to remix this please do it right.*/
shape_1_per_frame13=
shape_1_per_frame14=r = 1; g = 0; b = 0;
shape_1_per_frame15=r2 =1; g2= 0; b2= 0;
shape_1_per_frame16=a = 0; a2= 0.05*treb;
shape_1_per_frame17=rad=0.100+(mid*0.01);
shape_1_per_frame18=
shape_1_per_frame19=n = instance;
shape_1_per_frame20=
shape_1_per_frame21=xCount = 10;
shape_1_per_frame22=
shape_1_per_frame23=instanceCount = 200;
shape_1_per_frame24=musicTime = q24 * 5.0 + time * 2.0;
shape_1_per_frame25=
shape_1_per_frame26=blink = ((musicTime+n)/instanceCount * 6) - int((musicTime+n)/instanceCount * 6);
shape_1_per_frame27=blink = max( (1.0-blink) * 12.0 - 11.0, 0.0 );
shape_1_per_frame28=blink = blink * blink;
shape_1_per_frame29=
shape_1_per_frame30=phase = sin( time * 30.0 + n / instanceCount * 2.0 ) * 0.5 + 0.5;
shape_1_per_frame31=
shape_1_per_frame32=
shape_1_per_frame33=a = blink*0.3;
shape_1_per_frame34=a2 = a2 + blink*0.3 + blink*blink;
shape_1_per_frame35=r = 1.0 - blink*0.5;
shape_1_per_frame36=r2 = 1.0-blink*0.5;
shape_1_per_frame37=g = 0;
shape_1_per_frame38=g2 = 0;
shape_1_per_frame39=
shape_1_per_frame40=rad = rad * (blink*0.5+1.0);
shape_1_per_frame41=
shape_1_per_frame42=//rad = rad * phase;
shape_1_per_frame43=
shape_1_per_frame44=//gmegabuf(0) is aspecty
shape_1_per_frame45=x = int(n / xCount) / xCount - 1.0;
shape_1_per_frame46=x = (x-0.5) / gmegabuf(0) * 0.88 + 0.78;
shape_1_per_frame47=y = (n/xCount)-int(n/xCount);
shape_1_per_frame48=y = if( above( int(n/xCount)%2, 0 ), y + 0.5/xCount, y );
shape_1_per_frame49=
shape_1_per_frame50=rad = rad / (q18*0.5+0.5);
shape_1_per_frame51=x = (x-0.5) / (q18*0.5+0.5) + 0.5;
shape_1_per_frame52=y = (y-0.5) / (q18*0.5+0.5) + 0.5;
shapecode_2_enabled=1
shapecode_2_sides=100
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=1
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.03333
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=0.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=0.000
shapecode_2_g2=0.000
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.000
shape_2_per_frame1=x = int(rand(100))*.01;
shape_2_per_frame2=y = int(rand(100))*.01;
shape_2_per_frame3=
shape_2_per_frame4=a = if(above(frame%1,0),0,1);
shape_2_per_frame5=
shape_2_per_frame6=vol=bass+mid+treb;
shape_2_per_frame7=rad = vol*.1;
shapecode_3_enabled=1
shapecode_3_sides=4
shapecode_3_additive=1
shapecode_3_thickOutline=0
shapecode_3_textured=1
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=9.62733
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.69892
shapecode_3_r=1.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=0.500
shapecode_3_r2=1.000
shapecode_3_g2=0.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=0.000
shapecode_3_border_b=0.000
shapecode_3_border_a=0.420
shape_3_per_frame1=/*2010 Anandamide Logistics 
shape_3_per_frame2=Anandamide is Phat and Eo.S.
shape_3_per_frame3=Concept by Phat
shape_3_per_frame4=Graffiti font created in Context Free by ForceField
shape_3_per_frame5=Spraypaint can concept by Phat
shape_3_per_frame6=Spraypaint can 3d modeling created in 3d Studio Max by Eo.S.
shape_3_per_frame7=Graffiti created by Phat with character and graffiti illustrations from Phat Eo.S. and ForceField
shape_3_per_frame8=Graffiti created in Structure Synth by Phat
shape_3_per_frame9=Milkdrop code created by Eo.S.
shape_3_per_frame10=
shape_3_per_frame11=Special thanks to Phong who masked out the electromagnetic spectrum used in the graffiti 
shape_3_per_frame12=If your going to remix this please do it right.*/
shape_3_per_frame13=
shape_3_per_frame14=ang=sin( time * 0.2 ) * 5.0;
shape_3_per_frame15=tex_zoom=.1;//((treb+mid)*0.1);
shape_3_per_frame16=
shape_3_per_frame17=g = 0;
shape_3_per_frame18=g2 = 0;
shape_3_per_frame19=border_g = 0;
per_frame_1=count = if(below(count,9),count+1,0);
per_frame_2=
per_frame_3=q1 = 0.5;
per_frame_4=q2 = 0.5;
per_frame_5=q3 = count;
per_frame_6=
per_frame_7=zoom = 1 + 0.065*bass_att+0.05*bass;
per_frame_8=monitor=q3;
per_frame_9=q30=bass+mid+treb;
per_frame_10=q20=q30*.3;
warp_1=`shader_body
warp_2=`{
warp_3=`    // sample previous frame
warp_4=`    ret.xyz = tex2D( sampler_main, uv ).xyz;
warp_5=`float3 ret7=ret;
warp_6=`if(frame%3==0)ret.z=.71-ret7.x;
warp_7=`
warp_8=`
warp_9=`      // take the difference between the crisp and blurred images,
warp_10=`      // then add it back into the image.  Creates spots and stripes over time.
warp_11=`      float3 b = lerp(GetBlur2(uv),GetBlur1(uv),uv_orig.x);//GetBlur2(uv);
warp_12=`      ret.xyz += (ret.xyz - b)*0.3 - (((bass+treb+mid-0.5)*.333)*.02);
warp_13=`
warp_14=`if(frame%5==0)ret.x=.71-ret7.y;
warp_15=`
warp_16=`      ret.xyz *= 0.95;
warp_17=`
warp_18=`      // add noise:
warp_19=`      float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 0.4 + rand_frame.xy;
warp_20=`      ret.xyz += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)/256.0 * 122 * saturate(treb_att-1);
warp_21=`
warp_22=`      // desaturate over time, to keep the globs white
warp_23=`      ret.xyz = lerp(ret.xyz, lum(ret.xyz), 0.2);
warp_24=`if(frame%7==0)ret.y=.71-ret7.z;
warp_25=`
warp_26=`}
comp_1=`/*2010 Anandamide Logistics 
comp_2=`Anandamide is Phat and Eo.S.
comp_3=`Concept by Phat
comp_4=`Graffiti font created in Context Free by ForceField
comp_5=`Spraypaint can concept by Phat
comp_6=`Spraypaint can 3d modeling created in 3d Studio Max by Eo.S.
comp_7=`Graffiti created by Phat with character and graffiti illustrations from Phat Eo.S. and ForceField
comp_8=`Graffiti created in Structure Synth by Phat
comp_9=`Milkdrop code created by Eo.S.
comp_10=`
comp_11=`Special thanks to Phong who masked out the electromagnetic spectrum used in the graffiti 
comp_12=`If your going to remix this please do it right.*/
comp_13=`
comp_14=`sampler sampler_graffBotAnim01;
comp_15=`sampler sampler_graffBotGraff00;
comp_16=`sampler sampler_rand00;
comp_17=`sampler sampler_rand01;
comp_18=`
comp_19=`static const float AnimTime = frac( q20 );//is +1 for 2nd graff tex
comp_20=`static const float2 AnimOffset = float2( floor( frac( frac(q20) * 4.0 ) * 4.0 ) / 4.0, floor( frac(q20) * 4.0 ) / 4.0 );
comp_21=`static const float4 AnimChannel = (frac( frac(q20) * 16.0 ) >= float4( 0.0, 0.25, 0.5, 0.75 )) * (frac( frac(q20) * 16.0 ) < float4( 0.25, 0.5, 0.75, 1.0 )); 
comp_22=`static const float2 GraffScale = float2( 1.0 - q17*0.01, 1.0 - q17*0.01 );
comp_23=`static const float Vol = pow( (bass+mid+treb)*0.25, 2.0 );
comp_24=`
comp_25=`static const float2 AnimMove = float2( q21 * -0.35, 0.0 );
comp_26=`static const float4 Swipe = float4( 1.0-q21*1.3, 1.0-q22*1.3, 1.0-(q21*1.3-0.3), 1.0-(q22*1.3-0.3) );
comp_27=`static const float VertShift = (1.31-pow( (1.0/aspect.y-1)*1.19+1.0, 0.5 )) * 1.03 + 0.115;
comp_28=`
comp_29=`static const float4x4 MatViewI = float4x4( q1, q2, q3, q4,  q5, q6, q7, q8,  q9, q10, q11, q12,  q13, q14, q15, q16 );
comp_30=`static const float3 ViewPos = float3( q4, q8, q12 );//float3( q17, q18, q19 );
comp_31=`
comp_32=`static const float BeamTop = 0.4;//sin( time * 0.4 ) * 30.0;
comp_33=`static const float BeamBtm = BeamTop - 0.8;
comp_34=`static const float BeamDensity = 1.0 / 15.0;
comp_35=`
comp_36=`static const float2 ScanMod = float2( sin( q24 * 1.1 ) * 0.2 + 0.2, sin( q24 * 0.5 ) * 14.0 + 4.0 );
comp_37=`
comp_38=`//static const float2 BeamCurveBase = pow( smoothstep( -1.0, 1.0, float2( sin( q24 / 1.0 ), sin( time / 2.3 ) * 1.5 - 0.5 ) ), 2.0 ) * 1.0;
comp_39=`static const float2 BeamCurve = q31;//(sqrt(smoothstep(0.0,0.5,BeamCurveBase)) + pow(smoothstep(0.5,1.0,BeamCurveBase),2.0)*0.6)/2.0;
comp_40=`static const float2 StripeBounds = ( sin( time.xx / 1.1 ) * abs(sin(time.xx/1.1)) * 0.5 + 0.5 ) * 0.93 + float2( 0.0, 0.07 );
comp_41=`static const float3 Col = lerp( float3( 4.0, 1.0, 1.2 ),
comp_42=`                                lerp( float3( 4.0, 1.5, 1.0 ), float3( 6.0, 1.0, 0.5 ), smoothstep( 0.5, 1.5, mid ) ),
comp_43=`                                q18 );
comp_44=`static const float3 HexCol = lerp( float3( 0.0, 1.0, 1.0 ), float3( 0.0, 0.5, 1.0 ), q18 );
comp_45=`
comp_46=`static const float CanAnimTime = pow(q25,0.5);
comp_47=`static const float4 CanStart = float4( 1.0, 1.0, 0.27, 0.2 - (pow(q25,2.0)*(1.0-pow(q25,0.5)))*3.0 ) * 3.0 + //tiling, offset
comp_48=`             float4( 0.0, 0.0, (q25 == 0 ? (1.0-q21) * 1.75 : 0.0)+0.02, 0.03 ) + //this line moves the can to stay in bot's hand during spray
comp_49=`             float4( 0.0, 0.0,  frac(q20) < 0.9374 ? 100.0 : 0.0, 0.0 );//remove can during transform by pushing off screen
comp_50=`
comp_51=`//it seems in some cases, that basing preshader variables on other preshader variables causes them to instead be calculated in the
comp_52=`//shader. But not always...
comp_53=`static const float2x2 CanRotMat = float2x2( cos(sqrt(q25)*12.57), -sin(sqrt(q25)*12.57), sin(sqrt(q25)*12.57), cos(sqrt(q25)*12.57) );
comp_54=`
comp_55=`static const float CanGrowTime = smoothstep( 0.0, 1.0, q26 );
comp_56=`static const float BotExitTime = q27;
comp_57=`
comp_58=`static const float2 BeamPan = lerp( float2( 37.5 + ( frac( (sin(time*1.0)*0.5+0.5)*8.0 ) * 30.0 - 15.0 ) * saturate(1.0-frac(time*0.11)*4.0) 
comp_59=`                                        + pow( saturate( frac(time*0.11) * 5.0 ), 2.0 ) * float2( -20.0, 20.0 )  ), 
comp_60=`                                    float2(-10000.0,10000.0), 1.0 - saturate( q30 / 0.004 ) ); 
comp_61=`
comp_62=`shader_body {//SHADER BODY---------------
comp_63=`float4 foo = 0;//if w is 1, output is overridden with foo
comp_64=`float3 warpShaderOut = GetPixel(uv);
comp_65=`ret = tex2D( sampler_main, uv_orig ).xyz;
comp_66=`
comp_67=`
comp_68=`float4 position_vs = float4( (uv.xy * float2(2.0,2.0) + float2(-1.0,-1.0)) * aspect * 100.0, 0.0, 1.0 );
comp_69=`position_vs.xy = lerp( position_vs.xy, length( position_vs.xy ), BeamCurve.x );
comp_70=`
comp_71=`float4 position_ws = mul( position_vs, MatViewI );
comp_72=`//float3 ground_ws = float3( (uv.xy * 2.0 - 1.0 ) * aspect, (1.0-saturate(uv.y) * 100.0 + 1.0 ) );
comp_73=`//ground_ws.xy *= ground_ws.z;
comp_74=`//float3 foo = frac(ground_ws / 1.0 );
comp_75=`
comp_76=`float3 viewVec = position_ws.xyz - ViewPos;//vector from camera to world position
comp_77=`
comp_78=`float top = BeamTop;
comp_79=`float btm = BeamBtm;
comp_80=`if( viewVec.y > 0.0 )//if angled up
comp_81=`{
comp_82=`   //top of section must be below vector end, and above vector start
comp_83=`   top = min( top, position_ws.y );
comp_84=`   top = max( top, ViewPos.y );
comp_85=`   btm = min( btm, position_ws.y );
comp_86=`   btm = max( btm, ViewPos.y );
comp_87=`}
comp_88=`else //angled down
comp_89=`{
comp_90=`   //top of section must be below vector start, and above vector end
comp_91=`   top = min( top, ViewPos.y );
comp_92=`   top = max( top, position_ws.y );
comp_93=`   btm = min( btm, ViewPos.y );
comp_94=`   btm = max( btm, position_ws.y );
comp_95=`}
comp_96=`
comp_97=`float section = top - btm;
comp_98=`float sectionAmount = ( abs(section) / abs(viewVec.y) );
comp_99=`
comp_100=`
comp_101=`float distToTop = abs(ViewPos.y - (ViewPos.y>BeamBtm?BeamTop:BeamBtm)) / abs(viewVec.y); //distToTop *= length( viewVec );
comp_102=`float3 topCoords = ViewPos + distToTop * viewVec;
comp_103=`float angle = atan2( -topCoords.z, topCoords.x ); float depth = saturate( 1.0 - (topCoords.z / -100.0) ); float modPinWidth = depth*depth*0.15;//widens the thin beams in the distance
comp_104=`
comp_105=`topCoords.xz = topCoords.xz / 4.0;
comp_106=`topCoords.xz = (topCoords.xz + float2( 0.0, 25.0 - abs(q30/0.15) * 5.0 )) / (abs(q30)*10.0+1.0);//adjust tiling so it doesn't move so much
comp_107=`topCoords.xz *= 2.0;//extra tiling adjustment
comp_108=`
comp_109=`float stripeBase = clamp( angle * 24.0, BeamPan.x, BeamPan.y ); float beamLimit = saturate( (stripeBase-BeamPan.x) / (BeamPan.y-BeamPan.x) ); 
comp_110=`float2 beamLimit2 = smoothstep( float2(0.0,0.0), float2(0.03,0.2), beamLimit * (1.0 - beamLimit) ); 
comp_111=`beamLimit = beamLimit2.x + beamLimit2.x * (1.0-beamLimit2.x) * 10.0; 
comp_112=`float topScan = frac( stripeBase * ScanMod.x + ScanMod.y );
comp_113=`float stripe = smoothstep( StripeBounds.x - modPinWidth, StripeBounds.y + modPinWidth, abs( topScan * 2.0 - 1.0 ) );//bounds have a separation of 0.07 - beam stripes
comp_114=`float phaseBase = frac( stripeBase * 0.01 + time * 16.0 ); float phase = smoothstep( 0.31, 1.0, phaseBase * (1.0-phaseBase) * 4.0 );
comp_115=`topScan = stripe + (1.0-abs(stripe*2.0-1.0))*14.0 + 0.3;//strip + thin beams at stripe edges
comp_116=`topScan *= phase;
comp_117=`float smoke = GetPixel( (topCoords.xz / 4.0) / (abs(q30)*24.0 + 1.0) + float2( q32, 0.0 ) ).b; 
comp_118=`topScan *= smoke*smoke * 4.0 + 0.5; 
comp_119=`
comp_120=`float fogDepth = sectionAmount * length( viewVec );
comp_121=`float fog = 1.0 - 1.0 / (fogDepth * BeamDensity * (topScan + 0.8 ) + 1.0);
comp_122=`
comp_123=`fog *= beamLimit.x;
comp_124=`
comp_125=`
comp_126=`fog = lerp( fog, 1.0, depth*depth*saturate(fog*2.0) );//push the beam to white at max distance 
comp_127=`float2 shadowUV = (uv-0.5) * pow(min(depth*4.0,1.0),1.09) + 0.5;
comp_128=`float shadow = tex2D( sampler_main, shadowUV ).g; float rim = saturate( shadow * 3.0 - 2.0 );
comp_129=`float interSect = smoothstep( 0.24, 0.26, depth ); interSect *= (1.0-interSect) * 14.0 * (rim)*(1.0-rim); 
comp_130=`interSect *= saturate(fog*8.0);
comp_131=`float toSoft = saturate( depth * 8.0 - 2.0 ); shadow = saturate( shadow.xxx * (toSoft*9.0+1.0) - toSoft*9.0 ); 
comp_132=`fog *= 1.0 - shadow;
comp_133=`
comp_134=`fog += interSect;
comp_135=`
comp_136=`
comp_137=`float3 weCanHazLasers = fog;
comp_138=`weCanHazLasers = pow( weCanHazLasers, Col );
comp_139=`
comp_140=`ret = 0;// weCanHazLasers;
comp_141=`ret += ( warpShaderOut.r * HexCol ) * saturate(1.0-fog*2.0);
comp_142=`
comp_143=`//zw of botcoords is can coords
comp_144=`//note: aspect.y is 1.0/aspecty from per frame - widescreen is < 1.0
comp_145=`float2 uvS = float2( uv.x, uv.y - VertShift) * aspect.xy;
comp_146=`uvS.y = uvS.y;
comp_147=`
comp_148=`float2 graffCoords = uvS * 1.8 * float2( 1.0, 4.0 * 256.0/275.0 ) + float2( -0.6, -1.2 );
comp_149=`
comp_150=`graffCoords.xy = (graffCoords.xy-float2(0.25,0.5))*GraffScale+float2(0.25,0.5);
comp_151=`graffCoords.xy += dot( warpShaderOut.rb, float2(2.0,1.0) ) * q23 * 0.15;
comp_152=`
comp_153=`float2 graffMask2 = abs( graffCoords - 0.5 ) < 0.5;
comp_154=`float graffMask = min( graffMask2.x, graffMask2.y );
comp_155=`float4 graff = 0.5;
comp_156=`float2 graffSwipe = smoothstep( Swipe.xy, Swipe.zw, graffCoords.xx );// smoothstep( 1.0-Swipe*1.3, 1.0-(Swipe*1.3-0.3), graffCoords.xx ) ;
comp_157=`if( graffMask > 0.5 )
comp_158=`{
comp_159=`   graffCoords.y = graffCoords.y * 0.25 + floor(q20) * 0.25;
comp_160=`   graff = tex2Dlod( sampler_rand01, float4(graffCoords,0.0, (1.0-graffSwipe.y)*5.0 + q23*5.0 ) );
comp_161=`   graff.rgb *= saturate( graff.b - graff.r ) * Vol * 1.0 + 1.0;
comp_162=`}
comp_163=`graff.a *= graffMask;
comp_164=`graff = lerp( float4( 0.5,0.5,0.5,0.0 ), graff, graffSwipe.x * (1.0-q23) );
comp_165=`
comp_166=`float4 botCoords = uvS.xyxy /* aspect.xyxy*/ * float4( 0.6, 0.6, CanStart.xy ) - float4( 0.35, 0.08, CanStart.zw );
comp_167=`
comp_168=`//foo = float4( frac(botCoords.xyx) + float3(0.0,0.0,botCoords.y > 1.0), 1.0 );
comp_169=`//foo = float4( botCoords.xyx, 1.0 );
comp_170=`float2 botCoordsStart = botCoords; botCoords.xy +=  - float4( AnimMove, 0.0, 0.0 );
comp_171=`botCoords.zw = lerp( botCoords.zw, (botCoordsStart-float2(0.18,0.25))*CanStart.xy+float2(0.27,0.25), CanAnimTime );
comp_172=`
comp_173=`botCoords.zw = lerp( botCoords.zw, botCoordsStart, CanGrowTime );
comp_174=`botCoords.zw = mul( botCoords.zw-1.0/8.0, CanRotMat ) + 1.0/8.0;
comp_175=`
comp_176=`botCoords.xy += dot( warpShaderOut.rb, float2(2.0,1.0)) * BotExitTime * 0.05;
comp_177=`float4 botMask2 = abs( botCoords * 4.0 - 0.5 ) < 0.5;
comp_178=`float2 botMask = botMask2.xz * botMask2.yw;
comp_179=`
comp_180=`//foo = float4( botCoords.x, dot( botMask, 0.5 ), botCoords.y, 1.0 );
comp_181=`
comp_182=`
comp_183=`float4 bot = 0;
comp_184=`float4 can = 0;
comp_185=`if( botMask.x > 0.5 )
comp_186=`{
comp_187=`  bot = tex2Dbias( sampler_graffBotAnim01, float4( botCoords.xy + AnimOffset, 0.0, -2.0 ) );
comp_188=`  bot = dot( bot, AnimChannel );
comp_189=`  bot -= BotExitTime*BotExitTime;
comp_190=`}
comp_191=`if( botMask.y > 0.5 )
comp_192=`{
comp_193=`  can = tex2D( sampler_rand00, botCoords.zw );
comp_194=`}
comp_195=`bot = smoothstep( float4( 0.2, 0.25, 0.7, 0.85 ), float4( 0.3, 0.55, 0.8, 1.0 ), bot.r );
comp_196=`bot = float4( dot( bot.gb, 1.0/4.0 ).xxx + bot.a*weCanHazLasers, bot.x );
comp_197=`
comp_198=`bot.a *= 1.0 - BotExitTime;
comp_199=`
comp_200=`
comp_201=`can = smoothstep( float4( 0.2, 0.25, 0.7, 0.85 ), float4( 0.3, 0.55, 0.8, 1.0 ), can.r );
comp_202=`can = float4( dot( can.gb, 1.0/4.0 ).xxx + can.a*weCanHazLasers, can.x );
comp_203=`
comp_204=`//bot.rgb *= lerp( 1.0, bot.rgb, float3(1.0,0.5,0.0) );
comp_205=`//composite graff
comp_206=`ret = lerp( lerp(ret, ret * graff * 2.0, graff.a), graff, graff.a * 0.75 );
comp_207=`
comp_208=`//composite bot and can
comp_209=`ret = lerp( ret, can, can.a );
comp_210=`ret = lerp( ret, bot, bot.a );   
comp_211=`
comp_212=`ret += weCanHazLasers;
comp_213=`
comp_214=`/*
comp_215=`float2 uvFlare = ( uv - 0.5 ) * aspect;
comp_216=`uvFlare = atan( (uvFlare.x) / (uvFlare.y) ) * 6.0;
comp_217=`uvFlare = abs( frac(uvFlare) * 2.0 - 1.0 );
comp_218=`uvFlare = (uv-0.5)*uvFlare+0.5;
comp_219=`float3 flare = tex2D( sampler_pw_main, uvFlare );
comp_220=`ret = flare; 
comp_221=`*/
comp_222=`//ret = frac(topCoords.xz * float2(1.0,16.0)).xyx;
comp_223=`//ret = topScan / 4.0;
comp_224=`//ret = GetPixel(uv);
comp_225=`ret = foo.w > 0.5 ? foo.rgb : ret;
comp_226=`//ret = warpShaderOut.rgb;
comp_227=`
comp_228=`float3 ret7=ret;
comp_229=`if(frame%02==0)ret.x=.71-ret7.y;
comp_230=`if(frame%11==0)ret.y=.71-ret7.z;
comp_231=`if(frame%13==0)ret.z=.71-ret7.x;
comp_232=`ret=.71-ret;
comp_233=`}