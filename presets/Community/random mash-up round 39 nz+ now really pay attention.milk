MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=5.000
fGammaAdj=1.000
fDecay=0.995
fVideoEchoZoom=1.007
fVideoEchoAlpha=0.000
nVideoEchoOrientation=3
nWaveMode=0
bAdditiveWaves=1
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=1.413
fWaveScale=0.418
fWaveSmoothing=0.000
fWaveParam=-0.660
fModWaveAlphaStart=2.000
fModWaveAlphaEnd=2.000
fWarpAnimSpeed=0.626
fWarpScale=1.331
fZoomExponent=1.00001
fShader=0.000
zoom=0.99951
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.08925
sx=1.00000
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=1.000
wave_x=0.240
wave_y=0.440
ob_size=0.000
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.000
ib_r=0.000
ib_g=0.250
ib_b=1.000
ib_a=1.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.000
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=489
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=2.02310
wavecode_0_smoothing=0.00000
wavecode_0_r=0.000
wavecode_0_g=1.000
wavecode_0_b=0.000
wavecode_0_a=1.000
wave_0_init1=t2 = 0;
wave_0_init2=t3 = 0;
wave_0_init3=t4 = 0;
wave_0_init4=cl = 0;
wave_0_per_frame1=vol = bass*8 + mid*5 + treb*3;
wave_0_per_frame2=m = m*0.97 + vol*0.08;
wave_0_per_frame3=monitor = vol;
wave_0_per_frame4=beat = above(vol,res)*above(vol,m)*above(vol,16);
wave_0_per_frame5=diff = (1-beat)*diff + beat*(vol-res);
wave_0_per_frame6=res = beat*(vol + m*0.04) + (1-beat)*(res -  (0.1+diff*0.02)*60/fps);
wave_0_per_frame7=res = max(0,res);
wave_0_per_frame8=
wave_0_per_frame9=r = beat*0.1;
wave_0_per_point1=t = sample*3.141592*2;
wave_0_per_point2=fnord = (1+sin(t))*(1+0.9 * cos(8*t))*(1+0.1*cos(24*t))*(0.9+0.05*cos(200*t))*0.12;
wave_0_per_point3=y = 0.3 + sin(t)*fnord;
wave_0_per_point4=x = 0.5 + cos(t)*fnord;
wave_0_per_point5=
wavecode_1_enabled=1
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=1
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=0.36971
wavecode_1_smoothing=0.00000
wavecode_1_r=0.010
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wave_1_init1=chance = 0;
wave_1_per_frame1=t1 = asin(1);
wave_1_per_frame2=
wave_1_per_frame3=rot = rot + q6;
wave_1_per_frame4=t2 = rot;
wave_1_per_frame5=
wave_1_per_frame6=q4 = 0.5 + (q4-0.5)*q15;
wave_1_per_frame7=q5 = 0.5 + (q5-0.5)*q15;
wave_1_per_frame8=;
wave_1_per_point1=w = 4*t1*sample;
wave_1_per_point2=fnord = cos(4*(w-t2))*sin(5*(w-t2));
wave_1_per_point3=
wave_1_per_point4=d = q3*0.8*q15*fnord + value1*0;
wave_1_per_point5=
wave_1_per_point6=x = q4 + sin(w)*d - cos(-t2)*0.04;
wave_1_per_point7=y = q5 + cos(w)*d - sin(-t2)*0.04;
wavecode_2_enabled=1
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=1
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=0.36971
wavecode_2_smoothing=0.00000
wavecode_2_r=0.010
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wave_2_init1=chance = 0;
wave_2_per_frame1=t1 = asin(1);
wave_2_per_frame2=
wave_2_per_frame3=rot = rot + q9;
wave_2_per_frame4=t2 = rot;
wave_2_per_frame5=
wave_2_per_frame6=q7 = 0.5 + (q7-0.5)*q15;
wave_2_per_frame7=q8 = 0.5 + (q8-0.5)*q15;
wave_2_per_point1=w = 4*t1*sample + t2;
wave_2_per_point2=fnord = cos(4*(w-t2))*sin(5*(w-t2));
wave_2_per_point3=
wave_2_per_point4=d = q3*0.8*q15*fnord + value1*0;
wave_2_per_point5=
wave_2_per_point6=x = q7 + sin(w)*d - cos(-t2)*0.04;
wave_2_per_point7=y = q8 + cos(w)*d - sin(-t2)*0.04;
wavecode_3_enabled=1
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=0.36971
wavecode_3_smoothing=0.00000
wavecode_3_r=0.010
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
wave_3_init1=chance = 0;
wave_3_per_frame1=t1 = asin(1);
wave_3_per_frame2=
wave_3_per_frame3=rot = rot + q12;
wave_3_per_frame4=t2 = rot;
wave_3_per_frame5=
wave_3_per_frame6=q10 = 0.5 + (q10-0.5)*q15;
wave_3_per_frame7=q11= 0.5 + (q11-0.5)*q15;
wave_3_per_point1=w = 4*t1*sample + t2;
wave_3_per_point2=fnord = cos(4*(w-t2))*sin(5*(w-t2));
wave_3_per_point3=
wave_3_per_point4=d = q3*0.8*q15*fnord + value1*0;
wave_3_per_point5=
wave_3_per_point6=x = q10 + sin(w)*d - cos(-t2)*0.04;
wave_3_per_point7=y = q11 + cos(w)*d - sin(-t2)*0.04;
shapecode_0_enabled=1
shapecode_0_sides=3
shapecode_0_additive=0
shapecode_0_thickOutline=1
shapecode_0_textured=1
shapecode_0_num_inst=311
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.01000
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.62832
shapecode_0_tex_zoom=1.00000
shapecode_0_r=0.000
shapecode_0_g=0.000
shapecode_0_b=0.000
shapecode_0_a=1.000
shapecode_0_r2=0.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.000
shapecode_0_border_r=0.000
shapecode_0_border_g=0.000
shapecode_0_border_b=0.000
shapecode_0_border_a=0.000
shape_0_per_frame1=ma=ma+(above(bass,1)*3.1415*.01*bass);
shape_0_per_frame2=ma=ma-(above(treb,1)*3.1415*.01*treb);
shape_0_per_frame3=
shape_0_per_frame4=mx=mx+(.0002*cos(ma));
shape_0_per_frame5=my=my+(.0002*tan(ma));
shape_0_per_frame6=
shape_0_per_frame7=mx=if(above(mx,.9),(.9-mx),mx);
shape_0_per_frame8=my=if(above(my,.9),(.9-my),my);
shape_0_per_frame9=mx=if(below(mx,.1),(.9+mx),mx);
shape_0_per_frame10=my=if(below(my,.1),(.9+my),my);
shape_0_per_frame11=
shape_0_per_frame12=x=1-mx;
shape_0_per_frame13=y=1-my;
shape_0_per_frame14=
shape_0_per_frame15=ang=(sin(time*.35)+1)*3;
shape_0_per_frame16=//a=(above(bass+mid+treb,.8));
shape_0_per_frame17=pi23=4*asin(1)*.333333333;
shape_0_per_frame18=t1=bass+mid+treb;
shapecode_1_enabled=1
shapecode_1_sides=12
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=92
shapecode_1_x=0.800
shapecode_1_y=0.500
shapecode_1_rad=0.02705
shapecode_1_ang=1.57080
shapecode_1_tex_ang=1.25664
shapecode_1_tex_zoom=3.07268
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=1.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.000
shapecode_1_b2=0.000
shapecode_1_a2=0.000
shapecode_1_border_r=1.000
shapecode_1_border_g=0.000
shapecode_1_border_b=0.000
shapecode_1_border_a=0.000
shape_1_per_frame1=t1 = time - int (time);
shape_1_per_frame2=sample = instance/num_inst;
shape_1_per_frame3=t_abs = sample*3;
shape_1_per_frame4=t_rel = sample-time/5;
shape_1_per_frame5=
shape_1_per_frame6=ampl = 2*t_abs/2 ;
shape_1_per_frame7=
shape_1_per_frame8=k1=sin(time/13);
shape_1_per_frame9=k2=sin(time/12);
shape_1_per_frame10=ox = ampl*sin (t_abs*(31+5*k1)) + sin(time/25)*(1-t_abs)*0.4  ;
shape_1_per_frame11=oy = ampl*cos (t_abs*(31+5*k2));
shape_1_per_frame12=oz = -1  ;
shape_1_per_frame13=
shape_1_per_frame14=
shape_1_per_frame15=r = sqr(sin(t_rel*3.4));
shape_1_per_frame16=g = sqr(sin(t_rel));
shape_1_per_frame17=b = sqr (cos(t_rel*1.8));
shape_1_per_frame18=
shape_1_per_frame19=//a=(0.1*(sin(t_abs*3)) + 0.6*q3*below (abs(1-t_abs-t1 ),0.3))*a;
shape_1_per_frame20=
shape_1_per_frame21=xang = time/9.5;
shape_1_per_frame22=yang = 0*time/7;
shape_1_per_frame23=zang = -time/22;
shape_1_per_frame24=fov = 0.5;
shape_1_per_frame25=
shape_1_per_frame26=
shape_1_per_frame27=// Rotation um x,y,z
shape_1_per_frame28=
shape_1_per_frame29=mx = ox*cos(zang) - oy*sin(zang);
shape_1_per_frame30=my = ox*sin(zang) + oy*cos(zang);
shape_1_per_frame31=
shape_1_per_frame32=ox = mx;
shape_1_per_frame33=oy = my;
shape_1_per_frame34=mx = ox*cos(yang) + oz*sin(yang);
shape_1_per_frame35=mz = - ox*sin(yang) + oz*cos(yang);
shape_1_per_frame36=ox = mx;
shape_1_per_frame37=oz = mz;
shape_1_per_frame38=my = oy*cos(xang) - oz*sin(xang);
shape_1_per_frame39=mz = oy*sin(xang) + oz*cos(xang);
shape_1_per_frame40=oy = my;
shape_1_per_frame41=oz = mz;
shape_1_per_frame42=
shape_1_per_frame43=oz = oz - 6;
shape_1_per_frame44=x = ox*fov/oz +0.5;
shape_1_per_frame45=//x = (x-.5)*0.75 + 0.5;
shape_1_per_frame46=y = oy*fov/oz + 0.5;
shape_1_per_frame47=
shape_1_per_frame48=a=1/mz*.5;
shape_1_per_frame49=//a2=1/mz*.5;
shape_1_per_frame50=//border_a=1/mz*.5;
shape_1_per_frame51=rad=1/mz*.005;
shapecode_2_enabled=1
shapecode_2_sides=14
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=512
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.10260
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.62832
shapecode_2_tex_zoom=1.00000
shapecode_2_r=1.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=1.000
shapecode_2_g2=0.000
shapecode_2_b2=0.000
shapecode_2_a2=1.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.000
shape_2_per_frame1=ma=ma+(above(bass,1)*3.1415*.01*bass);
shape_2_per_frame2=ma=ma-(above(treb,1)*3.1415*.01*treb);
shape_2_per_frame3=
shape_2_per_frame4=mx=mx+(.0002*cos(ma));
shape_2_per_frame5=my=my+(.0002*sin(ma));
shape_2_per_frame6=
shape_2_per_frame7=mx=if(above(mx,.9),(.9-mx),mx);
shape_2_per_frame8=my=if(above(my,.9),(.9-my),my);
shape_2_per_frame9=mx=if(below(mx,.1),(.9+mx),mx);
shape_2_per_frame10=my=if(below(my,.1),(.9+my),my);
shape_2_per_frame11=
shape_2_per_frame12=x=mx;
shape_2_per_frame13=y=my;
shape_2_per_frame14=rad=(bass+treb)/100;
shape_2_per_frame15=a=(above(bass+mid+treb,.8));
shape_2_per_frame16=r=int(rand(100))/100;
shape_2_per_frame17=g=int(rand(100))/100;
shape_2_per_frame18=b=int(rand(100))/100;
shape_2_per_frame19=r2=int(rand(100))/100;
shape_2_per_frame20=g2=int(rand(100))/100;
shape_2_per_frame21=b2=int(rand(100))/100;
shape_2_per_frame22=r_border=int(rand(100))/100;
shape_2_per_frame23=g_border=int(rand(100))/100;
shape_2_per_frame24=b_border=int(rand(100))/100;
shapecode_3_enabled=0
shapecode_3_sides=48
shapecode_3_additive=1
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=4
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.02770
shapecode_3_ang=6.03186
shapecode_3_tex_ang=6.03186
shapecode_3_tex_zoom=0.68390
shapecode_3_r=1.000
shapecode_3_g=1.000
shapecode_3_b=1.000
shapecode_3_a=1.000
shapecode_3_r2=1.000
shapecode_3_g2=1.000
shapecode_3_b2=1.000
shapecode_3_a2=1.000
shapecode_3_border_r=0.000
shapecode_3_border_g=0.000
shapecode_3_border_b=0.000
shapecode_3_border_a=1.000
shape_3_per_frame1=an = an + 0.5*q16/num_inst;
shape_3_per_frame2=w = asin(1)*4*instance/num_inst + an;
shape_3_per_frame3=x = q6 + sin(w)*q5*0.5;
shape_3_per_frame4=y = q7 + cos(w)*q5*0.5;
shape_3_per_frame5=rad = q5*0.25;
shape_3_per_frame6=
shape_3_per_frame7=
shape_3_per_frame8=//x = 0.5 + (x-0.5)/q2;
shape_3_per_frame9=//y = 0.5 + (y-0.5)/q1;
shape_3_per_frame10=
per_frame_init_1=x1 = 0.5;
per_frame_init_2=y1 = 0.6;
per_frame_init_3=
per_frame_init_4=x2 = 0.5;
per_frame_init_5=y2 = 0.4;
per_frame_init_6=
per_frame_init_7=x3 = 0.5;
per_frame_init_8=y3 = 0.2;
per_frame_init_9=
per_frame_init_10=vr1 = 0.0001;
per_frame_init_11=vr2 = 0.0;
per_frame_init_12=vr3 = 0.0;
per_frame_init_13=
per_frame_init_14=vx1 = 0;
per_frame_init_15=vx2 = 0;
per_frame_init_16=vx3 = 0;
per_frame_1=chng=sin(time*.5);
per_frame_2=cthr=.9999;
per_frame_3=mq21=if(above(chng,cthr),rand(3),mq21);
per_frame_4=mq22=if(above(chng,cthr),rand(3),mq22);
per_frame_5=mq23=if(above(chng,cthr),rand(3),mq23);
per_frame_6=mq24=if(above(chng,cthr),rand(2),mq24);
per_frame_7=mq25=if(above(chng,cthr),rand(2),mq25);
per_frame_8=mq26=if(above(chng,cthr),rand(2),mq26);
per_frame_9=mq27=if(above(chng,cthr),rand(1),mq27);
per_frame_10=mq28=if(above(chng,cthr),rand(1),mq28);
per_frame_11=mq29=if(above(chng,cthr),rand(1)*.3,mq29);
per_frame_12=mq31=if(above(chng,cthr),rand(1)*.3,mq31);
per_frame_13=monitor=chng;
per_frame_14=q21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;
per_frame_15=q27=mq27;q28=mq28;q29=mq29;q31=mq31;
per_frame_16=
per_frame_17=monitor=mq1;
per_frame_18=vol=bass+treb+mid;
per_frame_19=atime=atime+vol;
per_frame_20=q11=.4+sin(atime*.006        )*.4;
per_frame_21=q12=.4+cos(atime*.00613828348)*.4;
per_frame_22=q13=.4+sin(atime*.00598593455)*.4;
per_frame_23=monitor=q13;
per_frame_24=
per_frame_25=zoom = 1;
per_frame_26=warp = 0;
per_frame_27=wave_a = 0;
per_frame_28=
per_frame_29=// impuls transmission with an angular momentum factor, 3 bodies
per_frame_30=// code by Flexi
per_frame_31=// good luck with tuning these values to a fine dynamic behavior ;-)
per_frame_32=
per_frame_33=   r = 0.11+ (bass_att+treb_att)*0.005; // the object's radius
per_frame_34=
per_frame_35=   gravity = 0.01;
per_frame_36=
per_frame_37=   bouncedampening = 0.94;  // This is where kinetic energy is taken from the system.
per_frame_38=                            // Be careful with values close to 1.0
per_frame_39=
per_frame_40=   bounceimpact = 0.17;     // When an object hits one border, it slightly penetrates it.
per_frame_41=                            // The impact value determines how strong this depth is taken as resulting impuls.
per_frame_42=                            // This is where kinetic energy possibly is added to the system depent on the increase in size.
per_frame_43=
per_frame_44=// don't change below
per_frame_45=
per_frame_46=// bouncing off borders (the first rotating object)
per_frame_47=
per_frame_48=   y1  = y1+vy1; // adding velocity vector to position
per_frame_49=   x1  = x1+vx1;
per_frame_50=
per_frame_51=   vr  = sin(vr1)*r; // tangential velocity
per_frame_52=bounce = below(y1,r-(aspectx-1)*0.5); // hit floor?
per_frame_53=   vy1 = if(bounce, abs(vy1)*bouncedampening + (r-y1-(aspectx-1)*0.5)*bounceimpact, vy1-gravity/fps);
per_frame_54=   vx1 = if(bounce, vx1 + (vr-vx1)*bounceimpact, vx1);
per_frame_55=   vr  = if(bounce, vr + (vx1-vr)*0.85 , vr);
per_frame_56=bounce = above(x1,1-r+(aspecty-1)*0.5); // hit right border?
per_frame_57=   vx1 = if(bounce, - abs(vx1)*bouncedampening + (1-r-x1+(aspecty-1)*0.5)*bounceimpact, vx1);
per_frame_58=   vy1 = if(bounce, vy1 + (vr-vy1)*bounceimpact, vy1);
per_frame_59=   vr  = if(bounce, vr + (vy1-vr)*0.85 , vr);
per_frame_60=bounce = below(x1,r-(aspecty-1)*0.5); // hit left border?
per_frame_61=   vx1 = if(bounce, abs(vx1)*bouncedampening + (r-x1-(aspecty-1)*0.5)*bounceimpact, vx1);
per_frame_62=   vy1 = if(bounce, vy1 + (-vr-vy1)*bounceimpact, vy1);
per_frame_63=   vr  = if(bounce, vr - (vy1+vr)*0.85 , vr);
per_frame_64=   vr1 = asin(vr/r); // angular velocity of the surface
per_frame_65=
per_frame_66=// bouncing off borders (the second rotating object)
per_frame_67=vr=sin(vr2)*r;bounce=below(y2,r-(aspectx-1)*0.5);y2=y2+vy2;vy2=if(bounce,abs(vy2)*bouncedampening+(r-y2-(aspectx-1)*0.5)
per_frame_68=*bounceimpact,vy2-gravity/fps);vx2=if(bounce,vx2+(vr-vx2)*bounceimpact,vx2);vr=if(bounce,vr+(vx2-vr)*0.85,vr);
per_frame_69=bounce=above(x2,1-r+(aspecty-1)*0.5);vx2=if(bounce,-abs(vx2)*bouncedampening+(1-r-x2+(aspecty-1)*0.5)*bounceimpact,vx2);
per_frame_70=vy2=if(bounce,vy2+(vr-vy2)*bounceimpact,vy2);vr=if(bounce,vr+(vy2-vr)*0.85,vr);bounce=below(x2,r-(aspecty-1)*0.5);x2=x2+vx2;
per_frame_71=vx2=if(bounce,abs(vx2)*bouncedampening+(r-x2-(aspecty-1)*0.5)*bounceimpact,vx2);vy2=if(bounce,vy2+(-vr-vy2)*bounceimpact,vy2);
per_frame_72=vr=if(bounce,vr-(vy2+vr)*0.85,vr);vr2=asin(vr/r);
per_frame_73=
per_frame_74=// bouncing off borders (the third rotating object)
per_frame_75=vr=sin(vr3)*r;bounce=below(y3,r-(aspectx-1)*0.5);y3=y3+vy3;vy3=if(bounce,abs(vy3)*bouncedampening+(r-y3-(aspectx-1)*0.5)
per_frame_76=*bounceimpact,vy3-gravity/fps);vx3=if(bounce,vx3+(vr-vx3)*bounceimpact,vx3);vr=if(bounce,vr+(vx3-vr)*0.85,vr);
per_frame_77=bounce=above(x3,1-r+(aspecty-1)*0.5);vx3=if(bounce,-abs(vx3)*bouncedampening+(1-r-x3+(aspecty-1)*0.5)*bounceimpact,vx3);
per_frame_78=vy3=if(bounce,vy3+(vr-vy3)*bounceimpact,vy3);vr=if(bounce,vr+(vy3-vr)*0.85,vr);bounce=below(x3,r-(aspecty-1)*0.5);x3=x3+vx3;
per_frame_79=vx3=if(bounce,abs(vx3)*bouncedampening+(r-x3-(aspecty-1)*0.5)*bounceimpact,vx3);vy3=if(bounce,vy3+(-vr-vy3)*bounceimpact,vy3);
per_frame_80=vr=if(bounce,vr-(vy3+vr)*0.85,vr);vr3=asin(vr/r);
per_frame_81=
per_frame_82=// bouncing of object1 with object2
per_frame_83=
per_frame_84=bounce = below( sqrt( sqr(x1+vx1-x2-vx2) + sqr(y1+vy1-y2-vy2)), 2*r); // is distance < diameter ?
per_frame_85=bounce = bounce*below(sqrt( sqr(x1+vx1-x2-vx2) + sqr(y1+vy1-y2-vy2)),sqrt( sqr(x1-x2) + sqr(y1-y2))); // detect only if objects
per_frame_86=                                                                                                      // move towards each other
per_frame_87=ref_ang = atan2(x2-x1,y2-y1)+asin(1); // angle of the common tangent
per_frame_88=v1 = sqrt(vx1*vx1+vy1*vy1); // absolute velocity
per_frame_89=v2 = sqrt(vx2*vx2+vy2*vy2);
per_frame_90=w1 = atan2(vx1,vy1); // absolute motion angle
per_frame_91=w2 = atan2(vx2,vy2);
per_frame_92=vr = sin(vr1)*r; // angular velocity of the surface
per_frame_93=v2r= sin(vr2)*r;
per_frame_94=// in case of a bounce, the velocity is split into the horizontal and vertical part relative to the common tangent,
per_frame_95=// then the vertical aspects get swapped.
per_frame_96=// a bounce goes 90% into impuls transmission and 10% angular momentum transmission.
per_frame_97=// these values make quite a plausible impression, but in fact this has pretty little to do with physical correctness ;)
per_frame_98=vx1 = if(bounce,sin(ref_ang)*v1*cos(w1-ref_ang) + ((vr-v2r)-sin(ref_ang)*v1*cos(w1-ref_ang))*0.1
per_frame_99=              + sin(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)), vx1);
per_frame_100=vy1 = if(bounce,cos(ref_ang)*v1*cos(w1-ref_ang) + ((vr-v2r)-cos(ref_ang)*v1*cos(w1-ref_ang))*0.1
per_frame_101=              + cos(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)), vy1);
per_frame_102=vx2 = if(bounce,sin(ref_ang)*v2*cos(w2-ref_ang) + ((v2r-vr)-sin(ref_ang)*v2*cos(w2-ref_ang))*0.1
per_frame_103=              + sin(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)), vx2);
per_frame_104=vy2 = if(bounce,cos(ref_ang)*v2*cos(w2-ref_ang) + ((v2r-vr)-cos(ref_ang)*v2*cos(w2-ref_ang))*0.1
per_frame_105=              + cos(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)), vy2);
per_frame_106=vr = if(bounce, vr + (cos(w1-ref_ang)*(v1-v2)-vr)*0.9 , vr);
per_frame_107=vr1 = asin(vr/r);
per_frame_108=v2r = if(bounce, v2r + (cos(w2-ref_ang)*(v2-v1)-v2r)*0.9 , v2r);
per_frame_109=vr2 = asin(v2r/r);
per_frame_110=
per_frame_111=// bouncing of object1 with object3
per_frame_112=
per_frame_113=
per_frame_114=bounce=below(sqrt(sqr(x1+vx1-x3-vx3)+sqr(y1+vy1-y3-vy3)),2*r);bounce=bounce*below(sqrt(sqr(x1+vx1-x3-
per_frame_115=vx3)+sqr(y1+vy1-y3-vy3)),sqrt(sqr(x1-x3)+sqr(y1-y3)));ref_ang=atan2(x3-x1,y3-y1)+asin(1);v1=sqrt(vx1*vx1
per_frame_116=+vy1*vy1);v2=sqrt(vx3*vx3+vy3*vy3);w1=atan2(vx1,vy1);w2=atan2(vx3,vy3);vr=sin(vr1)*r;v2r=sin(vr3)*r;vx1
per_frame_117==if(bounce,sin(ref_ang)*v1*cos(w1-ref_ang)+((vr-v2r)-sin(ref_ang)*v1*cos(w1-ref_ang))*0.1+sin(ref_ang+
per_frame_118=asin(1))*v2*cos(w2-ref_ang-asin(1)),vx1);vy1=if(bounce,cos(ref_ang)*v1*cos(w1-ref_ang)+((vr-v2r)-cos
per_frame_119=(ref_ang)*v1*cos(w1-ref_ang))*0.1+cos(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)),vy1);vx3=if(bounce,sin
per_frame_120=(ref_ang)*v2*cos(w2-ref_ang)+((v2r-vr)-sin(ref_ang)*v2*cos(w2-ref_ang))*0.1+sin(ref_ang+asin(1))*v1*cos
per_frame_121=(w1-ref_ang-asin(1)),vx3);vy3=if(bounce,cos(ref_ang)*v2*cos(w2-ref_ang)+((v2r-vr)-cos(ref_ang)*v2*cos(w2
per_frame_122=-ref_ang))*0.1+cos(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)),vy3);vr=if(bounce,vr+(cos(w1-ref_ang)*(v1
per_frame_123=-v2)-vr)*0.9,vr);vr1=asin(vr/r);v2r=if(bounce,v2r+(cos(w2-ref_ang)*(v2-v1)-v2r)*0.9,v2r);vr3=asin(v2r/r);
per_frame_124=
per_frame_125=// bouncing of object3 with object2
per_frame_126=bounce=below(sqrt(sqr(x3+vx3-x2-vx2)+sqr(y3+vy3-y2-vy2)),2*r);bounce=bounce*below(sqrt(sqr(x2+vx2-x3-
per_frame_127=vx3)+sqr(y2+vy2-y3-vy3)),sqrt(sqr(x2-x3)+sqr(y2-y3)));ref_ang=atan2(x2-x3,y2-y3)+asin(1);v1=sqrt(vx3*vx3
per_frame_128=+vy3*vy3);v2=sqrt(vx2*vx2+vy2*vy2);w1=atan2(vx3,vy3);w2=atan2(vx2,vy2);vr=sin(vr3)*r;v2r=sin(vr2)*r;vx3
per_frame_129==if(bounce,sin(ref_ang)*v1*cos(w1-ref_ang)+((vr-v2r)-sin(ref_ang)*v1*cos(w1-ref_ang))*0.1+sin(ref_ang+
per_frame_130=asin(1))*v2*cos(w2-ref_ang-asin(1)),vx3);vy3=if(bounce,cos(ref_ang)*v1*cos(w1-ref_ang)+((vr-v2r)-cos
per_frame_131=(ref_ang)*v1*cos(w1-ref_ang))*0.1+cos(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)),vy3);vx2=if(bounce,sin
per_frame_132=(ref_ang)*v2*cos(w2-ref_ang)+((v2r-vr)-sin(ref_ang)*v2*cos(w2-ref_ang))*0.1+sin(ref_ang+asin(1))*v1*cos
per_frame_133=(w1-ref_ang-asin(1)),vx2);vy2=if(bounce,cos(ref_ang)*v2*cos(w2-ref_ang)+((v2r-vr)-cos(ref_ang)*v2*cos(w2
per_frame_134=-ref_ang))*0.1+cos(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)),vy2);vr=if(bounce,vr+(cos(w1-ref_ang)*(v1
per_frame_135=-v2)-vr)*0.9,vr);vr3=asin(vr/r);v2r=if(bounce,v2r+(cos(w2-ref_ang)*(v2-v1)-v2r)*0.9,v2r);vr2=asin(v2r/r);
per_frame_136=
per_frame_137=
per_frame_138=q1 = aspectx;
per_frame_139=q2 = aspecty;
per_frame_140=q3 = r*2;
per_frame_141=
per_frame_142=q4  = x1;  q5 = y1;  q6 = vr1;
per_frame_143=q7  = x2;  q8 = y2;  q9 = vr2;
per_frame_144=q10 = x3; q11 = y3; q12 = vr3;
per_frame_145=q13 = atan2( (x1+x2+x3)/3 - 0.5, (y1+y2+y3)/3-0.5);
per_frame_146=q14 = sigmoid(sqrt( sqr((x1+x2+x3)/3 - 0.5) + sqr((y1+y2+y3)/3-0.5) ),2)*0.2;
per_frame_147=q15 = 1/max(aspectx,aspecty);
per_pixel_1=c = 42; // impacts the "sharpness" of the sigmoid filter function
per_pixel_2=s = 0.5; // strength of the rotation
per_pixel_3=d = q3*0.6; // radius of the sigmoid filter function
per_pixel_4=
per_pixel_5=//
per_pixel_6=cx1 = 0.5 + (q4-0.5)*q15;
per_pixel_7=cy1 = 0.5 - (q5-0.5)*q15;
per_pixel_8=d1 = sqrt( sqr(x-cx1) + sqr(y-cy1));
per_pixel_9=s1 = sigmoid(d-d1,c)*s;
per_pixel_10=rx1 = -q6*sin(y-cy1)*s1;
per_pixel_11=ry1 = q6*sin(x-cx1)*s1;
per_pixel_12=
per_pixel_13=cx2 = 0.5 + (q7-0.5)*q15;
per_pixel_14=cy2 = 0.5 - (q8-0.5)*q15;
per_pixel_15=d2 = sqrt( sqr(x-cx2) + sqr(y-cy2));
per_pixel_16=s2 = sigmoid(d-d2,c)*s;
per_pixel_17=rx2 = -q9*sin(y-cy2)*s2;
per_pixel_18=ry2 = q9*sin(x-cx2)*s2;
per_pixel_19=
per_pixel_20=cx3 = 0.5 + (q10-0.5)*q15;
per_pixel_21=cy3 = 0.5 - (q11-0.5)*q15;
per_pixel_22=d3 = sqrt( sqr(x-cx3) + sqr(y-cy3));
per_pixel_23=s3 = sigmoid(0.12-d3,c)*s;
per_pixel_24=rx3 = -q12*sin(y-cy3)*s3;
per_pixel_25=ry3 = q12*sin(x-cx3)*s3;
per_pixel_26=
per_pixel_27=
per_pixel_28=
per_pixel_29=dx = rx1 + rx2 + rx3;
per_pixel_30=dy = ry1 + ry2 + ry3;
per_pixel_31=
warp_1=`shader_body
warp_2=`{
warp_3=`
warp_4=`   // plasma effect in the green channel
warp_5=`
warp_6=`   float pixelDistance   = 4;
warp_7=`   float motionStrength  = 4;
warp_8=`
warp_9=`   float diffusionFactor = 1;  
warp_10=`   float decay           = -0.01 + GetPixel(uv).z*0.1;
warp_11=`
warp_12=`   float2 uv_y = lerp(uv_orig,uv,1);
warp_13=`   float2 dither_uv = uv*texsize.xy*texsize_noise_lq.zw*diffusionFactor;
warp_14=`
warp_15=`   float2 d = texsize.zw*pixelDistance;
warp_16=`   float1 dx = ( 2*GetBlur1(uv_y + float2(1,0)*d) - 2*GetBlur1(uv_y-float2(1,0)*d) ).y*0.5;
warp_17=`   float1 dy = ( 2*GetBlur1(uv_y + float2(0,1)*d) - 2*GetBlur1(uv_y-float2(0,1)*d) ).y*0.5;
warp_18=`
warp_19=`   float2 my_uv = uv_y + float2(dx,dy)*texsize.zw*motionStrength;
warp_20=`
warp_21=`   ret.y = tex2D( sampler_fw_main, saturate(my_uv)).y;
warp_22=`
warp_23=`   ret.y += (2*ret - 2*GetBlur1(uv_y)).y*0.0125 + decay;
warp_24=`
warp_25=`
warp_26=`   ret.y += (tex2D(sampler_noise_lq, dither_uv).y-0.5)*0.02;
warp_27=`ret.y=.71-ret.y;
warp_28=`
warp_29=`
warp_30=`   dx = ( 2*GetBlur1(uv_y + float2(1,0)*d) - 2*GetBlur1(uv_y-float2(1,0)*d) ).x*0.5;
warp_31=`   dy = ( 2*GetBlur1(uv_y + float2(0,1)*d) - 2*GetBlur1(uv_y-float2(0,1)*d) ).x*0.5;
warp_32=`
warp_33=`   my_uv = uv_y - float2(dx,dy)*texsize.zw*motionStrength;
warp_34=`
warp_35=`ret.x = GetPixel(my_uv).x - ret.y*0.01 + 0.004;    
warp_36=`
warp_37=`float4 noise9 = tex3D(sampler_noisevol_hq, 
warp_38=`                      ((my_uv.xyy*q27
warp_39=`                       )*texsize.xyy*texsize_noisevol_hq.zww
warp_40=`                      ).xyz*
warp_41=`                      float3(1,1,0)*0.05 + 
warp_42=`                      time*float3(0,0,1)*q29
warp_43=`                     );
warp_44=`if(ret.x> q21*q13         && ret.x<= q24*q11        )ret.y += (noise9).x*.5; 
warp_45=`if(ret.y> q22*q11         && ret.y<= q25*q12        )ret.z += (noise9).y*.5; 
warp_46=`if(ret.z> q23*q12         && ret.z<= q26*q13        )ret.x += (noise9).z*.5; 
warp_47=`ret.z=.71-ret.z;
warp_48=`
warp_49=`ret.x += (tex2D(sampler_noise_lq, dither_uv).y-0.5)*0.01;
warp_50=`ret.x=.71-ret.x;
warp_51=`
warp_52=`}
comp_1=`shader_body
comp_2=`{
comp_3=`    float2 d = texsize.zw;
comp_4=`    float3 dx = ( GetPixel(uv+float2(1,0)*d)-GetPixel(uv-float2(1,0)*d) );
comp_5=`    float3 dy = ( GetPixel(uv+float2(0,1)*d)-GetPixel(uv-float2(0,1)*d) );
comp_6=`float2 dz = float2(dx.y,dy.y)*3;
comp_7=`
comp_8=`d = texsize.zw*2;
comp_9=`dx = ( GetBlur1(uv+float2(1,0)*d)-GetBlur1(uv-float2(1,0)*d) );
comp_10=`dy = ( GetBlur1(uv+float2(0,1)*d)-GetBlur1(uv-float2(0,1)*d) );
comp_11=`
comp_12=`dz +=float2(dx.y,dy.y);
comp_13=`
comp_14=`float3 bg = pow(length(dz)*0.8+0,0.7) + GetBlur2(uv).y*0.4-0.1;
comp_15=`
comp_16=`ret = bg*float3(0.25,0.75,0.2);
comp_17=`ret = lerp(ret,float3(0.2,0.1,0),GetPixel(uv + float2(dx.x,dy.x)*texsize.zw*18).x*6);
comp_18=`ret = lerp(ret,float3(1,0.9,0.7),GetPixel(uv).z);
comp_19=`
comp_20=`//ret = GetPixel(uv);
comp_21=`}
