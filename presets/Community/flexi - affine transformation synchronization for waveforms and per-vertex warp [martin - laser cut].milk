MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=5.000
fGammaAdj=1.000
fDecay=1.000
fVideoEchoZoom=2.000
fVideoEchoAlpha=0.000
nVideoEchoOrientation=1
nWaveMode=0
bAdditiveWaves=1
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=1
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.009
fWaveScale=2.713
fWaveSmoothing=0.000
fWaveParam=0.000
fModWaveAlphaStart=1.200
fModWaveAlphaEnd=1.200
fWarpAnimSpeed=0.204
fWarpScale=8.471
fZoomExponent=1.00000
fShader=0.000
zoom=0.99951
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.15038
sx=1.00000
sy=1.00000
wave_r=0.440
wave_g=0.400
wave_b=1.000
wave_x=0.500
wave_y=0.500
ob_size=0.005
ob_r=0.010
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.260
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=44.160
nMotionVectorsY=33.600
mv_dx=0.000
mv_dy=0.000
mv_l=0.500
mv_r=1.000
mv_g=0.000
mv_b=0.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=4
wavecode_0_bSpectrum=1
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=100.00000
wavecode_0_smoothing=0.00000
wavecode_0_r=0.050
wavecode_0_g=0.150
wavecode_0_b=1.000
wavecode_0_a=1.000
wave_0_init1=t2 = 0;
wave_0_init2=t3 = 0;
wave_0_init3=t4 = 0;
wave_0_init4=ab = 1;
wave_0_per_frame1=// parameters
wave_0_per_frame2=w = time*0.5; // rotation (0..2Pi)
wave_0_per_frame3=t1 = 0.5; // center for rotation (x)
wave_0_per_frame4=t2 = 0.5; // center for rotation (y)
wave_0_per_frame5=t3 = 1; // scale
wave_0_per_frame6=t4 = 0; // translation (x)
wave_0_per_frame7=t5 = 0; // translation (y)
wave_0_per_frame8=t6 = sin(w);
wave_0_per_frame9=t7 = cos(w);
wave_0_per_point1=xx = if(equal(sample,0),q3,xx);
wave_0_per_point2=yy = if(equal(sample,0),q4,yy);
wave_0_per_point3=
wave_0_per_point4=
wave_0_per_point5=dx = xx*(1-xx)-q5*xx*yy/(xx+q6);
wave_0_per_point6=dy = q7*yy*(1-yy/xx);
wave_0_per_point7=
wave_0_per_point8=x1 = xx;
wave_0_per_point9=y1 = yy;
wave_0_per_point10=
wave_0_per_point11=xx = xx+dx*0.2;
wave_0_per_point12=yy = yy+dy*0.2;
wave_0_per_point13=
wave_0_per_point14=x1 = 0.5+(x1-0.5)/q1 + dy*value1*0.01;
wave_0_per_point15=y1 = 0.5+(y1-0.5)/q2 - dx*value1*0.01;
wave_0_per_point16=
wave_0_per_point17=
wave_0_per_point18=// synchronized affine transformation
wave_0_per_point19=x = q26 + ((x1-q26)*q32 + (y1-q27)*q31)*q28 + q29;
wave_0_per_point20=y = q27 + (-(x1-q26)*q31 + (y1-q27)*q32)*q28 + q30;
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wave_1_per_point1=xx1 = if(equal(sample,0),q11,xx1);
wave_1_per_point2=yy1 = if(equal(sample,0),q12,yy1);
wave_1_per_point3=zz1 = if(equal(sample,0),q13,zz1);
wave_1_per_point4=
wave_1_per_point5=dx1 = q14*(yy1-xx1);
wave_1_per_point6=dy1 = xx1*(q15-zz1)-yy1;
wave_1_per_point7=dz1 = xx1*yy1-q16*zz1;
wave_1_per_point8=xx1 = xx1 + q17*dx1;
wave_1_per_point9=yy1 = yy1 + q17*dy1;
wave_1_per_point10=zz1 = zz1 + q17*dz1;
wave_1_per_point11=
wave_1_per_point12=my_x = xx1*0.02;
wave_1_per_point13=my_y = yy1*0.02;
wave_1_per_point14=my_z = zz1*0.02;
wave_1_per_point15=
wave_1_per_point16=x = 0.5 + my_x;
wave_1_per_point17=y = 0.5 + my_y;
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=0
shapecode_0_sides=3
shapecode_0_additive=1
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=1
shapecode_0_x=0.670
shapecode_0_y=0.530
shapecode_0_rad=0.17457
shapecode_0_ang=0.25133
shapecode_0_tex_ang=3.14159
shapecode_0_tex_zoom=0.99979
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=1.000
shapecode_0_r2=1.000
shapecode_0_g2=1.000
shapecode_0_b2=1.000
shapecode_0_a2=1.000
shapecode_0_border_r=1.000
shapecode_0_border_g=0.500
shapecode_0_border_b=0.150
shapecode_0_border_a=0.000
shapecode_1_enabled=0
shapecode_1_sides=23
shapecode_1_additive=1
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=817
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.02798
shapecode_1_ang=0.00000
shapecode_1_tex_ang=3.14159
shapecode_1_tex_zoom=0.99979
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=1.000
shapecode_1_a=0.410
shapecode_1_r2=1.000
shapecode_1_g2=1.000
shapecode_1_b2=1.000
shapecode_1_a2=0.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.000
shapecode_2_enabled=0
shapecode_2_sides=100
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=1
shapecode_2_num_inst=1
shapecode_2_x=0.900
shapecode_2_y=0.500
shapecode_2_rad=0.10000
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=1.000
shapecode_2_g=1.000
shapecode_2_b=1.000
shapecode_2_a=1.000
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=1.000
shapecode_2_a2=1.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.100
shape_2_per_frame1=x = sin(time) * .4 + .5;
shape_2_per_frame2=
shape_2_per_frame3=
shape_2_per_frame4=pow( (bass*.15),2);
shapecode_3_enabled=0
shapecode_3_sides=36
shapecode_3_additive=1
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.81623
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=0.000
shapecode_3_g=0.040
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=0.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.000
shape_3_per_frame1=x = 1-q1;
shape_3_per_frame2=y = q2;
shape_3_per_frame3=x = 0.5 + (x - 0.5)*0.25;
shape_3_per_frame4=y = 0.5 + (y - 0.5)*0.25;
per_frame_init_1=x1 = 0;
per_frame_init_2=y1= .001;
per_frame_init_3=z1 = 0;
per_frame_1=zoom = 1;
per_frame_2=warp = 0;
per_frame_3=wave_a = 0;
per_frame_4=
per_frame_5=
per_frame_6=// below parameters belong to an extended "Lotka-Volterra" model (simple predator-prey differential equation system - see wikipedia)
per_frame_7=
per_frame_8=startx = 0.7; // initial predator population (used only for the phase plot)
per_frame_9=starty = 0.7; // initial prey population
per_frame_10=
per_frame_11=a = 1.0; // LV-model parameters - some pairs reach a so-called limit-cycle
per_frame_12=b = 0.14;
per_frame_13=d = 0.2;
per_frame_14=
per_frame_15=q1 = aspectx;
per_frame_16=q2 = aspecty;
per_frame_17=
per_frame_18=q3 = startx;
per_frame_19=q4 = starty;
per_frame_20=
per_frame_21=q5 = a; // the model parameters are synchronized for the phase plot wave and the per-vertex warp
per_frame_22=q6 = b;
per_frame_23=q7 = d;
per_frame_24=
per_frame_25=
per_frame_26=vol = bass*8 + mid*5 + treb*3;
per_frame_27=m = m*0.97 + vol*0.08;
per_frame_28=monitor = vol;
per_frame_29=beat = above(vol,res)*above(vol,m)*above(vol,16);
per_frame_30=diff = (1-beat)*diff + beat*(vol-res);
per_frame_31=res = beat*(vol + m*0.04) + (1-beat)*(res -  (0.1+diff*0.02)*60/fps);
per_frame_32=res = max(0,res);
per_frame_33=
per_frame_34=w = if(beat,rand(3.14*2),w);
per_frame_35=x = if(beat,rand(1),x);
per_frame_36=y = if(beat,rand(1),y);
per_frame_37=
per_frame_38=// below parameters belong to a synchronized affine transformation for waves and the per-vertex code (rotate, scale, translate)
per_frame_39=
per_frame_40=//w = time*0.1;
per_frame_41=q26 = x*0.5; // center for rotation and scaling (x)
per_frame_42=q27 = y*0.5; // center for rotation and scaling (y)
per_frame_43=q28 = 1; // scale
per_frame_44=q29 = 0; // translate x
per_frame_45=q30 = 0; // translate y
per_frame_46=q31 = sin(w);
per_frame_47=q32 = cos(w);
per_frame_48=q25 = w;
per_frame_49=// TODO: compensate parameter changes for an invariant canvas pane via difference quotients ;)
per_pixel_1=x = 0.5 + (x-0.5)*q1;
per_pixel_2=y = 0.5 - (y-0.5)*q2;
per_pixel_3=
per_pixel_4=x = q26 + (x-q26)/q28 - q29;
per_pixel_5=y = q27 + (y-q27)/q28 - q30;
per_pixel_6=
per_pixel_7=// have a nice warp effect? - rotate it like a shape!
per_pixel_8=
per_pixel_9=  angle = q25;
per_pixel_10=
per_pixel_11=/////////////////////////////////////////////////////////
per_pixel_12=X1 = x - q26;
per_pixel_13=Y1 = y - q27;
per_pixel_14=x = q26 + cos(-angle)*X1 -sin(-angle)*Y1; // rotate the x/y pane
per_pixel_15=y = q27 + sin(-angle)*X1 +cos(-angle)*Y1;
per_pixel_16=/////////////////////////////////////////////////////////
per_pixel_17=
per_pixel_18=
per_pixel_19=dx = x*(1-x)-q5*x*y/(x+q6);
per_pixel_20=dy = -q7*y*(1-y/x);
per_pixel_21=
per_pixel_22=dx = -0.01*dx/q1;
per_pixel_23=dy = -0.01*dy/q2;
per_pixel_24=
per_pixel_25=
per_pixel_26=//dx = 0;
per_pixel_27=//dy = 0;
per_pixel_28=
per_pixel_29=/////////////////////////////////////////////////////////
per_pixel_30=dx1 = cos(angle)*dx - sin(angle)*dy; // and finally the dx/dy pane is rotated to match the x/y pane
per_pixel_31=dy1 = sin(angle)*dx + cos(angle)*dy;
per_pixel_32=dx = dx1*aspectx;
per_pixel_33=dy = dy1*aspecty;
per_pixel_34=/////////////////////////////////////////////////////////
warp_1=`shader_body
warp_2=`{
warp_3=`//uv = uv_orig;
warp_4=`ret.z = GetPixel(uv).z*0.5;
warp_5=`
warp_6=`   float pixelDistance   = 4;
warp_7=`   float motionStrength  = 4;
warp_8=`
warp_9=`   float diffusionFactor = 1;  
warp_10=`   float decay           = -0.014;
warp_11=`
warp_12=`   float2 uv_y = lerp(uv_orig,uv,0);
warp_13=`   float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw*diffusionFactor;
warp_14=`
warp_15=`   float2 d = texsize.zw*pixelDistance;
warp_16=`   float1 dx = ( 2*GetBlur1(uv_y + float2(1,0)*d) - 2*GetBlur1(uv_y-float2(1,0)*d) ).y*0.5;
warp_17=`   float1 dy = ( 2*GetBlur1(uv_y + float2(0,1)*d) - 2*GetBlur1(uv_y-float2(0,1)*d) ).y*0.5;
warp_18=`
warp_19=`   float2 my_uv = uv_y + float2(dx,dy)*texsize.zw*motionStrength;
warp_20=`
warp_21=`   ret.y = tex2D( sampler_fw_main, saturate(my_uv)).y;
warp_22=`
warp_23=`   ret.y += (ret - GetBlur1(uv_y)).y*0.025 + decay;
warp_24=`
warp_25=`
warp_26=`   ret.y += (tex2D(sampler_noise_lq, dither_uv).y-0.5)*0.02;
warp_27=`
warp_28=`   dx = ( 2*GetBlur1(uv_y + float2(1,0)*d) - 2*GetBlur1(uv_y-float2(1,0)*d) ).x*0.5;
warp_29=`   dy = ( 2*GetBlur1(uv_y + float2(0,1)*d) - 2*GetBlur1(uv_y-float2(0,1)*d) ).x*0.5;
warp_30=`
warp_31=`   my_uv = uv - float2(dx,dy)*texsize.zw*motionStrength;
warp_32=`
warp_33=`ret.x = GetPixel(my_uv).x - ret.y*0.01 + 0.004;    
warp_34=`ret.x += (tex2D(sampler_noise_lq, dither_uv).x-0.5)*0.01 + ret.z*0.14;
warp_35=`}
comp_1=`#define sat saturate
comp_2=`static const float2 pix = texsize.zw;
comp_3=`float glow, tmp, lamp, dist, bdist, b2dist, dist_c;
comp_4=`float2 dz, uv1, uv3;
comp_5=`static const float3 CamPos = float3(q4,q5,q6);
comp_6=`static const float myzoom = q7;
comp_7=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
comp_8=`static const float3 col_struc =  float3(1,.7,.3) + .2*(rand_preset.xyz-.5);
comp_9=`static float2 center = float2 (q1,q2);
comp_10=`
comp_11=`float3 GetBlurX (float2 uvi, float x) {return lerp (GetPixel(uvi), GetBlur1(uvi), x);}
comp_12=`float GetDist(float2 uvi)   {return 1-GetPixel(uvi).b;}
comp_13=`float GetDistB(float2 uvi)  {return 1-GetBlur1(uvi).b;}
comp_14=`float GetDistB2(float2 uvi) {return 1-GetBlur2(uvi).b;}
comp_15=`
comp_16=`float MinDistB (float2 uvi) {float tmp; float4 nb; //##nicht ideal
comp_17=`  tmp = GetDist(uvi);
comp_18=`  tmp = min(tmp,GetDistB2(uvi)*1) ;
comp_19=`  return tmp;}
comp_20=`
comp_21=`sampler sampler_pw_noise_lq;
comp_22=`
comp_23=`float3 neu, ret1;
comp_24=`float2 rs2,rs0,rss,uv2;
comp_25=`float ang2,c,s;
comp_26=`float2x2 rota = float2x2(.7,.7,-.7,.7);
comp_27=`shader_body
comp_28=`{
comp_29=`float2 uvo = 0.5 + (uv-0.5)*float2(1.1,0.81);
comp_30=`float2 factorA = uv-float2(1-0.5,0.5);
comp_31=`
comp_32=`uv -= 0.5;
comp_33=`uv *= aspect.xy;    
comp_34=`
comp_35=`rs0.x = atan2(uv.y, uv.x)/3.1416*2;
comp_36=`rs0.y = .02/(length (uv));
comp_37=`rss = float2 (rs0.x,rs0.y+time);
comp_38=`rss = mul(rss,float2x2(.7,.7,-.7,.7));
comp_39=`float noise = (tex2D(sampler_pw_noise_lq,rss/32)-.7 >= 0);
comp_40=`rss = abs(frac(rss*8)-.5);
comp_41=`float3 dots = saturate(.04/length(rss)) *noise;
comp_42=`
comp_43=`rss = float2 (rs0.x*2,rs0.y+time/2);
comp_44=`rss = mul(rss,float2x2(.7,.7,-.7,.7));
comp_45=`noise = (tex2D(sampler_pw_noise_lq,rss/32)-.7 >= 0);
comp_46=`rss = abs(frac(rss*8)-.5);
comp_47=`dots += saturate(.04/length(rss)) * noise;
comp_48=`
comp_49=`dots *= saturate(.04/abs(.01/rs0.y-q6*0))+.0;
comp_50=`dots *= dots*2;
comp_51=`
comp_52=`float3 ret1 = 0;
comp_53=`int anz = 2;
comp_54=`int n = 0;
comp_55=`while (n <= anz) {
comp_56=`    ang2 = 6.28*n/anz;
comp_57=`    c = cos(ang2);
comp_58=`    s = sin(ang2);
comp_59=`    uv2.x =  uv.x*c - uv.y*s;
comp_60=`    uv2.y =  uv.x*s + uv.y*c;
comp_61=`
comp_62=`    neu = GetPixel(uv2+.5) + GetBlur1(uv2+.5);
comp_63=`    ret1 = max(ret1,neu);
comp_64=`n++;
comp_65=`}
comp_66=`ret = ret1 + dots*(1+ret1);
comp_67=`
comp_68=`float2 factorB = float2(0,-1024+(treb_att-bass_att)*32);
comp_69=`float2 product = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
comp_70=`float2 numerator = float2(1,0);
comp_71=`float2 denominator = product;
comp_72=`float2 fraction = float2( numerator.x*denominator.x + numerator.y*denominator.y,   // the fractions real part
comp_73=`                   numerator.y*denominator.x - numerator.x*denominator.y)/  // the fractions imaginary part
comp_74=`                   (denominator.x*denominator.x + denominator.y*denominator.y);
comp_75=`uv = fraction.yx*float2(-1,1)*100;
comp_76=`uv = lerp(0.5 + (uvo-0.5)*2,uv+0.5,0.5);
comp_77=`uv = 0.5 + (1.0 - abs( frac( uv * 0.5 ) * 2 - 1.0 )-0.5)*0.98; // Eo.S. mirror code with cutted borders
comp_78=`uv = (uv-.5)*.9 + .5;
comp_79=`
comp_80=`uv1 = (uv-center)*aspect.xy;
comp_81=`
comp_82=`dist = MinDistB(uv);
comp_83=`bdist = lerp(dist,GetDistB(uv),.2);
comp_84=`dist_c = clamp(GetDistB2 (center),.1,.4); //center distance
comp_85=`
comp_86=`float3 uv2 = mul(float3((uv-.5)*MinDistB(uv),MinDistB(uv))/myzoom,RotMat)+CamPos;
comp_87=`glow = pow (sat(tex2D (sampler_noise_hq,.02*uv2).r-.6)*2,2);
comp_88=`//uv += .003*glow*(tex2D (sampler_noise_mq,uv*2+float2(0,time/4).xy-.5));
comp_89=`
comp_90=`float focus = sat(abs(GetDistB2(uv)-dist_c)*1+.2);
comp_91=`float struc = GetBlurX(uv,focus).r;
comp_92=`
comp_93=`glow = sat(1-exp(-(GetBlur1(uv).r))-.2);
comp_94=`q18 = 1;
comp_95=`ret = pow(struc,1) * (.2+(1-focus) *lerp(dist,1-dist,q18)) * (1+.5*sin(uv2));
comp_96=`ret = lerp(ret, float3(0,1,glow*3), glow);
comp_97=`
comp_98=`//distant light
comp_99=`//ret += pow(1-GetBlurX(uv,.8).b,3)*(.5+.5*slow_roam_cos) *q19;
comp_100=`
comp_101=`//Lamp
comp_102=`uv3 = uv1; 
comp_103=`lamp = saturate(1-4*length(uv3))*(struc)*saturate(1-2*bdist)*1.8;
comp_104=`ret += (1-lum(ret))*lamp;
comp_105=`ret = 1-exp((-2)*ret);
comp_106=`//ret = GetPixel(uv).r;
comp_107=`
comp_108=`// laser
comp_109=`
comp_110=`ret = ret + dots*(1+ret);
comp_111=`}
comp_112=`
comp_113=`//-------------------------------------------
comp_114=`//Written by martin
comp_115=`
