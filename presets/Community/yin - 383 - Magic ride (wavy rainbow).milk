[preset00]
fRating=3.000000
fGammaAdj=1.000000
fDecay=0.898999
fVideoEchoZoom=0.999993
fVideoEchoAlpha=0.000000
nVideoEchoOrientation=0
nWaveMode=0
bAdditiveWaves=0
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=0
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.001000
fWaveScale=0.411715
fWaveSmoothing=0.900000
fWaveParam=-0.180000
fModWaveAlphaStart=0.750000
fModWaveAlphaEnd=0.950000
fWarpAnimSpeed=1.000000
fWarpScale=1.000000
fZoomExponent=1.000000
fShader=0.000000
zoom=0.999999
rot=0.000000
cx=0.500000
cy=0.500000
dx=0.000000
dy=0.000000
warp=0.010000
sx=1.000000
sy=1.000000
wave_r=0.000000
wave_g=0.000000
wave_b=0.000000
wave_x=0.500000
wave_y=0.500000
ob_size=0.005000
ob_r=0.000000
ob_g=0.000000
ob_b=0.000000
ob_a=0.920000
ib_size=0.000000
ib_r=0.000000
ib_g=0.000000
ib_b=0.000000
ib_a=0.000000
nMotionVectorsX=12.000000
nMotionVectorsY=9.000000
mv_dx=0.000000
mv_dy=0.000000
mv_l=0.900000
mv_r=1.000000
mv_g=1.000000
mv_b=1.000000
mv_a=0.000000
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=1.491583
wavecode_0_smoothing=0.000000
wavecode_0_r=1.000000
wavecode_0_g=1.000000
wavecode_0_b=1.000000
wavecode_0_a=1.000000
wave_0_per_frame1=speed=.015;
wave_0_per_frame2=length=.025;
wave_0_per_frame3=crosssectionrad=.08;
wave_0_per_frame4=
wave_0_per_frame5=// t1 is the value of the parameter for the first point to be plotted. In the expression below it ranges from 0 to 1. Later on it is multiplied by 2pi
wave_0_per_frame6=t1= speed*time-int(speed*time);
wave_0_per_frame7=
wave_0_per_frame8=// these are quite obvious...
wave_0_per_frame9=t2= length;
wave_0_per_frame10=t3= crosssectionrad;
wave_0_per_frame11=
wave_0_per_frame12=// In (t6,t7,t8) i calculate the (x,y,z) position of the first point of the path to be plotted in this frame. I need its position to apply the camera in the 'per-point' code so I have to pass them on...
wave_0_per_frame13=t=t1*6.2831;
wave_0_per_frame14=t6=cos(t)*sin(.43+2*t+3.1415*sin(2.98+2*t));
wave_0_per_frame15=t7=cos(1.9+.7*t)*sin(t);
wave_0_per_frame16=t8=cos(1.54+2*t)*sin(2*t+3.1415*cos(1.01+2*t));
wave_0_per_frame17=
wave_0_per_frame18=// Now i have to calculate the orientation of the camera. I do that by finding the first normal/second normal/and tangent vector at point(t6,t7,t8) and apply that orientation to the camera.
wave_0_per_frame19=
wave_0_per_frame20=// (q1,q2,q3) is the first derivative at point(t6,t7,t8). I also calculate its magnitude (its inverse actually to save some divisions) in invFDmag
wave_0_per_frame21=q1=2*cos(t)*(1+3.1415*cos(2.98+2*t))*cos(.43+2*t+3.1415*sin(2.98+2*t))-sin(t)*sin(.43+2*t+3.1415*sin(2.98+2*t));
wave_0_per_frame22=q2=cos(1.9+.7*t)*cos(t)-.7*sin(1.9+.7*t)*sin(t);
wave_0_per_frame23=q3=cos(1.54+2*t)*cos(2*t+3.1415*cos(1.01+2*t))*(2-6.2831*sin(1.01+2*t))-2*sin(1.54+2*t)*sin(2*t+3.1415*cos(1.01+2*t));
wave_0_per_frame24=invFDmag=1/sqrt( q1*q1 + q2*q2 + q3*q3 );
wave_0_per_frame25=
wave_0_per_frame26=// (sdX,sdY,sdZ) is the vector of the second derivative at point(t6,t7,t8). I need it to calculate the first and second normal
wave_0_per_frame27=sdX=-4*cos(.43+2*t+3.1415*sin(2.98+2*t))*(sin(t)+3.1415*sin(2.98+3*t))-cos(t)*(5+25.132*cos(2.98+2*t)+39.4761*sqr(cos(2.98+2*t)))*sin( .43+2*t+3.1415*sin(2.98+2*t));
wave_0_per_frame28=sdY=-1.4*cos(t)*sin(1.9+.7*t)-1.49*cos(1.9+.7*t)*sin(t);
wave_0_per_frame29=sdZ=-12.566*cos(1.01+2*t)*cos(1.54+2*t)*cos(2*t+3.1415*cos(1.01+2*t))+8*cos(2*t+3.1415*cos(1.01+2*t))*(-1+3.1415*sin(1.01+2*t))*sin(1.54+2*t) - 4*cos(1.54+2*t)*(2-6.2831*sin(1.01+2*t)+9.869*sqr(sin(1.01+2*t)))*sin(2*t+3.1415*cos(1.01+2*t));
wave_0_per_frame30=
wave_0_per_frame31=// (q4,q5,q6) is the second normal. It is the normalized cross product of (first derivate)x(second derivative)
wave_0_per_frame32=q4=q2*sdZ-sdY*q3;
wave_0_per_frame33=q5=q3*sdX-q1*sdZ;
wave_0_per_frame34=q6=q1*sdY-q2*sdX;
wave_0_per_frame35=invSNmag=1/sqrt( q4*q4+q5*q5+q6*q6 );
wave_0_per_frame36=q4=q4*invSNmag;
wave_0_per_frame37=q5=q5*invSNmag;
wave_0_per_frame38=q6=q6*invSNmag;
wave_0_per_frame39=
wave_0_per_frame40=// Now I can normalize the first derivate vector. This turns it into the tangent vector at point(t6,t7,t8)
wave_0_per_frame41=q1=q1*invFDmag;
wave_0_per_frame42=q2=q2*invFDmag;
wave_0_per_frame43=q3=q3*invFDmag;
wave_0_per_frame44=
wave_0_per_frame45=// We still need the first normal. It is the cross product of (second normal)x(tangent). Since I don't have any 'q' variables left, i only calculate the first two components. The third is the 'qq9' variable in the 'per-point' section. (I just noticed that 't4' and 't5' were free, but since it's like that in all other presets i'm not changing it.)
wave_0_per_frame46=q7=q5*q3-q2*q6;
wave_0_per_frame47=q8=q6*q1-q4*q3;
wave_0_per_point1=// I want to plot the segment of the path for 't' ranging from (t1) to (t1+t2). In some presets i use the square root of 'sample' instead. Since square root biases values towards zero, this effectively makes the spiral closer to camera more dense, thus giving more detailed waveforms.
wave_0_per_point2=t=(t1+(0+sample)*t2);
wave_0_per_point3=t=if(above(t,1),t-1,t);
wave_0_per_point4=t=t*6.2831;
wave_0_per_point5=
wave_0_per_point6=// These are the coordinates of the point of the path to be plotted.
wave_0_per_point7=mx=cos(t)*sin(.43+2*t+3.1415*sin(2.98+2*t));
wave_0_per_point8=my=cos(1.9+.7*t)*sin(t);
wave_0_per_point9=mz=cos(1.54+2*t)*sin(2*t+3.1415*cos(1.01+2*t));
wave_0_per_point10=
wave_0_per_point11=// I have to calculate the first normal/second/tangent for this point too... The procedure was described in detail in the 'per-frame' section
wave_0_per_point12=fdX=2*cos(t)*(1+3.1415*cos(2.98+2*t))*cos(.43+2*t+3.1415*sin(2.98+2*t))-sin(t)*sin(.43+2*t+3.1415*sin(2.98+2*t));
wave_0_per_point13=fdY=cos(1.9+.7*t)*cos(t)-.7*sin(1.9+.7*t)*sin(t);
wave_0_per_point14=fdZ=cos(1.54+2*t)*cos(2*t+3.1415*cos(1.01+2*t))*(2-6.2831*sin(1.01+2*t))-2*sin(1.54+2*t)*sin(2*t+3.1415*cos(1.01+2*t));
wave_0_per_point15=invFDmag=1/sqrt( fdX*fdX + fdY*fdY + fdZ*fdZ );
wave_0_per_point16=
wave_0_per_point17=sdX=-4*cos(.43+2*t+3.1415*sin(2.98+2*t))*(sin(t)+3.1415*sin(2.98+3*t))-cos(t)*(5+25.132*cos(2.98+2*t)+39.4761*sqr(cos(2.98+2*t)))*sin( .43+2*t+3.1415*sin(2.98+2*t));
wave_0_per_point18=sdY=-1.4*cos(t)*sin(1.9+.7*t)-1.49*cos(1.9+.7*t)*sin(t);
wave_0_per_point19=sdZ=-12.566*cos(1.01+2*t)*cos(1.54+2*t)*cos(2*t+3.1415*cos(1.01+2*t))+8*cos(2*t+3.1415*cos(1.01+2*t))*(-1+3.1415*sin(1.01+2*t))*sin(1.54+2*t) - 4*cos(1.54+2*t)*(2-6.2831*sin(1.01+2*t)+9.869*sqr(sin(1.01+2*t)))*sin(2*t+3.1415*cos(1.01+2*t));
wave_0_per_point20=
wave_0_per_point21=snX=fdY*sdZ-sdY*fdZ;
wave_0_per_point22=snY=fdZ*sdX-fdX*sdZ;
wave_0_per_point23=snZ=fdX*sdY-fdY*sdX;
wave_0_per_point24=invSNmag=1/sqrt( snX*snX+snY*snY+snZ*snZ );
wave_0_per_point25=snX=snX*invSNmag;
wave_0_per_point26=snY=snY*invSNmag;
wave_0_per_point27=snZ=snZ*invSNmag;
wave_0_per_point28=
wave_0_per_point29=fdX=fdX*invFDmag;
wave_0_per_point30=fdY=fdY*invFDmag;
wave_0_per_point31=fdZ=fdZ*invFDmag;
wave_0_per_point32=
wave_0_per_point33=fnX=snY*fdZ-fdY*snZ;
wave_0_per_point34=fnY=snZ*fdX-snX*fdZ;
wave_0_per_point35=fnZ=snX*fdY-snY*fdX;
wave_0_per_point36=
wave_0_per_point37=// Now that I've calculated the vectors, I'll use the first and second normal to 'extrude' the path along an increasing angle on their plane. Since the plane of the first and second normal is always tangent to the curve, this creates the spiral tunnel along the path.
wave_0_per_point38=
wave_0_per_point39=// The variable 'angl' as it's name implies controls the angle I was just talking about. It should be increasing with 't' if you want the spiral effect. Since t ranges from 0 to 1, the following value results to 30 full circles.
wave_0_per_point40=angl=t*30*6.2831; //188.493;
wave_0_per_point41=
wave_0_per_point42=// 'c' is an overall coefficient for tweaking the radius of the spiral. I am decreasing it based on the sample position. I also want to give it a 'spectrum' kinda look so i'm multiplying it by actual sample values.
wave_0_per_point43=c=sqrt(1-.5*sample)*(1+.5*(value1+value2));
wave_0_per_point44=
wave_0_per_point45=// If (m) is the vector to point on the path, the equations below are no more than the vector equation: (m)=(m)+t3*c*( (sn)*cos(angl) + (fn)*sin(angl) ). This creates the spiral.
wave_0_per_point46=mx=mx+t3*c*(snX*cos(angl)+fnX*sin(angl));
wave_0_per_point47=my=my+t3*c*(snY*cos(angl)+fnY*sin(angl));
wave_0_per_point48=mz=mz+t3*c*(snZ*cos(angl)+fnZ*sin(angl));
wave_0_per_point49=
wave_0_per_point50=// Now I'm applying the camera to the final coordinates of that point. The 'q' and 't6,7,8' variables were set in the per frame code. I also have to calculate the z-component of the camera's X-axis (qq9) since I thought I was out of variables
wave_0_per_point51=qq9=q4*q2-q5*q1;
wave_0_per_point52=vx=(q7*mx+q8*my+qq9*mz-(t6*q7+t7*q8+t8*qq9));
wave_0_per_point53=vy=(q4*mx+q5*my+q6*mz-(t6*q4+t7*q5+t8*q6));
wave_0_per_point54=vw=q1*mx+q2*my+q3*mz-(t6*q1+t7*q2+t8*q3);
wave_0_per_point55=
wave_0_per_point56=// I'm applying perspective and a scale factor of .15 to the transformed coordinates
wave_0_per_point57=ox=(vx/vw)*.15;
wave_0_per_point58=oy=(vy/vw)*.15;
wave_0_per_point59=
wave_0_per_point60=// The bad thing about the projection i used is that now the path looks like all its corners are right. Since I can't change that, I'm applying an extra 90 degress camera roll to (at least) make them look like vertical loops, which is less boring!!! I also scale the monitor's y-axis by 1.25 to compensate for the distortion caused by non-square resolution and pixels.
wave_0_per_point61=x=.5-oy;
wave_0_per_point62=y=.5+ox*1.25;
wave_0_per_point63=
wave_0_per_point64=// I'm using the W- component of the vertex to determine if the vertex is visible and (if visible) an alpha value based on it.
wave_0_per_point65=a=above(vw,.02)*pow(.6667*(1-min(vw,1)),2);
wave_0_per_point66=
wave_0_per_point67=// hue2rgb algorithm. In this preset I used the angle of the point in the spiral from its axis. 
wave_0_per_point68=// The '4' below means colours are repeat 4 times per circle
wave_0_per_point69=hue=4*(angl+3*time)/6.2831;
wave_0_per_point70=h=6*(hue-int(hue));
wave_0_per_point71=sw1=below(h,1); sw2=(1-sw1)*below(h,2); sw3=(1-sw1)*(1-sw2)*below(h,3); sw4=(1-sw1)*(1-sw2)*(1-sw3)*below(h,4);
wave_0_per_point72=sw6=above(h,5); sw5=(1-sw1)*(1-sw2)*(1-sw3)*(1-sw4)*(1-sw6);
wave_0_per_point73=r=sw1+sw2*(2-h)+sw5*(h-4)+sw6;
wave_0_per_point74=g=sw1*h+sw2+sw3+sw4*(4-h);
wave_0_per_point75=b=sw3*(h-2)+sw4+sw5+sw6*(6-h);
wavecode_1_enabled=1
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=1
wavecode_1_scaling=1.491582
wavecode_1_smoothing=0.000000
wavecode_1_r=1.000000
wavecode_1_g=1.000000
wavecode_1_b=1.000000
wavecode_1_a=1.000000
wave_1_per_frame1=speed=.015;
wave_1_per_frame2=length=.025;
wave_1_per_frame3=crosssectionrad=.08;
wave_1_per_frame4=
wave_1_per_frame5=t1= speed*time-int(speed*time);
wave_1_per_frame6=t2= length;
wave_1_per_frame7=t3= crosssectionrad;
wave_1_per_frame8=
wave_1_per_frame9=t=t1*6.2831;
wave_1_per_frame10=t6=cos(t)*sin(.43+2*t+3.1415*sin(2.98+2*t));
wave_1_per_frame11=t7=cos(1.9+.7*t)*sin(t);
wave_1_per_frame12=t8=cos(1.54+2*t)*sin(2*t+3.1415*cos(1.01+2*t));
wave_1_per_frame13=
wave_1_per_frame14=q1=2*cos(t)*(1+3.1415*cos(2.98+2*t))*cos(.43+2*t+3.1415*sin(2.98+2*t))-sin(t)*sin(.43+2*t+3.1415*sin(2.98+2*t));
wave_1_per_frame15=q2=cos(1.9+.7*t)*cos(t)-.7*sin(1.9+.7*t)*sin(t);
wave_1_per_frame16=q3=cos(1.54+2*t)*cos(2*t+3.1415*cos(1.01+2*t))*(2-6.2831*sin(1.01+2*t))-2*sin(1.54+2*t)*sin(2*t+3.1415*cos(1.01+2*t));
wave_1_per_frame17=invFDmag=1/sqrt( q1*q1 + q2*q2 + q3*q3 );
wave_1_per_frame18=
wave_1_per_frame19=sdX=-4*cos(.43+2*t+3.1415*sin(2.98+2*t))*(sin(t)+3.1415*sin(2.98+3*t))-cos(t)*(5+25.132*cos(2.98+2*t)+39.4761*sqr(cos(2.98+2*t)))*sin( .43+2*t+3.1415*sin(2.98+2*t));
wave_1_per_frame20=sdY=-1.4*cos(t)*sin(1.9+.7*t)-1.49*cos(1.9+.7*t)*sin(t);
wave_1_per_frame21=sdZ=-12.566*cos(1.01+2*t)*cos(1.54+2*t)*cos(2*t+3.1415*cos(1.01+2*t))+8*cos(2*t+3.1415*cos(1.01+2*t))*(-1+3.1415*sin(1.01+2*t))*sin(1.54+2*t) - 4*cos(1.54+2*t)*(2-6.2831*sin(1.01+2*t)+9.869*sqr(sin(1.01+2*t)))*sin(2*t+3.1415*cos(1.01+2*t));
wave_1_per_frame22=
wave_1_per_frame23=q4=q2*sdZ-sdY*q3;
wave_1_per_frame24=q5=q3*sdX-q1*sdZ;
wave_1_per_frame25=q6=q1*sdY-q2*sdX;
wave_1_per_frame26=invSNmag=1/sqrt( q4*q4+q5*q5+q6*q6 );
wave_1_per_frame27=q4=q4*invSNmag;
wave_1_per_frame28=q5=q5*invSNmag;
wave_1_per_frame29=q6=q6*invSNmag;
wave_1_per_frame30=
wave_1_per_frame31=q1=q1*invFDmag;
wave_1_per_frame32=q2=q2*invFDmag;
wave_1_per_frame33=q3=q3*invFDmag;
wave_1_per_frame34=
wave_1_per_frame35=q7=q5*q3-q2*q6;
wave_1_per_frame36=q8=q6*q1-q4*q3;
wave_1_per_frame37=
wave_1_per_point1=t=(t1+(1+sample)*t2);
wave_1_per_point2=t=if(above(t,1),t-1,t);
wave_1_per_point3=t=t*6.2831;
wave_1_per_point4=
wave_1_per_point5=mx=cos(t)*sin(.43+2*t+3.1415*sin(2.98+2*t));
wave_1_per_point6=my=cos(1.9+.7*t)*sin(t);
wave_1_per_point7=mz=cos(1.54+2*t)*sin(2*t+3.1415*cos(1.01+2*t));
wave_1_per_point8=
wave_1_per_point9=fdX=2*cos(t)*(1+3.1415*cos(2.98+2*t))*cos(.43+2*t+3.1415*sin(2.98+2*t))-sin(t)*sin(.43+2*t+3.1415*sin(2.98+2*t));
wave_1_per_point10=fdY=cos(1.9+.7*t)*cos(t)-.7*sin(1.9+.7*t)*sin(t);
wave_1_per_point11=fdZ=cos(1.54+2*t)*cos(2*t+3.1415*cos(1.01+2*t))*(2-6.2831*sin(1.01+2*t))-2*sin(1.54+2*t)*sin(2*t+3.1415*cos(1.01+2*t));
wave_1_per_point12=invFDmag=1/sqrt( fdX*fdX + fdY*fdY + fdZ*fdZ );
wave_1_per_point13=
wave_1_per_point14=sdX=-4*cos(.43+2*t+3.1415*sin(2.98+2*t))*(sin(t)+3.1415*sin(2.98+3*t))-cos(t)*(5+25.132*cos(2.98+2*t)+39.4761*sqr(cos(2.98+2*t)))*sin( .43+2*t+3.1415*sin(2.98+2*t));
wave_1_per_point15=sdY=-1.4*cos(t)*sin(1.9+.7*t)-1.49*cos(1.9+.7*t)*sin(t);
wave_1_per_point16=sdZ=-12.566*cos(1.01+2*t)*cos(1.54+2*t)*cos(2*t+3.1415*cos(1.01+2*t))+8*cos(2*t+3.1415*cos(1.01+2*t))*(-1+3.1415*sin(1.01+2*t))*sin(1.54+2*t) - 4*cos(1.54+2*t)*(2-6.2831*sin(1.01+2*t)+9.869*sqr(sin(1.01+2*t)))*sin(2*t+3.1415*cos(1.01+2*t));
wave_1_per_point17=
wave_1_per_point18=snX=fdY*sdZ-sdY*fdZ;
wave_1_per_point19=snY=fdZ*sdX-fdX*sdZ;
wave_1_per_point20=snZ=fdX*sdY-fdY*sdX;
wave_1_per_point21=invSNmag=1/sqrt( snX*snX+snY*snY+snZ*snZ );
wave_1_per_point22=snX=snX*invSNmag;
wave_1_per_point23=snY=snY*invSNmag;
wave_1_per_point24=snZ=snZ*invSNmag;
wave_1_per_point25=
wave_1_per_point26=fdX=fdX*invFDmag;
wave_1_per_point27=fdY=fdY*invFDmag;
wave_1_per_point28=fdZ=fdZ*invFDmag;
wave_1_per_point29=
wave_1_per_point30=fnX=snY*fdZ-fdY*snZ;
wave_1_per_point31=fnY=snZ*fdX-snX*fdZ;
wave_1_per_point32=fnZ=snX*fdY-snY*fdX;
wave_1_per_point33=
wave_1_per_point34=angl=t*188.493;
wave_1_per_point35=c=sqrt(.5*(1-sample))*(1+.5*(value1+value2));
wave_1_per_point36=mx=mx+t3*c*(snX*cos(angl)+fnX*sin(angl));
wave_1_per_point37=my=my+t3*c*(snY*cos(angl)+fnY*sin(angl));
wave_1_per_point38=mz=mz+t3*c*(snZ*cos(angl)+fnZ*sin(angl));
wave_1_per_point39=
wave_1_per_point40=qq9=q4*q2-q5*q1;
wave_1_per_point41=vx=(q7*mx+q8*my+qq9*mz-(t6*q7+t7*q8+t8*qq9));
wave_1_per_point42=vy=(q4*mx+q5*my+q6*mz-(t6*q4+t7*q5+t8*q6));
wave_1_per_point43=vw=q1*mx+q2*my+q3*mz-(t6*q1+t7*q2+t8*q3);
wave_1_per_point44=
wave_1_per_point45=ox=(vx/vw)*.15;
wave_1_per_point46=oy=(vy/vw)*.15;
wave_1_per_point47=x=.5-oy;
wave_1_per_point48=y=.5+ox*1.25;
wave_1_per_point49=a=above(vw,.02)*pow(.6667*(1-min(vw,1)),2);
wave_1_per_point50=
wave_1_per_point51=hue=.6366*(angl+3*time);
wave_1_per_point52=h=6*(hue-int(hue));
wave_1_per_point53=sw1=below(h,1); sw2=(1-sw1)*below(h,2); sw3=(1-sw1)*(1-sw2)*below(h,3); sw4=(1-sw1)*(1-sw2)*(1-sw3)*below(h,4);
wave_1_per_point54=sw6=above(h,5); sw5=(1-sw1)*(1-sw2)*(1-sw3)*(1-sw4)*(1-sw6);
wave_1_per_point55=r=sw1+sw2*(2-h)+sw5*(h-4)+sw6;
wave_1_per_point56=g=sw1*h+sw2+sw3+sw4*(4-h);
wave_1_per_point57=b=sw3*(h-2)+sw4+sw5+sw6*(6-h);
wavecode_2_enabled=1
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=1
wavecode_2_scaling=0.999998
wavecode_2_smoothing=0.000000
wavecode_2_r=1.000000
wavecode_2_g=1.000000
wavecode_2_b=1.000000
wavecode_2_a=1.000000
wave_2_per_frame1=speed=.015;
wave_2_per_frame2=
wave_2_per_frame3=t= 6.2831*(speed*time-int(speed*time));
wave_2_per_frame4=
wave_2_per_frame5=t1=2*cos(t)*(1+3.1415*cos(2.98+2*t))*cos(.43+2*t+3.1415*sin(2.98+2*t))-sin(t)*sin(.43+2*t+3.1415*sin(2.98+2*t));
wave_2_per_frame6=t2=cos(1.9+.7*t)*cos(t)-.7*sin(1.9+.7*t)*sin(t);
wave_2_per_frame7=t3=cos(1.54+2*t)*cos(2*t+3.1415*cos(1.01+2*t))*(2-6.2831*sin(1.01+2*t))-2*sin(1.54+2*t)*sin(2*t+3.1415*cos(1.01+2*t));
wave_2_per_frame8=invFDmag=1/sqrt( t1*t1 + t2*t2 + t3*t3 );
wave_2_per_frame9=
wave_2_per_frame10=sdX=-4*cos(.43+2*t+3.1415*sin(2.98+2*t))*(sin(t)+3.1415*sin(2.98+3*t))-cos(t)*(5+25.132*cos(2.98+2*t)+39.4761*sqr(cos(2.98+2*t)))*sin( .43+2*t+3.1415*sin(2.98+2*t));
wave_2_per_frame11=sdY=-1.4*cos(t)*sin(1.9+.7*t)-1.49*cos(1.9+.7*t)*sin(t);
wave_2_per_frame12=sdZ=-12.566*cos(1.01+2*t)*cos(1.54+2*t)*cos(2*t+3.1415*cos(1.01+2*t))+8*cos(2*t+3.1415*cos(1.01+2*t))*(-1+3.1415*sin(1.01+2*t))*sin(1.54+2*t) - 4*cos(1.54+2*t)*(2-6.2831*sin(1.01+2*t)+9.869*sqr(sin(1.01+2*t)))*sin(2*t+3.1415*cos(1.01+2*t));
wave_2_per_frame13=
wave_2_per_frame14=t4=t2*sdZ-sdY*t3;
wave_2_per_frame15=t5=t3*sdX-t1*sdZ;
wave_2_per_frame16=t6=t1*sdY-t2*sdX;
wave_2_per_frame17=invSNmag=1/sqrt( t4*t4+t5*t5+t6*t6 );
wave_2_per_frame18=t4=t4*invSNmag;
wave_2_per_frame19=t5=t5*invSNmag;
wave_2_per_frame20=t6=t6*invSNmag;
wave_2_per_frame21=
wave_2_per_frame22=t1=t1*invFDmag;
wave_2_per_frame23=t2=t2*invFDmag;
wave_2_per_frame24=t3=t3*invFDmag;
wave_2_per_frame25=
wave_2_per_frame26=t7=t5*t3-t2*t6;
wave_2_per_frame27=t8=t6*t1-t4*t3;
wave_2_per_point1=// sw is a switch variable (1,2,3) depending on which of the 3 axes I want to draw
wave_2_per_point2=sw=int(3*sample);
wave_2_per_point3=fnZ=t4*t2-t5*t1;
wave_2_per_point4=
wave_2_per_point5=// p1,p2,p3 are parameters ranging from 0 to 1 used for drawing the vectors. 
wave_2_per_point6=// E.g. if I'm at the half of drawing the third axis, p3 should be .5 and all others 0.
wave_2_per_point7=p1=3*equal(sw,0)*sample;
wave_2_per_point8=p2=equal(sw,1)*3*(sample-.333);
wave_2_per_point9=p3=equal(sw,2)*3*(sample-.666);
wave_2_per_point10=
wave_2_per_point11=
wave_2_per_point12=// the second normal calculated as cross product of (tangent)x(first)
wave_2_per_point13=n1 = t2*fnZ-t8*t3;
wave_2_per_point14=n2 = -(t1*fnZ-t7*t3);
wave_2_per_point15=n3 = t1*t8-t2*t7;
wave_2_per_point16=
wave_2_per_point17=// (t7,t8,t9) , (n1,n2,n3), (t1,t2,t3) are the first normal/second normal/ and tangent vector of the camera.
wave_2_per_point18=// I'm using them to draw the axes of the camera. The coordinates are in (mx,my,mz)
wave_2_per_point19=mx=p1*t7 +p2*n1 +p3*t1;
wave_2_per_point20=my=p1*t8 +p2*n2 +p3*t2;
wave_2_per_point21=mz=p1*fnZ+p2*n3 +p3*t3;
wave_2_per_point22=
wave_2_per_point23=// I'm not applying perspective since I want orthographic projection
wave_2_per_point24=x=.14+.05*mx;
wave_2_per_point25=y=.14+.05*my*1.25;
wave_2_per_point26=a=1-( above(sample,.33)*below(sample,.34) + above(sample,.66)*below(sample,.67));
wave_2_per_point27=
wave_2_per_point28=r=equal(sw,0);
wave_2_per_point29=g=equal(sw,1);
wave_2_per_point30=b=equal(sw,2);
wavecode_3_enabled=1
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=1
wavecode_3_scaling=1.000000
wavecode_3_smoothing=0.500000
wavecode_3_r=1.000000
wavecode_3_g=1.000000
wavecode_3_b=1.000000
wavecode_3_a=1.000000
wave_3_per_frame1=speed=.015;
wave_3_per_frame2=length=.1;
wave_3_per_frame3=crosssectionrad=.07;
wave_3_per_frame4=
wave_3_per_frame5=t1=( speed*time-int(speed*time));
wave_3_per_frame6=t2= length;
wave_3_per_frame7=t3= crosssectionrad;
wave_3_per_frame8=
wave_3_per_frame9=t=t1*6.2831;
wave_3_per_frame10=t6=cos(t)*sin(.43+2*t+3.1415*sin(2.98+2*t));
wave_3_per_frame11=t7=cos(1.9+.7*t)*sin(t);
wave_3_per_frame12=t8=cos(1.54+2*t)*sin(2*t+3.1415*cos(1.01+2*t));
wave_3_per_frame13=
wave_3_per_frame14=q1=2*cos(t)*(1+3.1415*cos(2.98+2*t))*cos(.43+2*t+3.1415*sin(2.98+2*t))-sin(t)*sin(.43+2*t+3.1415*sin(2.98+2*t));
wave_3_per_frame15=q2=cos(1.9+.7*t)*cos(t)-.7*sin(1.9+.7*t)*sin(t);
wave_3_per_frame16=q3=cos(1.54+2*t)*cos(2*t+3.1415*cos(1.01+2*t))*(2-6.2831*sin(1.01+2*t))-2*sin(1.54+2*t)*sin(2*t+3.1415*cos(1.01+2*t));
wave_3_per_frame17=invFDmag=1/sqrt( q1*q1 + q2*q2 + q3*q3 );
wave_3_per_frame18=
wave_3_per_frame19=sdX=-4*cos(.43+2*t+3.1415*sin(2.98+2*t))*(sin(t)+3.1415*sin(2.98+3*t))-cos(t)*(5+25.132*cos(2.98+2*t)+39.4761*sqr(cos(2.98+2*t)))*sin( .43+2*t+3.1415*sin(2.98+2*t));
wave_3_per_frame20=sdY=-1.4*cos(t)*sin(1.9+.7*t)-1.49*cos(1.9+.7*t)*sin(t);
wave_3_per_frame21=sdZ=-12.566*cos(1.01+2*t)*cos(1.54+2*t)*cos(2*t+3.1415*cos(1.01+2*t))+8*cos(2*t+3.1415*cos(1.01+2*t))*(-1+3.1415*sin(1.01+2*t))*sin(1.54+2*t) - 4*cos(1.54+2*t)*(2-6.2831*sin(1.01+2*t)+9.869*sqr(sin(1.01+2*t)))*sin(2*t+3.1415*cos(1.01+2*t));
wave_3_per_frame22=
wave_3_per_frame23=q4=q2*sdZ-sdY*q3;
wave_3_per_frame24=q5=q3*sdX-q1*sdZ;
wave_3_per_frame25=q6=q1*sdY-q2*sdX;
wave_3_per_frame26=invSNmag=1/sqrt( q4*q4+q5*q5+q6*q6 );
wave_3_per_frame27=q4=q4*invSNmag;
wave_3_per_frame28=q5=q5*invSNmag;
wave_3_per_frame29=q6=q6*invSNmag;
wave_3_per_frame30=
wave_3_per_frame31=q1=q1*invFDmag;
wave_3_per_frame32=q2=q2*invFDmag;
wave_3_per_frame33=q3=q3*invFDmag;
wave_3_per_frame34=
wave_3_per_frame35=q7=q5*q3-q2*q6;
wave_3_per_frame36=q8=q6*q1-q4*q3;
wave_3_per_frame37=
wave_3_per_point1=t=(t1+(0+sample)*t2);
wave_3_per_point2=t=if(above(t,1),t-1,t);
wave_3_per_point3=t=t*6.2831;
wave_3_per_point4=
wave_3_per_point5=mx=cos(t)*sin(.43+2*t+3.1415*sin(2.98+2*t));
wave_3_per_point6=my=cos(1.9+.7*t)*sin(t);
wave_3_per_point7=mz=cos(1.54+2*t)*sin(2*t+3.1415*cos(1.01+2*t));
wave_3_per_point8=
wave_3_per_point9=fdX=2*cos(t)*(1+3.1415*cos(2.98+2*t))*cos(.43+2*t+3.1415*sin(2.98+2*t))-sin(t)*sin(.43+2*t+3.1415*sin(2.98+2*t));
wave_3_per_point10=fdY=cos(1.9+.7*t)*cos(t)-.7*sin(1.9+.7*t)*sin(t);
wave_3_per_point11=fdZ=cos(1.54+2*t)*cos(2*t+3.1415*cos(1.01+2*t))*(2-6.2831*sin(1.01+2*t))-2*sin(1.54+2*t)*sin(2*t+3.1415*cos(1.01+2*t));
wave_3_per_point12=invFDmag=1/sqrt( fdX*fdX + fdY*fdY + fdZ*fdZ );
wave_3_per_point13=
wave_3_per_point14=sdX=-4*cos(.43+2*t+3.1415*sin(2.98+2*t))*(sin(t)+3.1415*sin(2.98+3*t))-cos(t)*(5+25.132*cos(2.98+2*t)+39.4761*sqr(cos(2.98+2*t)))*sin( .43+2*t+3.1415*sin(2.98+2*t));
wave_3_per_point15=sdY=-1.4*cos(t)*sin(1.9+.7*t)-1.49*cos(1.9+.7*t)*sin(t);
wave_3_per_point16=sdZ=-12.566*cos(1.01+2*t)*cos(1.54+2*t)*cos(2*t+3.1415*cos(1.01+2*t))+8*cos(2*t+3.1415*cos(1.01+2*t))*(-1+3.1415*sin(1.01+2*t))*sin(1.54+2*t) - 4*cos(1.54+2*t)*(2-6.2831*sin(1.01+2*t)+9.869*sqr(sin(1.01+2*t)))*sin(2*t+3.1415*cos(1.01+2*t));
wave_3_per_point17=
wave_3_per_point18=snX=fdY*sdZ-sdY*fdZ;
wave_3_per_point19=snY=fdZ*sdX-fdX*sdZ;
wave_3_per_point20=snZ=fdX*sdY-fdY*sdX;
wave_3_per_point21=invSNmag=1/sqrt( snX*snX+snY*snY+snZ*snZ );
wave_3_per_point22=snX=snX*invSNmag;
wave_3_per_point23=snY=snY*invSNmag;
wave_3_per_point24=snZ=snZ*invSNmag;
wave_3_per_point25=
wave_3_per_point26=fdX=fdX*invFDmag;
wave_3_per_point27=fdY=fdY*invFDmag;
wave_3_per_point28=fdZ=fdZ*invFDmag;
wave_3_per_point29=
wave_3_per_point30=fnX=snY*fdZ-fdY*snZ;
wave_3_per_point31=fnY=snZ*fdX-snX*fdZ;
wave_3_per_point32=fnZ=snX*fdY-snY*fdX;
wave_3_per_point33=
wave_3_per_point34=
wave_3_per_point35=///////////////////////////////////////////////////////////////////////
wave_3_per_point36=// Everything was the same until here. I have found the point on the path, but instead of extruding to a spiral, I'm extruding to a pseudorandom angle and distance (that i can recreate) in order to create the starfield.
wave_3_per_point37=// Notice that I'm using the same method as I did for the tunnel because I want the stars to be close to the tunnel, so I can get the most of the effect. However I'm not using the first and second normal because they are immediately related to the direction of the path and it makes the starfield respond to it in unnatural way.
wave_3_per_point38=// Notice also that I'm using the 'sample' variable instead of 't' since I want the starfield to look like it's always in front of the camera. It doesn't look very realistic the good old way.
wave_3_per_point39=
wave_3_per_point40=// angl still represents the angle on the plane of the first and second normal
wave_3_per_point41=// 'rr' is distance of the star from the path
wave_3_per_point42=angl=6.2831*cos(628.3185*sample+2.54+40*sin(62.8318*sample+.56));
wave_3_per_point43=rr=t3*(.1+abs(sin(628.3185*sample+2.54+40*cos(62.8318*sample+.56))));
wave_3_per_point44=
wave_3_per_point45=// The new coordinates for the star
wave_3_per_point46=mx=mx+rr*cos(angl);
wave_3_per_point47=my=my+rr*cos(angl)/sin(angl);
wave_3_per_point48=mz=mz+rr*sin(angl);
wave_3_per_point49=
wave_3_per_point50=//  The rest are pretty much the same... I'm using the same approach for the alpha value
wave_3_per_point51=qq9=q4*q2-q5*q1;
wave_3_per_point52=vx=(q7*mx+q8*my+qq9*mz-(t6*q7+t7*q8+t8*qq9));
wave_3_per_point53=vy=(q4*mx+q5*my+q6*mz-(t6*q4+t7*q5+t8*q6));
wave_3_per_point54=vw=q1*mx+q2*my+q3*mz-(t6*q1+t7*q2+t8*q3);
wave_3_per_point55=
wave_3_per_point56=ox=(vx/vw)*.15;
wave_3_per_point57=oy=(vy/vw)*.15*1.25;
wave_3_per_point58=x=.5-oy;
wave_3_per_point59=y=.5+ox*1.25;
wave_3_per_point60=a=above(vw,.01)*pow(2*(.5-min(vw,.5)),2);
shapecode_0_enabled=1
shapecode_0_sides=60
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_x=0.140000
shapecode_0_y=0.140000
shapecode_0_rad=0.133451
shapecode_0_ang=0.000000
shapecode_0_tex_ang=0.000000
shapecode_0_tex_zoom=1.000000
shapecode_0_r=0.000000
shapecode_0_g=0.000000
shapecode_0_b=0.000000
shapecode_0_a=1.000000
shapecode_0_r2=0.000000
shapecode_0_g2=0.000000
shapecode_0_b2=0.000000
shapecode_0_a2=1.000000
shapecode_0_border_r=1.000000
shapecode_0_border_g=1.000000
shapecode_0_border_b=1.000000
shapecode_0_border_a=1.000000
shapecode_1_enabled=0
shapecode_1_sides=4
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_x=0.500000
shapecode_1_y=0.500000
shapecode_1_rad=0.100000
shapecode_1_ang=0.000000
shapecode_1_tex_ang=0.000000
shapecode_1_tex_zoom=1.000000
shapecode_1_r=1.000000
shapecode_1_g=0.000000
shapecode_1_b=0.000000
shapecode_1_a=1.000000
shapecode_1_r2=0.000000
shapecode_1_g2=1.000000
shapecode_1_b2=0.000000
shapecode_1_a2=0.000000
shapecode_1_border_r=1.000000
shapecode_1_border_g=1.000000
shapecode_1_border_b=1.000000
shapecode_1_border_a=0.100000
shapecode_2_enabled=0
shapecode_2_sides=4
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_x=0.500000
shapecode_2_y=0.500000
shapecode_2_rad=0.100000
shapecode_2_ang=0.000000
shapecode_2_tex_ang=0.000000
shapecode_2_tex_zoom=1.000000
shapecode_2_r=1.000000
shapecode_2_g=0.000000
shapecode_2_b=0.000000
shapecode_2_a=1.000000
shapecode_2_r2=0.000000
shapecode_2_g2=1.000000
shapecode_2_b2=0.000000
shapecode_2_a2=0.000000
shapecode_2_border_r=1.000000
shapecode_2_border_g=1.000000
shapecode_2_border_b=1.000000
shapecode_2_border_a=0.100000
shapecode_3_enabled=0
shapecode_3_sides=4
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_x=0.500000
shapecode_3_y=0.500000
shapecode_3_rad=0.100000
shapecode_3_ang=0.000000
shapecode_3_tex_ang=0.000000
shapecode_3_tex_zoom=1.000000
shapecode_3_r=1.000000
shapecode_3_g=0.000000
shapecode_3_b=0.000000
shapecode_3_a=1.000000
shapecode_3_r2=0.000000
shapecode_3_g2=1.000000
shapecode_3_b2=0.000000
shapecode_3_a2=0.000000
shapecode_3_border_r=1.000000
shapecode_3_border_g=1.000000
shapecode_3_border_b=1.000000
shapecode_3_border_a=0.100000
per_frame_1=decay=.81;
per_frame_2=
per_frame_3=dt=1/FPS;
per_frame_4=contvol=max(.4, (1-.6*dt)*contvol+.2*dt*(bass+mid+treb) );
per_frame_5=
per_frame_6=monitor=4/6.2831;
