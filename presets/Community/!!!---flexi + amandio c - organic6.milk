MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=0.000
fGammaAdj=1.000
fDecay=1.000
fVideoEchoZoom=2.000
fVideoEchoAlpha=0.000
nVideoEchoOrientation=0
nWaveMode=0
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=1
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.009
fWaveScale=1.554
fWaveSmoothing=0.000
fWaveParam=0.000
fModWaveAlphaStart=1.200
fModWaveAlphaEnd=1.200
fWarpAnimSpeed=0.137
fWarpScale=13.125
fZoomExponent=1.00000
fShader=0.000
zoom=0.99951
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.99213
sx=1.00000
sy=1.00000
wave_r=0.000
wave_g=1.000
wave_b=0.040
wave_x=0.500
wave_y=0.500
ob_size=0.500
ob_r=0.010
ob_g=0.000
ob_b=0.000
ob_a=0.000
ib_size=0.260
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.850
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=0
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=0.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=1.000
wave_0_per_frame1=q1 = below(rand(100),4 + 10*(treb+mid+bass));
wave_0_per_point1=it = (it + 1)*above(sample,0)*below(it,53);
wave_0_per_point2=ita = (ita + equal(it,0))*above(sample,0);
wave_0_per_point3=
wave_0_per_point4=sw = 1-equal(it,0)*equal(ita,0);
wave_0_per_point5=swi = (equal(lr,9) + equal(lr,5))*equal(it,0)*equal(ita,4);
wave_0_per_point6=xv = if(sw - swi,xv,rand(1001)*.001*.8);
wave_0_per_point7=mx = xv + ita*.025;
wave_0_per_point8=my = if(sw - swi,my,rand(1001)*.001*.975);
wave_0_per_point9=
wave_0_per_point10=sz = .01;
wave_0_per_point11=vx = above(it,1)*below(it,39) + above(it,12)*below(it,28) - equal(it,20) + equal(it,46) + equal(it,51) + equal(it,41) - equal(it,15) - equal(it,25) + equal(it,10) + equal(it,30) - equal(it,4) - equal(it,36);
wave_0_per_point12=vy = above(it,17)*below(it,49) + above(it,22)*below(it,44) - equal(it,33) + equal(it,7) + equal(it,51) + equal(it,15) - equal(it,41) - equal(it,25) + equal(it,4) + equal(it,10) - equal(it,36) - equal(it,30);
wave_0_per_point13=
wave_0_per_point14=sa = equal(ita,0)*13 + equal(ita,1)*9 + equal(ita,2)*12 + equal(ita,3)*11 + equal(ita,4)*4 + equal(ita,5)*18 + equal(ita,6)*15 + equal(ita,7)*16;
wave_0_per_point15=sb = equal(ita,0)*11 + equal(ita,1)*9 + equal(ita,2)*12 + equal(ita,3)*12;
wave_0_per_point16=sc = equal(ita,0)*4 + equal(ita,1)*15 + equal(ita,3)*4 + equal(ita,4)*18 + equal(ita,5)*21 + equal(ita,6)*7 + equal(ita,7)*19;
wave_0_per_point17=sd = equal(ita,0)*12 + equal(ita,1)*15 + equal(ita,2)*22 + equal(ita,3)*5;
wave_0_per_point18=se = equal(ita,0)*8 + equal(ita,1)*1 + equal(ita,2)*20 + equal(ita,3)*5;
wave_0_per_point19=sf = equal(ita,0)*6 + equal(ita,1)*5 + equal(ita,2)*1 + equal(ita,3)*18 + equal(ita,5)*10 + equal(ita,6)*15 + equal(ita,7)*25;
wave_0_per_point20=sg = equal(ita,0)*1 + equal(ita,1)*14 + equal(ita,2)*7 + equal(ita,3)*5 + equal(ita,4)*18;
wave_0_per_point21=sh = equal(ita,0)*19 + equal(ita,1)*21 + equal(ita,2)*18 + equal(ita,3)*16 + equal(ita,4)*18 + equal(ita,5)*9 + equal(ita,6)*19 + equal(ita,7)*5;
wave_0_per_point22=si = equal(ita,0)*8 + equal(ita,1)*1 + equal(ita,2)*16 + equal(ita,3)*16 + equal(ita,4)*25;
wave_0_per_point23=sj = equal(ita,0)*25 + equal(ita,1)*5 + equal(ita,2)*19 + equal(ita,6)*14 + equal(ita,7)*15;
wave_0_per_point24=
wave_0_per_point25=lr = if(sw,lr,rand(10));
wave_0_per_point26=let = equal(lr,0)*sa + equal(lr,1)*sb + equal(lr,2)*sc + equal(lr,3)*sd + equal(lr,4)*se + equal(lr,5)*sf + equal(lr,6)*sg + equal(lr,7)*sh + equal(lr,8)*si + equal(lr,9)*sj;
wave_0_per_point27=
wave_0_per_point28=va = equal(let,23) + equal(let,24) + equal(let,26);
wave_0_per_point29=vb = above(let,0)*below(let,9) + above(let,10)*below(let,19) + equal(let,21) + equal(let,23);
wave_0_per_point30=vc = equal(let,1) + equal(let,2) + equal(let,5) + equal(let,6) + equal(let,8) + equal(let,11) + equal(let,16) + equal(let,18) + equal(let,19);
wave_0_per_point31=vd = above(let,1)*below(let,9) + above(let,10)*below(let,24) - equal(let,20);
wave_0_per_point32=ve = equal(let,13) + equal(let,14) + equal(let,24) + equal(let,25);
wave_0_per_point33=vf = above(let,1)*below(let,8) + equal(let,9) + above(let,14)*below(let,21) + equal(let,26);
wave_0_per_point34=vg = equal(let,1);
wave_0_per_point35=vh = equal(let,9) + equal(let,20);
wave_0_per_point36=vi = above(let,0)*below(let,5) - equal(let,3) + equal(let,18);
wave_0_per_point37=vj = above(let,2)*below(let,8) - equal(let,4) + equal(let,9) + above(let,14)*below(let,21) - equal(let,18) + equal(let,26);
wave_0_per_point38=vk = equal(let,11) + equal(let,13) + above(let,23)*below(let,27);
wave_0_per_point39=vl = equal(let,8) + equal(let,10) + above(let,12)*below(let,18) + above(let,20)*below(let,24);
wave_0_per_point40=vm = equal(let,1) + equal(let,2) + equal(let,8) + equal(let,16) + equal(let,18) + equal(let,19);
wave_0_per_point41=vn = equal(let,1) + equal(let,7) + equal(let,8) + equal(let,10) + above(let,12)*below(let,24) - equal(let,16) - equal(let,18) - equal(let,20) - equal(let,22);
wave_0_per_point42=vo = equal(let,11) + equal(let,14) + equal(let,17) + equal(let,18) + equal(let,23) + equal(let,24);
wave_0_per_point43=vp = equal(let,3) + equal(let,5) + equal(let,7) + equal(let,9) + equal(let,10) + equal(let,12) + equal(let,15) + equal(let,17) + equal(let,19) + equal(let,21) + equal(let,26);
wave_0_per_point44=vq = equal(let,2) + equal(let,4) + equal(let,22);
wave_0_per_point45=vr = equal(let,9) + equal(let,20) + equal(let,25);
wave_0_per_point46=vs = equal(let,22);
wave_0_per_point47=vt = above(let,1)*below(let,13) - equal(let,6) - equal(let,8) - equal(let,11) + equal(let,15) + equal(let,17) + equal(let,19) + equal(let,21) + equal(let,26);
wave_0_per_point48=
wave_0_per_point49=a = if(above(it,51),0,if(above(it,49),va,if(above(it,47),vb,if(above(it,44),vc,if(above(it,42),vd,if(above(it,39),ve, if(above(it,37),vf,if(above(it,34),vg,if(above(it,31),vh,if(above(it,28),vi,if(above(it,26),vj,if(above(it,23),vk, if(above(it,21),vl,if(above(it,18),vm,if(above(it,16),vn,if(above(it,13),vo,if(above(it,11),vp,if(above(it,8),vq, if(above(it,5),vr,if(above(it,2),vs,if(it,vt,0)))))))))))))))))))));
wave_0_per_point50=
wave_0_per_point51=a = a*below(ita,8)*q1;
wave_0_per_point52=
wave_0_per_point53=x = mx + vx*sz*.75;
wave_0_per_point54=y = my + vy*sz*1.5;
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=1
shapecode_0_sides=100
shapecode_0_additive=1
shapecode_0_thickOutline=1
shapecode_0_textured=0
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.86644
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.00000
shapecode_0_r=1.000
shapecode_0_g=0.030
shapecode_0_b=0.000
shapecode_0_a=1.000
shapecode_0_r2=0.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shapecode_1_enabled=0
shapecode_1_sides=5
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=1
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.98600
shapecode_1_ang=0.00000
shapecode_1_tex_ang=3.14159
shapecode_1_tex_zoom=0.99979
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=1.000
shapecode_1_a=1.000
shapecode_1_r2=1.000
shapecode_1_g2=1.000
shapecode_1_b2=1.000
shapecode_1_a2=1.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.000
shape_1_per_frame1=ang =sin(time/65) ;// ang + (bass*.2) + (time*.4);
shapecode_2_enabled=0
shapecode_2_sides=100
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=1
shapecode_2_num_inst=1
shapecode_2_x=0.900
shapecode_2_y=0.500
shapecode_2_rad=0.10000
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=1.000
shapecode_2_g=1.000
shapecode_2_b=1.000
shapecode_2_a=1.000
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=1.000
shapecode_2_a2=1.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.100
shape_2_per_frame1=x = sin(time) * .4 + .5;
shape_2_per_frame2=
shape_2_per_frame3=
shape_2_per_frame4=pow( (bass*.15),2);
shapecode_3_enabled=0
shapecode_3_sides=36
shapecode_3_additive=1
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.81623
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=0.000
shapecode_3_g=0.040
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=0.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.000
shape_3_per_frame1=x = 1-q1;
shape_3_per_frame2=y = q2;
shape_3_per_frame3=x = 0.5 + (x - 0.5)*0.25;
shape_3_per_frame4=y = 0.5 + (y - 0.5)*0.25;
per_frame_1=// elastic thread code
per_frame_2=
per_frame_3=xx1 = xx1*0.9 + (bass)*0.01;
per_frame_4=xx2 = xx2*0.9 + (treb)*0.01;
per_frame_5=yy1 = yy1*0.94 + (treb+bass)*0.0075;
per_frame_6=x1 = 0.5 + (xx1-xx2)*2;
per_frame_7=y1 = 0.4 + yy1*1.5;
per_frame_8=dt = 0.03/fps;
per_frame_9=vx2 = vx2*(1-2*dt) + dt*((x1+x3-2*x2)*10);
per_frame_10=vy2 = vy2*(1-2*dt) + dt*((y1+y3-2*y2)*10-0.5);
per_frame_11=vx3 = vx3*(1-2*dt) + dt*((x2+x4-2*x3)*10);
per_frame_12=vy3 = vy3*(1-2*dt) + dt*((y2+y4-2*y3)*10-0.5);
per_frame_13=vx4 = vx4*(1-2*dt) + dt*((x3-x4)*10);
per_frame_14=vy4 = vy4*(1-2*dt) + dt*((y3-y4)*10-0.5);
per_frame_15=x2 = x2 + vx2; y2 = y2 + vy2;
per_frame_16=x3 = x3 + vx3; y3 = y3 + vy3;
per_frame_17=x4 = x4 + vx4; y4 = y4 + vy4;
per_frame_18=vx2 = if(above(x2,0),vx2,abs(vx2)*0.5);
per_frame_19=vx2 = if(below(x2,1),vx2,-abs(vx2)*0.5);
per_frame_20=vx3 = if(above(x3,0),vx3,abs(vx3)*0.5);
per_frame_21=vx3 = if(below(x3,1),vx3,-abs(vx3)*0.5);
per_frame_22=vx4 = if(above(x4,0),vx4,abs(vx4)*0.5);
per_frame_23=vx4 = if(below(x4,1),vx4,-abs(vx4)*0.5);
per_frame_24=vy2 = if(above(y2,0),vy2,abs(vy2)*0.5);
per_frame_25=vy2 = if(below(y2,1),vy2,-abs(vy2)*0.5);
per_frame_26=vy3 = if(above(y3,0),vy3,abs(vy3)*0.5);
per_frame_27=vy3 = if(below(y3,1),vy3,-abs(vy3)*0.5);
per_frame_28=vy4 = if(above(y4,0),vy4,abs(vy4)*0.5);
per_frame_29=vy4 = if(below(y4,1),vy4,-abs(vy4)*0.5);
per_frame_30=q1 = x1;q2 = x2;q3 = x3;q4 = x4;
per_frame_31=q5 = y1;q6 = y2;q7 = y3;q8 = y4;
per_frame_32=q9 = 1/aspectx;
per_frame_33=q10 = 1/aspecty;
per_frame_34=q11 = aspectx;
per_frame_35=q12 = aspecty;
per_frame_36=q13 = sqrt(vx4*vx4 + vy4*vy4);
per_frame_37=q14 = atan2(vx4,vy4);
per_frame_38=q15 = sin(q14);
per_frame_39=q16 = cos(q14);
per_frame_40=
per_frame_41=// Flexis dampened sound response functions
per_frame_42=
per_frame_43=db = db*0.98 + bass*0.2; // dampener
per_frame_44=bb = bb + db*0.1; // accumulation, replace time expressions with this ;)
per_frame_45=
per_frame_46=ddt = ddt*0.98 + treb*0.2;
per_frame_47=tt = tt + ddt*0.1;
per_frame_48=
per_frame_49=dm = dm*0.98 + mid*0.2;
per_frame_50=mm = mm + dm*0.1;
per_frame_51=
per_frame_52=
per_frame_53=//***** [q21-q28] variables for Flexis caleidoscope shader code *****
per_frame_54=
per_frame_55=// change
per_frame_56=q23 = 0.5 + sin((bb-mm)*0.1)*0.25; // center x
per_frame_57=q24 = 0.5 + sin((tt-mm)*0.1)*0.25; // center y
per_frame_58=w = (bb-tt)*0.1;                   // angle
per_frame_59=q26 = 0.25 - (db-ddt)*0.025;        // size
per_frame_60=
per_frame_61=//don't change
per_frame_62=q21 = sin(w);
per_frame_63=q22 = cos(w);
per_frame_64=q27 = sin(-w);
per_frame_65=q28 = cos(-w);
per_frame_66=q25 = 1/q26;
warp_1=`float2 complex_div(float2 numerator, float2 denominator){
warp_2=`   return float2( numerator.x*denominator.x + numerator.y*denominator.y,
warp_3=`                  numerator.y*denominator.x - numerator.x*denominator.y)/
warp_4=`          (denominator.x*denominator.x + denominator.y*denominator.y);
warp_5=`}
warp_6=`
warp_7=`float2 uv_polar(float2 domain, float2 center){
warp_8=`   float2 c = domain - center;
warp_9=`   float rad_hq = length(c);
warp_10=`   float ang_hq = atan2(c.x,c.y);
warp_11=`   return float2(ang_hq*M_INV_PI_2, rad_hq);
warp_12=`}
warp_13=`
warp_14=`float2 uv_polar_logarithmic(float2 domain, float2 center, int fins, float log_factor, float2 coord){
warp_15=`   float2 polar = uv_polar(domain, center);
warp_16=`   return float2(polar.x*fins+coord.x, log_factor*log(polar.y) + coord.y);
warp_17=`}
warp_18=`
warp_19=`float2 uv_moebius_transformation(float2 domain, float2 zeroPoint, float2 infinityPoint,float zoom){
warp_20=`   return complex_div((domain - zeroPoint)*zoom, domain - infinityPoint)+0.5;
warp_21=`}
warp_22=`
warp_23=`float2 uv_bipolar(float2 domain, float2 northPole, float2 southPole, int fins, float log_factor, float2 coord){
warp_24=`   float2 help_uv = uv_moebius_transformation(domain, northPole, southPole, 1);
warp_25=`   return uv_polar_logarithmic(help_uv,0.5,fins,log_factor,coord);
warp_26=`}
warp_27=`
warp_28=`
warp_29=`float2 uv_rotate( float2 domain, float2 center, float sinw, float cosw, float scale){
warp_30=`   float2 uv_r = (domain-center);
warp_31=`   return center + float2( cosw*uv_r.x - sinw*uv_r.y, sinw*uv_r.x + cosw*uv_r.y)*scale;
warp_32=`}
warp_33=`
warp_34=`float3 maxNeumann(float2 domain){
warp_35=`   float3 maxneumann = float3(0,0,0);
warp_36=`   float2 pixel = texsize.zw;
warp_37=`   maxneumann = max(maxneumann, tex2D(sampler_fc_main, domain + pixel*float2(-1, 0) ));
warp_38=`   maxneumann = max(maxneumann, tex2D(sampler_fc_main, domain + pixel*float2( 0,-1) ));
warp_39=`   maxneumann = max(maxneumann, tex2D(sampler_fc_main, domain + pixel*float2( 0, 0) ));
warp_40=`   maxneumann = max(maxneumann, tex2D(sampler_fc_main, domain + pixel*float2( 0, 1) ));
warp_41=`   maxneumann = max(maxneumann, tex2D(sampler_fc_main, domain + pixel*float2( 1, 0) ));
warp_42=`   return maxneumann;
warp_43=`}
warp_44=`
warp_45=`shader_body
warp_46=`{
warp_47=`   float3 noise = (tex2D(sampler_noise_lq, uv*texsize.xy*texsize_noise_lq.zw + rand_frame.xy).y-0.5);
warp_48=`   float2 uvo = uv;
warp_49=`
warp_50=`   uv = uv_orig;
warp_51=`
warp_52=`   float2 rotate_uv = 0.5-uv_rotate(0 + (uv-0.5)*aspect.xy, 0, q7, -q6, 2) + noise.xy*texsize.zw*4;
warp_53=`   float2 bipolar_uv = uv_bipolar(rotate_uv,float2(0,0.5),float2(1,0.5), 2, 0.3, float2(q9*0.5,q8*0.5));
warp_54=`   float2 mirror_uv = 0.5 + (0.5 - abs( frac( bipolar_uv * 0.5 ) * 2.0 - 1.0 ));
warp_55=`
warp_56=`   ret.x = GetBlur1(mirror_uv).x*0.97-0.02;
warp_57=`
warp_58=`
warp_59=`   ret.z = GetPixel(0.5+(uv-0.5)*0.985 + noise.xy*texsize.zw*0.5).z*0.85 - 0.004;
warp_60=`
warp_61=`   float2 d = texsize.zw*4;
warp_62=`   float dx = (2*GetBlur1(uv+d*float2(1,0))-2*GetBlur1(uv+d*float2(-1,0)) ).y*0.5;
warp_63=`   float dy = (2*GetBlur1(uv+d*float2(0,1))-2*GetBlur1(uv+d*float2(0,-1)) ).y*0.5;
warp_64=`
warp_65=`   d = float2(dx,dy)*texsize.zw;
warp_66=`
warp_67=`   ret.y = maxNeumann(uv-d*2.5).y + (GetPixel(uv+d*4).y - GetBlur1(uv + d*4).y)*0.206 - 0.09;
warp_68=`
warp_69=`   ret.y += GetBlur1(mirror_uv).z*0.25;
warp_70=`}
comp_1=`shader_body
comp_2=`{
comp_3=`    float2 d = texsize.zw;
comp_4=`    float3 dx = ( GetPixel(uv+float2(1,0)*d)-GetPixel(uv-float2(1,0)*d) );
comp_5=`    float3 dy = ( GetPixel(uv+float2(0,1)*d)-GetPixel(uv-float2(0,1)*d) );
comp_6=`float2 dz = float2(dx.y,dy.y)*3;
comp_7=`
comp_8=`d = texsize.zw*2;
comp_9=`dx = ( GetBlur1(uv+float2(1,0)*d)-GetBlur1(uv-float2(1,0)*d) );
comp_10=`dy = ( GetBlur1(uv+float2(0,1)*d)-GetBlur1(uv-float2(0,1)*d) );
comp_11=`
comp_12=`dz +=float2(dx.y,dy.y);
comp_13=`
comp_14=`float3 bg = pow(length(dz)*0.8+0,0.7) + GetBlur2(uv).y*0.4-0.1;
comp_15=`
comp_16=`ret = bg*float3(0.25,0.75,0.2);
comp_17=`ret = lerp(ret,float3(0.2,0.1,0),GetPixel(uv + float2(dx.x,dy.x)*texsize.zw*18).x*6);
comp_18=`ret = lerp(ret,float3(1,0.9,0.7),GetPixel(uv).z);
comp_19=`
comp_20=`//ret = GetPixel(uv);
comp_21=`}
