MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=0
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.005
fWaveScale=0.118
fWaveSmoothing=0.900
fWaveParam=-0.480
fModWaveAlphaStart=0.400
fModWaveAlphaEnd=1.600
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.800
wave_g=0.490
wave_b=1.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.260
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=1.850
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=32
wavecode_0_sep=0
wavecode_0_bSpectrum=1
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=1
wavecode_0_scaling=17.41885
wavecode_0_smoothing=0.20000
wavecode_0_r=1.000
wavecode_0_g=0.000
wavecode_0_b=1.000
wavecode_0_a=0.000
wave_0_per_frame1=t1 = 0;
wave_0_per_frame2=t2 = 0;
wave_0_per_frame3=t3 = 0;
wave_0_per_point1=x = sample;
wave_0_per_point2=
wave_0_per_point3=val = (value1 + value2)*10;
wave_0_per_point4=megabuf (t1) = megabuf(t1)*0.5 + val*0.5;
wave_0_per_point5=
wave_0_per_point6=if (val - megabuf(t1) > t3, t3 = val-megabuf(t1), 0);
wave_0_per_point7=
wave_0_per_point8=
wave_0_per_point9=reg00 = t3; y = t3*0.1 + 0.3;
wavecode_1_enabled=0
wavecode_1_samples=128
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=0.89152
wavecode_1_smoothing=0.82000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=0.100
wavecode_2_enabled=0
wavecode_2_samples=32
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=0.89152
wavecode_2_smoothing=0.82000
wavecode_2_r=0.000
wavecode_2_g=0.200
wavecode_2_b=0.600
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=0
shapecode_0_sides=12
shapecode_0_additive=1
shapecode_0_thickOutline=1
shapecode_0_textured=0
shapecode_0_num_inst=128
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.06598
shapecode_0_ang=0.00000
shapecode_0_tex_ang=1.00531
shapecode_0_tex_zoom=0.12726
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=1.000
shapecode_0_r2=0.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.000
shapecode_0_border_r=0.000
shapecode_0_border_g=0.000
shapecode_0_border_b=0.000
shapecode_0_border_a=0.000
shape_0_per_frame1=k1 = instance / num_inst;
shape_0_per_frame2=
shape_0_per_frame3=n = instance * 12;
shape_0_per_frame4=z = gmegabuf (n+2)+1;
shape_0_per_frame5=x = 0.5 + gmegabuf (n)/z;
shape_0_per_frame6=y = 0.5 + gmegabuf (n+1)/z * q32;
shape_0_per_frame7=
shape_0_per_frame8=rad = 0.2 * q32 / z * (z > 0);
shape_0_per_frame9=
shape_0_per_frame10=r = k1; r2 = k1;
shapecode_1_enabled=0
shapecode_1_sides=14
shapecode_1_additive=1
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=11
shapecode_1_x=0.260
shapecode_1_y=0.200
shapecode_1_rad=0.07243
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=0.93550
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=1.000
shapecode_1_a=1.000
shapecode_1_r2=1.000
shapecode_1_g2=1.000
shapecode_1_b2=1.000
shapecode_1_a2=1.000
shapecode_1_border_r=1.000
shapecode_1_border_g=0.000
shapecode_1_border_b=0.000
shapecode_1_border_a=0.000
shape_1_per_frame1=x = (q7%16)/16;
shape_1_per_frame2=y = instance / 8;
shape_1_per_frame3=
shape_1_per_frame4=if (instance%2==0, x = 1-x,0);
shape_1_per_frame5=
shape_1_per_frame6=//x = sin(3.1416/8*(q7+instance))/3+0.5;
shape_1_per_frame7=//y = sin(3.1416/9*(q7+instance))/3+0.5;
shapecode_2_enabled=0
shapecode_2_sides=4
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=200
shapecode_2_x=0.650
shapecode_2_y=0.380
shapecode_2_rad=0.15640
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.73678
shapecode_2_r=1.000
shapecode_2_g=1.000
shapecode_2_b=1.000
shapecode_2_a=0.700
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=1.000
shapecode_2_a2=0.000
shapecode_2_border_r=0.500
shapecode_2_border_g=0.500
shapecode_2_border_b=0.000
shapecode_2_border_a=0.000
shape_2_per_frame1=x = instance / num_inst * 0.96 + 0.02;
shape_2_per_frame2=x = 0.02 + gmegabuf(8*instance+5000)*0.96/320;
shape_2_per_frame3=y0 = gmegabuf(8*instance + 4+5000) * 0.3; 
shape_2_per_frame4=y = 0.05 + y0;
shape_2_per_frame5=
shape_2_per_frame6=rad = 0.015; border_a = 0.8; b = 0;
shape_2_per_frame7=if (q11==instance,rad = 0.05; a = q1;a2 = a; ; b2 = 1;,0);
shape_2_per_frame8=
shape_2_per_frame9=
shapecode_3_enabled=0
shapecode_3_sides=4
shapecode_3_additive=1
shapecode_3_thickOutline=1
shapecode_3_textured=1
shapecode_3_num_inst=1
shapecode_3_x=0.600
shapecode_3_y=0.550
shapecode_3_rad=0.17915
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.04372
shapecode_3_r=1.000
shapecode_3_g=1.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=1.000
shapecode_3_b2=1.000
shapecode_3_a2=1.000
shapecode_3_border_r=1.000
shapecode_3_border_g=0.800
shapecode_3_border_b=0.500
shapecode_3_border_a=0.000
shape_3_per_frame1=a = 0; a2 = 0;
shape_3_per_frame2=border_a = 1;
per_frame_init_1=n = -10000; loop (20000, megabuf(n)=0; gmegabuf(n)=0; n +=1; );
per_frame_init_2=
per_frame_init_3=MINBPM = 60; MAXBPM = 320; num_res = 200; 
per_frame_init_4=index = 0;
per_frame_init_5=loop (num_res,
per_frame_init_6=  n = index*8;
per_frame_init_7=  BPM      = minbpm * pow(maxbpm/minbpm,index/(num_res-1));
per_frame_init_8=  megabuf(n) = BPM;
per_frame_init_9=  index += 1;
per_frame_init_10=);
per_frame_init_11=
per_frame_init_12=
per_frame_init_13=//structure of resonator data, starting at megabuf (0)
per_frame_init_14=//size = 8
per_frame_init_15=//0: BPM
per_frame_init_16=//1: v
per_frame_init_17=//2: y
per_frame_init_18=//3: amplitude
per_frame_init_19=//4: amplitude after harmonics post processing
per_frame_1=//Martins resonant beat detection - use as it is
per_frame_2=//NOTE: uses megabuf (0) - megabuf (1600)
per_frame_3=//output: is_beat1 and is_beat2; 2:1 or 1:2
per_frame_4=
per_frame_5=//-------------- Start ----------------------------
per_frame_6=dt = min (1/fps,0.1) ; //Stability !
per_frame_7=dec_m = 1 - 4*dt; dec_s = 1 - 1.25*dt;
per_frame_8=vol =  max(0.5,bass+mid); 
per_frame_9=vol_ = vol_*dec_m + (1-dec_m)*vol; excite = (vol-vol_)/vol_;
per_frame_10=index=0; ratio = log(maxbpm/minbpm); sum_res = 0.01;
per_frame_11=loop (num_res,
per_frame_12=  n = index*8;
per_frame_13=  omega      =   megabuf(n) * 6.2832/60;
per_frame_14=  megabuf (n+1) *= 1-0.25*dt; //damping
per_frame_15=  EC_Steps = int (10*omega*dt)+1; 
per_frame_16=  loop (EC_Steps, // Euler-Cauchy steps
per_frame_17=    megabuf (n+1) += (excite - sqr(omega)*megabuf(n + 2)) * dt/EC_Steps;
per_frame_18=    megabuf (n+2) += megabuf(n+1) * dt/EC_Steps);
per_frame_19=  beatcos  = megabuf(n+1);  beatsin = megabuf(n+2)*omega; //2pi/60
per_frame_20=  quad     = sqrt (pow(beatsin,2) + pow(beatcos,2)) ;
per_frame_21=  megabuf (n+3) = megabuf(n+3) *dec_s +  quad* (1-dec_s);
per_frame_22=  megabuf (n+4) = megabuf(n+3);
per_frame_23=  stage = 2; //Addition d. Harmonischen
per_frame_24=  loop (2,
per_frame_25=    ind2     = int (0.5 + index + (num_res-1)/ratio*log(stage));
per_frame_26=    if ((ind2 <= num_res),
per_frame_27=       n2 = ind2*8;
per_frame_28=       A2     = max(max(megabuf(n2+3),megabuf(n2-8+3)),megabuf(n2+8+3));
per_frame_29=      megabuf(n+4) *= 1 + 2/(stage*stage)*A2/(A2+megabuf(n+3)),0);
per_frame_30=    stage *= 2;
per_frame_31=  );
per_frame_32=  Hyst = 1 + min (0.25, abs (index-maxind)*0.02);
per_frame_33=  if (megabuf(n+4) > megabuf (maxind*8+4)*Hyst, maxind = index,0);
per_frame_34=  sum_res += megabuf (n+3);
per_frame_35=  index += 1;
per_frame_36=);
per_frame_37=certain = megabuf(maxind*8+3)/(sum_res/num_res);
per_frame_38=//Doppelten oder, falls nicht moeglich, halben beat indizieren
per_frame_39=maxind2     = int (0.5 + maxind + (num_res-1)/ratio*log(2));
per_frame_40=if (maxind2 > num_res, maxind2 = int (0.5 + maxind + (num_res-1)/ratio*log(0.5)),0);
per_frame_41=sig1 = (sig1 + megabuf(maxind*8+1))/2 + excite * 0; //check ######
per_frame_42=is_beat1  = (sig1 > 0) && (sig1_ <= 0); 
per_frame_43=sig2 = (sig2 + megabuf(maxind2*8+1))/2 + excite * 0; //check ######
per_frame_44=is_beat2  = (sig2 > 0) && (sig2_ <= 0); 
per_frame_45=fastpace = if (maxind > maxind2, sig1 * sig1_ < 0, sig2 * sig2_ < 0);
per_frame_46=sig1_ = sig1;
per_frame_47=sig2_ = sig2;
per_frame_48=//-------------- End ----------------------------
per_frame_49=tog1 = sig1 > 0;
per_frame_50=tog2 = sig2 > 0;
per_frame_51=sbeat1 = (sbeat1 + is_beat1)/2;
per_frame_52=sbeat2 = (sbeat2 + is_beat2)/2;
per_frame_53=//fastpace = if (maxind > ind2, is_beat1,is_beat2);
per_frame_54=prog1 = (prog1 + is_beat1) %1024;
per_frame_55=prog2 = (prog2 + is_beat2) %1024;
per_frame_56=prog3 = (prog3 + fastpace) %1024;
per_frame_57=
per_frame_58=maxi = min (maxind, maxind2);
per_frame_59=//maxi = maxind; //#####???
per_frame_60=trunner = trunner + dt*megabuf (maxi*8)/60*3.1416*2;
per_frame_61=corr = if (push, 0.5*corr + 0.5*cos (trunner), corr*dec_s);
per_frame_62=trunner -= corr * dt;
per_frame_63=trunner_ = dec_s * trunner_ + (1-dec_s)*trunner/2;
per_frame_64=
per_frame_65=
per_frame_66=q1 = is_beat1;
per_frame_67=q2 = sbeat1;
per_frame_68=q3 = prog1;
per_frame_69=
per_frame_70=q5= is_beat2;
per_frame_71=q6 = sbeat2;
per_frame_72=q7 = prog2;
per_frame_73=
per_frame_74=q9 = fastpace;
per_frame_75=q11 = prog3;
per_frame_76=
per_frame_77=q14 = trunner_;
per_frame_78=q15 = cos(trunner_);
per_frame_79=q16 = sin(trunner_)*2*((ran1>=0.5)-0.5);
per_frame_80=
per_frame_81=n = 0; loop (2000, gmegabuf(n+5000) = megabuf(n); n += 1);
per_frame_82=q32 = aspecty;
per_frame_83=//--------------------------------------------------------
per_frame_84=change = is_beat1 && (prog1%32 == 0);
per_frame_85=
per_frame_86=ran1 = if (change, rand (100)/100, ran1);
per_frame_87=ran2 = if (change, rand (100)/100, ran2);
per_frame_88=ran3 = if (change, rand (100)/100, ran3);
per_frame_89=ran4 = if (change, rand (100) > 50, ran4);
per_frame_90=ran1_ = ran1_ + max(min(ran1-ran1_,0.02),-0.02)*dt*16;
per_frame_91=ran2_ = ran2_ + max(min(ran2-ran2_,0.02),-0.02)*dt*16;
per_frame_92=ran3_ = ran3_ + max(min(ran3-ran3_,0.02),-0.02)*dt*16;
per_frame_93=ran4_ = ran4_ + max(min(ran4-ran4_,0.1),-0.1)*dt*8;
per_frame_94=
per_frame_95=q20 = ran1_;
per_frame_96=q21 = ran2_;
per_frame_97=q22 = ran3_;
per_frame_98=q23 = ran4_;
per_frame_99=scale = sqrt (certain/4);
per_frame_100=q25 = q15*q16* min (4, num_res / (maxind+1))*0.3* (ran2_-0.5) * scale;
per_frame_101=q26 = -q25;
per_frame_102=q25 += (ran3_-0.5)*q15*0.1*scale;
per_frame_103=q26 += (ran1_-0.5)*q16*0.1*scale;
per_frame_104=
per_frame_105=
per_frame_106=num_shapes = 128;
per_frame_107=recsize    = 12;
per_frame_108=
per_frame_109=n = 0;
per_frame_110=loop (num_shapes,
per_frame_111=  k1 = (n/recsize/num_shapes-0.5);
per_frame_112=  k2 = k1*3.1416*2;
per_frame_113=  x = sin(k2*1)/2;
per_frame_114=  y = cos(k2*3)/2;
per_frame_115=
per_frame_116=  x = k1*1.5; y = 0;
per_frame_117=  m = n/recsize;
per_frame_118=   
per_frame_119= x = min (max (1.3*cos(k2),-1),1);
per_frame_120= y = min (max (1.3*sin(k2),-1),1);
per_frame_121=
per_frame_122=  gmegabuf (n)   = x * cos (trunner_) + y * sin (trunner_);
per_frame_123=  gmegabuf (n+1) = x * sin (trunner_) - y * cos (trunner_) ;
per_frame_124=  trel = trunner_/3.1416/2;
per_frame_125=  gmegabuf (n+2) = 32-(trel - int (trel))*32;
per_frame_126=//  gmegabuf (n+2) = tog1*5+2;;
per_frame_127=
per_frame_128=  k1 = n/recsize;
per_frame_129=//  gmegabuf (n)   = q15*(k1%16)/16 + q16/14;
per_frame_130=//  gmegabuf (n+1) = q16*(k1%8)/8 + q15/14;
per_frame_131=
per_frame_132=
per_frame_133=
per_frame_134=//  gmegabuf (n+2) = sin (n/recsize * 3.14/13+trunner*33)+1;
per_frame_135=  n += recsize;
per_frame_136=);
per_frame_137=
per_frame_138=monitor = q21*q22;
per_frame_139=
per_frame_140=q27 = q21*q22;
per_pixel_1=zoom = .99; rot = 0; warp = 0; dy = -0.00;  dx = 0.00;
per_pixel_2=
per_pixel_3=zoom = 1; dx = 0; dy = 0; 
warp_1=`#define sat saturate
warp_2=`sampler sampler_pw_noise_lq;
warp_3=`float3 color, mus;
warp_4=`float2 uv1, uv2, uv3;
warp_5=`float arg, arg2;
warp_6=`
warp_7=`float aTan2(float y, float x) {float angle;	 float abs_y = abs(y);
warp_8=`if (x >= 0) {float r = (x - abs_y) / (x + abs_y); angle = 1-r;} 
warp_9=`else {float r = (x + abs_y) / (abs_y - x); angle = 3-r; }	
warp_10=`angle = angle * .25;
warp_11=`return y < 0 ? -angle : angle;}
warp_12=`
warp_13=`
warp_14=`shader_body {
warp_15=`uv = (uv-0.5)*aspect.xy + 0.5 + (q21-0.5)/2;
warp_16=`float anz = 32;
warp_17=`
warp_18=`uv1  = mul ((uv-0.5),float2x2(q16,q15,-q15,q16)) + 0.5;
warp_19=`//uv1 = (uv1-0.5)*aspect.yx + 0.5;
warp_20=`uv1 = lerp (uv1,uv,q20);
warp_21=`
warp_22=`
warp_23=`//uv1 += float2 (sin(q14), cos (q14))*q21;
warp_24=`uv1 += float2 (q25,q26);
warp_25=`
warp_26=`uv3 = uv1;
warp_27=`uv2 = uv1-0.5;
warp_28=`uv1 = float2 (4*length(uv2),2*q20*aTan2 (abs(uv2.y+q21/4),abs(uv2.x+q22/4))).yx;
warp_29=`uv1 = lerp (uv1,uv3,q23);
warp_30=`
warp_31=`arg = 4*(sat(8*abs(uv1.y-0.5)) * sat(8*abs(uv1.x-0.5-(q15*.7)))) ;
warp_32=`//arg = 64*(abs(uv1.y-0.5));
warp_33=`
warp_34=`arg2 = pow (4/bass_att*length (cos((uv + float2((q7%16)/16,0))*3*3.1416)),2);
warp_35=`
warp_36=`//arg = arg2;
warp_37=`ret = 1 - pow(arg,1);
warp_38=`ret = exp (-arg*2);
warp_39=`
warp_40=`
warp_41=`
warp_42=`
warp_43=`ret *= 2*normalize(tex2D (sampler_noise_hq,(uv1+q14/32)/16));
warp_44=`//ret -= 0.8*GetPixel(uv);
warp_45=`
warp_46=`float3 ret0 = lerp(GetPixel(uv_orig),GetBlur1(uv_orig),0.4);
warp_47=`if (q20*q21 > 0.4) {ret = lerp (ret0,ret,q9);}
warp_48=`}
comp_1=`
comp_2=`shader_body {
comp_3=`
comp_4=`// uv = (uv-0.5)*aspect.yx + 0.5;
comp_5=`//uv = uv.yx;
comp_6=`//uv = 1- abs( frac((uv-.5)*1 * 0.5 ) * 2 - 1.0 ); // Eo.S. mirror code
comp_7=`
comp_8=`//uv = float2 (abs(uv.x-0.5), uv.y);
comp_9=`
comp_10=`ret = lerp (GetPixel(uv), GetBlur1(uv), 0.5);
comp_11=`//ret = max (GetPixel(uv),GetPixel(float2 (uv.x,1-uv.y)));;
comp_12=`
comp_13=`//ret = (ret)*lum(ret)*2;
comp_14=`ret *= 1.2;
comp_15=`}
comp_16=`
