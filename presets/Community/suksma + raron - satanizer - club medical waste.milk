[preset00]
fRating=3.000000
fGammaAdj=1.000000
fDecay=0
fVideoEchoZoom=1
fVideoEchoAlpha=0.000000
nVideoEchoOrientation=3
nWaveMode=1
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=0
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0;//0.002354
fWaveScale=0.2;//0.218587
fWaveSmoothing=0.0000
fWaveParam=0.000000
fModWaveAlphaStart=1.0000
fModWaveAlphaEnd=1.0000
fWarpAnimSpeed=1.000000
fWarpScale=1.0000
fZoomExponent=1.000000
fShader=0.000000
zoom=1.0
rot=0.000000
cx=0.500000
cy=0.500000
dx=0.000000
dy=0.000000
warp=0.000000
sx=1.000000
sy=1.000000
wave_r=1.000000
wave_g=0.000000
wave_b=0.650000
wave_x=0.500000
wave_y=0.500000
ob_size=0.500000
ob_r=0.010000
ob_g=0.000000
ob_b=0.000000
ob_a=0.000000
ib_size=0.260000
ib_r=0.250000
ib_g=0.250000
ib_b=0.250000
ib_a=0.000000
nMotionVectorsX=1.000000
nMotionVectorsY=1.000000
mv_dx=0.000000
mv_dy=0.000000
mv_l=0.900000
mv_r=1.000000
mv_g=1.000000
mv_b=1.000000
mv_a=0.000000

//range of y on screen in actuality isn't 0..1, at least on my screen, it's 0.13 to 0.87, not easy to work with
//myFreq\([r,l]\)\*90
//myFreq\1\*20
//pow(value2+1,2.1)
//pow(value\1\+1,2.1)


wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=1//0=wave,1=spectrum
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=1.000000
wavecode_0_smoothing=0.000000
wavecode_0_r=1.000000
wavecode_0_g=1.000000
wavecode_0_b=1.000000
wavecode_0_a=1.000000

wave_0_per_point1= freqLvl    = -10.4*pow(value1,1.81)/pow(value1,1.8)+10.2;
wave_0_per_point2= myAmp      = if(below(freqLvl,0.5),freqLvl,0.49);  
wave_0_per_point3= myFreq     = log10(log10(sample)+3)*1.05+0.37;//13.5*pow(sample,0.01)-12.645;
wave_0_per_point4= myAltFreq  = time*0.2+myFreq*04-0.8;
wave_0_per_point5= 
wave_0_per_point6= Pi         = 3.14159265359;
wave_0_per_point7= Pi23       = 2*Pi*0.33333333333;
wave_0_per_point8= fade       = value1*15*(1.1-myFreq);
wave_0_per_point9=
wave_0_per_point10= r         = (sin(myAltFreq       )+1)*0.5*fade;
wave_0_per_point11= g         = (sin(myAltFreq-1*Pi23)+1)*0.5*fade;
wave_0_per_point12= b         = (sin(myAltFreq-2*Pi23)+1)*0.5*fade;
wave_0_per_point13= x         = myAmp;
wave_0_per_point14= y         = myFreq;

wavecode_1_enabled=1
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=1
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=1
wavecode_1_scaling=1.000000
wavecode_1_smoothing=0.000000
wavecode_1_r=1.000000
wavecode_1_g=1.000000
wavecode_1_b=1.000000
wavecode_1_a=1.000000

wave_1_per_point1=  freqLvl   = 10.4*pow(value2,1.01)/value2-9.2;
wave_1_per_point2=  myAmp     = if(above(freqLvl,0.5),freqLvl,0.51);
wave_1_per_point3=  myFreq    = log10(log10(sample)+3)*1.05+0.37;
wave_1_per_point4=  myAltFreq = time*0.2+myFreq*04-0.8;
wave_1_per_point5=  
wave_1_per_point6=  Pi        = 3.14159265358;
wave_1_per_point7=  Pi23      = 2*Pi*0.33333333333;
wave_1_per_point8=  fade      = value2*15*(1.1-myFreq);
wave_1_per_point9=
wave_1_per_point10= r         = (sin(myAltFreq       )+1)*0.5*fade;
wave_1_per_point11= g         = (sin(myAltFreq-1*Pi23)+1)*0.5*fade;
wave_1_per_point12= b         = (sin(myAltFreq-2*Pi23)+1)*0.5*fade;
wave_1_per_point13= x         = myAmp;
wave_1_per_point14= y         = myFreq;  

wavecode_2_enabled=1
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=1//0=wave,1=spectrum
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=1
wavecode_2_scaling=1.000000
wavecode_2_smoothing=0.000000
wavecode_2_r=1.000000
wavecode_2_g=1.000000
wavecode_2_b=1.000000
wavecode_2_a=1.000000

wave_2_per_point1=  freqLvl   = -10.4*pow(value1,1.81)/pow(value1,1.8)+10.2;
wave_2_per_point2=  
wave_2_per_point3=  myFreq    = log10(log10(sample)+3)*1.05+0.37;
wave_2_per_point4=  myAltFreq = time*0.2+myFreq*04-0.8;
wave_2_per_point5=  Pi        = 3.14159265358;
wave_2_per_point6=  Pi23      = 2*Pi*0.33333333333;
wave_2_per_point7=  fade      = value1*15*(1.1-myFreq);
wave_2_per_point8=  r         = (sin(myAltFreq       )+1)*0.5*fade;
wave_2_per_point9=  g         = (sin(myAltFreq-1*Pi23)+1)*0.5*fade;
wave_2_per_point10= b         = (sin(myAltFreq-2*Pi23)+1)*0.5*fade;
wave_2_per_point11= x         = 10.4*pow(value1,1.81)/pow(value1,1.8)-9.7;
wave_2_per_point12= y         = myFreq;

wavecode_3_enabled=1
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=1
wavecode_3_scaling=1.000000
wavecode_3_smoothing=0.000000
wavecode_3_r=1.000000
wavecode_3_g=1.000000
wavecode_3_b=1.000000
wavecode_3_a=1.000000

wave_3_per_point1=  freqLvl   = 10.4*pow(value1,1.81)/pow(value2,1.8)-9.2;
wave_3_per_point2=  
wave_3_per_point3=  myFreq    = log10(log10(sample)+3)*1.05+0.37;
wave_3_per_point4=  myAltFreq = time*0.2+myFreq*04-0.8;
wave_3_per_point5=  Pi        = 3.14159265358;
wave_3_per_point6=  Pi23      = 2*Pi*0.33333333333;
wave_3_per_point7=  fade      = value2*15*(1.1-myFreq);
wave_3_per_point8=  r         = (sin(myAltFreq       )+1)*0.5*fade;
wave_3_per_point9=  g         = (sin(myAltFreq-1*Pi23)+1)*0.5*fade;
wave_3_per_point10= b         = (sin(myAltFreq-2*Pi23)+1)*0.5*fade;
wave_3_per_point11= x         = -10.4*pow(value2,1.81)/pow(value2,1.8)+10.7;
wave_3_per_point12= y         = myFreq;

//goals
  //rotate 90
    //pretty easy
  //linear -> log view - couldn't do this how i wanted, log10 just wouldn't work                              
    //probably didn't really think this all the way through, i found the pow solution to scale things, but it may be more inefficient
    //ok, i pushed through and ended up doing log10(log10) that seems to work for some reason, evens out the octaves nicely
  //color matching octaves (Bb = yellow) - find a formula for frequency to rgb - how to access specific freq / var
    //gave up, but left potential formulas in, it just wouldn't dither regularly for some reason, even though I was using my own custom var, myFreq/R, which was sort of log-ized
      //finally figured this out, worked like i thought it would, just had to think through a couple things
      //well, actually came close, but the lowest three octaves do weird things with the colors
        //everything above those octaves are like an evenly spaced ruler, but those bottom three are wacked
  //correlate brightness / line thickness / echo with amplitude
    //no easy way yet - at least in per-point code
  //get to lines closer to each other in the middle
    //done
  //gridded background that is precise in db / freq measurement
    //first got the scale from 20 to 20k
    //use perpoint code vars to control x and y
    //work on getting a log scale for y (freqs) so the more interesting information is the most prominant and reactivity is more obvious at lower freqs
    //unfortunately, this (grid) is impossible due to the fft probably, 
      //it returns such low values for low freq and such high values for higher freqs 
      //that when you make them equal, you also see tons of noise floor on the lows, 
      //so signal/noise ratio with low freq in this fft apparently sucks, 
      //too bad i can't insert a wavelet transform or something
      //maybe there's a kludgy way to implement arrays?  i'm too lazy anyway
  //figure out how to eliminate the bouncing occuring even when freq is steady
    //might be because of doubling up, wavecode_0_bSpectrum controls whether it's wav or spec, looks like _0_.._3_ could be doubling these up
    //tried commenting out wavecode_2..3 and this didn't change it, though their "enabled"s were set to zero, so i probably didn't matter
  //highs are exaggerated, lows tempered, even them out
    //i have one other idea to make it better, use y val to linearly skew the lows big and the highs not at all
      //didn't work, can't use sample or value1/2 to exaggerate a signal
  //involve a shader perhaps - if possible, add a unique shader for each frequency, zone them the same as octaves maybe
    //maybe later
  //thin out peaks if possible (probably the sample var)
    //it's actually kind of intuitive visually once you scrunch it to more of a log view to have the bass stuff be wide and the highs be thin, so i'm happy with that
  //tried to get the frame rate back up, but there is no way using 4 perpoint sections, wish there was 
  //a way to have the computer only calculate those expressions once, but no dice 
  //because they all use the perpoint vars sample and/or value[1,2]