MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=2
[preset00]
fRating=1.000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=6
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=1
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=4.100
fWaveScale=0.708
fWaveSmoothing=0.630
fWaveParam=1.000
fModWaveAlphaStart=0.710
fModWaveAlphaEnd=1.300
fWarpAnimSpeed=1.000
fWarpScale=1.000
fZoomExponent=1.00000
fShader=0.000
zoom=1.00000
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.00100
sx=1.00000
sy=1.00000
wave_r=0.650
wave_g=0.650
wave_b=0.650
wave_x=0.500
wave_y=0.500
ob_size=0.005
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=0.060
ib_size=0.500
ib_r=1.000
ib_g=1.000
ib_b=1.000
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=28.800
mv_dx=0.000
mv_dy=0.000
mv_l=2.000
mv_r=0.000
mv_g=0.000
mv_b=1.000
mv_a=0.600
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=0
wavecode_0_samples=72
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=0
wavecode_0_scaling=0.22480
wavecode_0_smoothing=0.50000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=1.000
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=0
shapecode_0_sides=4
shapecode_0_additive=1
shapecode_0_thickOutline=1
shapecode_0_textured=0
shapecode_0_num_inst=1
shapecode_0_x=0.000
shapecode_0_y=1.000
shapecode_0_rad=0.29878
shapecode_0_ang=0.00000
shapecode_0_tex_ang=6.28319
shapecode_0_tex_zoom=0.01739
shapecode_0_r=1.000
shapecode_0_g=0.000
shapecode_0_b=0.000
shapecode_0_a=1.000
shapecode_0_r2=0.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shapecode_1_enabled=0
shapecode_1_sides=4
shapecode_1_additive=0
shapecode_1_thickOutline=1
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.000
shapecode_1_y=0.000
shapecode_1_rad=22.47988
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=0.000
shapecode_1_g=0.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.000
shapecode_1_b2=1.000
shapecode_1_a2=0.000
shapecode_1_border_r=0.000
shapecode_1_border_g=0.000
shapecode_1_border_b=0.000
shapecode_1_border_a=0.000
shapecode_2_enabled=0
shapecode_2_sides=4
shapecode_2_additive=0
shapecode_2_thickOutline=1
shapecode_2_textured=1
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=2.18585
shapecode_2_ang=0.00000
shapecode_2_tex_ang=6.28319
shapecode_2_tex_zoom=100.00000
shapecode_2_r=1.000
shapecode_2_g=0.700
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=0.100
shapecode_2_g2=0.100
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.100
shapecode_3_enabled=1
shapecode_3_sides=50
shapecode_3_additive=0
shapecode_3_thickOutline=1
shapecode_3_textured=1
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.89260
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=2.63007
shapecode_3_r=1.000
shapecode_3_g=1.000
shapecode_3_b=1.000
shapecode_3_a=0.300
shapecode_3_r2=1.000
shapecode_3_g2=0.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=0.000
shapecode_3_border_g=0.000
shapecode_3_border_b=0.000
shapecode_3_border_a=0.000
per_frame_init_1=bass_x = 1;
per_frame_init_2=vtarget=4.000000;
per_frame_init_3=vnum = 4.000000;
per_frame_1=//virtual
per_frame_2=vnum_increment = 2/fps;
per_frame_3=vtarget = vtarget + if(above(bass*bass_att,4.5), if(below(vtarget,vnum+1),1,0),0);
per_frame_4=vnum = vnum + if(below(vnum,vtarget-vnum_increment*.5), vnum_increment,0);
per_frame_5=monitor = vnum;
per_frame_6=
per_frame_7=vang = vnum*3.14159265358979323*.25;
per_frame_8=q1=vang;
per_frame_9=q2 = vnum_increment;
per_frame_10=q3 = vnum;
per_frame_11=q4=vtarget;
per_frame_12=//vx = (x-.5)*cos(vang) - (y-.5)*sin(vang)+.5;
per_frame_13=//vy = (x-.5)*sin(vang) +(y-.5)*cos(vang)+.5;
per_frame_14=
per_frame_15=bass_x = max(bass_x*.7+max(bass_att-.9,0)*.3,0);    //decaying bass max
per_frame_16=wave_vx = ((frame%3-1)*bass_x* above(vnum,vtarget-vnum_increment*.5) +1)*wave_x;    //spreads flame
per_frame_17=wave_vy=wave_y;
per_frame_18=
per_frame_19=wave_x = -(wave_vx-.5)*cos(vang) + (wave_vy-.5)*sin(vang)+.5;
per_frame_20=wave_y = -(wave_vx-.5)*sin(vang) - (wave_vy-.5)*cos(vang)+.5;
per_frame_21=//end virtual
per_frame_22=wave_r = above(vnum,vtarget-vnum_increment*.5);
per_frame_23=//wave_g = below(bass*bass_att,3.5);
per_frame_24=decay = 3000000+57.75;                                      // Magic 'flame' decay (old hack for pre- v1.02(?))
per_frame_25=//wave_mystery = sin(time*.2)*.05+1;
per_frame_26=
per_frame_27=ob_a = max(sqr(sqr(sin(time*1)*.25+.25)),
per_frame_28=       if(below(vnum,vtarget-.1),.2,0));
per_frame_29=       // 'ad-lib decay' to black - no ugly artefacts
per_frame_30=// ^4 to get it up there quick -> min time with decay on.
per_frame_31=
per_frame_32=ob_a = ob_a*(1-bass_x);                         // just so we don't get rid of the wide impressive
per_frame_33=// flames so quickly
per_frame_34=
per_frame_35=//ob_a=0;
per_frame_36=//monitor = ob_a;
per_frame_37=
per_frame_38=//Other decays to try:
per_frame_39=//300000 +  42.53, 90.63, 43.00   These are all fairly similar, but all are stable (equiv to decay  0.990 -> 1 in terms of speed of fade)
per_frame_40=//3000000 + 57.75 <<<  =:-)
per_frame_41=
per_frame_42=decay_r = .99;
per_frame_43=decay_b = .8;
per_frame_44=decay_g = .95;
per_frame_45=
per_frame_46=
per_frame_47=// Telek - 09/11/2002
per_frame_48=// Modified by Telek for Milkdrop 1.05 beta 4 - 22/10/2005
per_frame_49=// (fixed decay by colour)
per_frame_50=
per_frame_51=// Telek Sterling (aka Rick)
per_frame_52=// http://www.livejournal.com/users/teleksterling
per_frame_53=// teleksterling@gmail.com
per_pixel_1=rot = below(q3, q4-q2*.5)*q2*.8*(1-0*(rad));
per_pixel_2=
per_pixel_3=//virtual axes
per_pixel_4=vang=q1;
per_pixel_5=vx = (x-.5)*cos(vang) - (y-.5)*sin(vang)+.5;
per_pixel_6=vy = (x-.5)*sin(vang) +(y-.5)*cos(vang)+.5;
per_pixel_7=vy=1-vy;
per_pixel_8=
per_pixel_9=dvy = (vx+.08*sin(int(rand(100))))*2%2*-.01-.005;
per_pixel_10=dvy = -.0025*((1-vy)*10+int(rand(5)));    //wobble, and faster at top - accelerating like real flames
per_pixel_11=
per_pixel_12=dvx = int(rand(20))*.0001*sin(int(rand(2))-.5);                       //flicker
per_pixel_13=dvx = dvx*sqr(vy);                                                                //dampens top
per_pixel_14=//dvx = dvx*(1-x/2);                                                        //slows sides
per_pixel_15=dvx = dvx*-.2*(int(rand(10))-5);                                         //random damper
per_pixel_16=dvx = dvx -(vx-.5)*.04*(.8-sqr(vy));                                 //drift towards centre
per_pixel_17=dvx = dvx + cos(sqr(vy-.5)*10-time*1.1)*sqr(1-(vy))*.01; //add flutter at top
per_pixel_18=
per_pixel_19=//de-virtualise
per_pixel_20=dx = dvx*cos(vang) - dvy*sin(vang);
per_pixel_21=dy = -dvx*sin(vang) - dvy*cos(vang);
per_pixel_22=
per_pixel_23=// Telek - 09/11/2002
per_pixel_24=// Modified by Telek for Milkdrop 1.05 beta 4 - 22/10/2005
per_pixel_25=// (fixed decay by colour)
per_pixel_26=
per_pixel_27=// Telek Sterling (aka Rick)
per_pixel_28=// http://www.livejournal.com/users/teleksterling
per_pixel_29=// teleksterling@gmail.com
warp_1=`float2 complex_mul(float2 factorA, float2 factorB){
warp_2=`   return float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
warp_3=`}
warp_4=`
warp_5=`float2 complex_pow(float2 base, int exponent){
warp_6=`   float2 exponentiation = float2(1,0);
warp_7=`   for(int i = 0; i<exponent; i++){
warp_8=`      exponentiation = complex_mul(base,exponentiation);
warp_9=`   }
warp_10=`   return exponentiation;
warp_11=`}
warp_12=`
warp_13=`float2 complex_square(float2 domain){
warp_14=`   return complex_mul(domain,domain);
warp_15=`}
warp_16=`
warp_17=`float2 complex_div(float2 numerator, float2 denominator){
warp_18=`   return float2( numerator.x*denominator.x + numerator.y*denominator.y,
warp_19=`                  numerator.y*denominator.x - numerator.x*denominator.y)/
warp_20=`          (denominator.x*denominator.x + denominator.y*denominator.y);
warp_21=`}
warp_22=`
warp_23=`float2 uv_aspect(float2 uvo, float2 uvm, float2 aspectr, float2 motion_scale){
warp_24=`   return 0.5 + (lerp(uvo,uvm,motion_scale)-0.5)*aspectr;
warp_25=`}
warp_26=`
warp_27=`float2 uv_scale(float2 domain, float2 center, float2 scale){
warp_28=`   return center + (domain-center)*scale;
warp_29=`}
warp_30=`
warp_31=`float2 uv_torus_mirror(float2 domain, float cutoff){
warp_32=`   return 0.5 + (1.0 - abs( frac( domain * 0.5 ) * 2 - 1.0 )-0.5)*cutoff;
warp_33=`}
warp_34=`
warp_35=`bool mask_rectangle(float2 domain, float2 position, float2 dimensions){
warp_36=`   return (domain.x>position.x-dimensions.x)*(domain.x<position.x+dimensions.x)*
warp_37=`          (domain.y>position.y-dimensions.y)*(domain.y<position.y+dimensions.y);
warp_38=`}
warp_39=`
warp_40=`bool mask_circle(float2 domain, float2 position, float radius){
warp_41=`   return length(domain-position)<radius;
warp_42=`}
warp_43=`
warp_44=`bool mask_spiral_logarithmic(float2 domain, float2 center, int fins, float thickness, float spiral_factor, float zoom){
warp_45=`   float2 c = domain - center;
warp_46=`   float rad_hq = length(c);
warp_47=`   float ang_hq = atan2(c.x,c.y);
warp_48=`
warp_49=`   return frac(fins*ang_hq*M_INV_PI_2 + spiral_factor*log(1/rad_hq)+zoom)<thickness;
warp_50=`}
warp_51=`
warp_52=`float figure_spiral_logarithmic(float2 domain, float2 center, int fins, float thickness, float spiral_factor, float zoom){
warp_53=`   float2 c = domain - center;
warp_54=`   float rad_hq = length(c);
warp_55=`   float ang_hq = atan2(c.x,c.y);
warp_56=`
warp_57=`   return saturate(1-uv_torus_mirror(fins*ang_hq*M_INV_PI_2*2 + spiral_factor*log(1/rad_hq)+zoom,0.999)/thickness);
warp_58=`}
warp_59=`
warp_60=`float figure_circle(float2 domain, float2 position, float radius){
warp_61=`   return saturate(1-length(domain-position)/radius);
warp_62=`}
warp_63=`
warp_64=`float figure_orb_of_3(float2 domain){
warp_65=`   float2 help_uv = domain;
warp_66=`   help_uv = uv_scale(help_uv, 0.5, 4);
warp_67=`   help_uv = 0.5 + complex_pow(help_uv-0.5,3);
warp_68=`   help_uv = uv_scale(help_uv, 0.5, 1);
warp_69=`
warp_70=`   return figure_circle(help_uv,float2(0,0.5),0.6);
warp_71=`}
warp_72=`
warp_73=`float figure_orb_of_spiral_of_3(float2 domain){
warp_74=`   float2 help_uv = domain;
warp_75=`   help_uv = uv_scale(help_uv, 0.5, 0.33);
warp_76=`   help_uv = 0.5 + complex_pow(help_uv-0.5,3);
warp_77=`   help_uv = uv_scale(help_uv, 0.5, 640);
warp_78=`
warp_79=`   return figure_spiral_logarithmic(help_uv, float2(0.4,0.5), -4, 1, 2, -time*4);
warp_80=`}
warp_81=`
warp_82=`shader_body
warp_83=`{
warp_84=`float2 base_uv = uv_aspect(uv_orig, uv, aspect.wz, 0);
warp_85=`ret = mask_rectangle(base_uv,0.5,0.1);
warp_86=`ret = mask_spiral_logarithmic(base_uv, 0.5, -1, 0.5, 0.4, time);
warp_87=`float2 scaled_uv = uv_scale(base_uv, 0.5, 1);
warp_88=`float2 mirrored_uv = uv_torus_mirror(scaled_uv,1);
warp_89=`ret = mask_circle(mirrored_uv,0.5,0.1);
warp_90=`ret = mask_spiral_logarithmic(base_uv, 0.5, -1, 0.5, 0.4, time);
warp_91=`//ret = figure_circle(mirrored_uv,float2(-0.5,0.5),1.2);
warp_92=`ret = figure_orb_of_3(base_uv);
warp_93=`ret = figure_orb_of_spiral_of_3(base_uv);
warp_94=`//ret = figure_spiral_logarithmic(base_uv, 0.5, 4, 0.75, 2, time*2);
warp_95=`
warp_96=`}
comp_1=`shader_body
comp_2=`{
comp_3=`float2 uv1 = uv;
comp_4=`float2 d = texsize.zw*3;
comp_5=`float3 dx = GetBlur1(uv1 + float2(1,0)*d) - GetBlur1(uv1 - float2(1,0)*d);
comp_6=`float3 dy = GetBlur1(uv1 + float2(0,1)*d) - GetBlur1(uv1 - float2(0,1)*d);
comp_7=`uv1 = uv+float2(dx.x,dy.x)*texsize.zw*32;
comp_8=`     ret = GetPixel(uv1).x*float3(1,0,0)*0.5;
comp_9=`
comp_10=`ret.x += (+dx.x - dy.x)*0.4;
comp_11=`ret = pow(ret.x,0.8)*float3(1.2,0.15,0);
comp_12=`ret = lerp(ret,float3(1,1,1),GetBlur2(uv - float2(dx.x,dy.x)*texsize.zw*128).z*0.6);
comp_13=`
comp_14=`ret = lerp(ret,float3(1,1.1,1.2),GetPixel(uv1).z);
comp_15=`
comp_16=`ret = lerp(ret,float3(0.2,0,0.1),GetBlur1(uv - float2(dx.y,dy.y)*texsize.zw*16 - float2(dx.x,dy.x)*texsize.zw*32 ).y*6);
comp_17=`//ret = GetPixel(uv);
comp_18=`}
