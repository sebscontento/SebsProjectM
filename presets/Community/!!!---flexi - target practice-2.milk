MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=2.000
fGammaAdj=1.000
fDecay=0.995
fVideoEchoZoom=1.007
fVideoEchoAlpha=0.000
nVideoEchoOrientation=3
nWaveMode=0
bAdditiveWaves=0
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=0
bMaximizeWaveColor=1
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=1.000
fWaveSmoothing=0.750
fWaveParam=0.000
fModWaveAlphaStart=0.750
fModWaveAlphaEnd=0.950
fWarpAnimSpeed=0.626
fWarpScale=1.331
fZoomExponent=1.00001
fShader=0.000
zoom=0.99951
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.08925
sx=1.00000
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.000
ib_r=0.000
ib_g=0.250
ib_b=1.000
ib_a=1.000
nMotionVectorsX=12.000
nMotionVectorsY=9.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.900
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=0
wavecode_0_samples=395
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=0
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=0.150
wavecode_0_g=0.150
wavecode_0_b=0.150
wavecode_0_a=0.000
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=0.01000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=0.000
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=1
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=0.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=1
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=0.000
shapecode_0_enabled=1
shapecode_0_sides=6
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.17809
shapecode_0_ang=0.26000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=0.39711
shapecode_0_r=1.000
shapecode_0_g=0.700
shapecode_0_b=0.600
shapecode_0_a=1.000
shapecode_0_r2=0.400
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=1.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shape_0_per_frame1=x=.11+.22*rand(5);
shape_0_per_frame2=y=.1+.16*(2*time%6);
shape_0_per_frame3=
shape_0_per_frame4=b=.6+.3*q3;
shape_0_per_frame5=g=.7+.2*q3;
shape_0_per_frame6=r= .7;
shape_0_per_frame7=
shape_0_per_frame8=g2=.3*g;
shape_0_per_frame9=r2=.3*r;
shape_0_per_frame10=b2=.3*b;
shapecode_1_enabled=1
shapecode_1_sides=6
shapecode_1_additive=1
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.17809
shapecode_1_ang=0.26000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=0.99999
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=0.400
shapecode_1_a=0.500
shapecode_1_r2=0.200
shapecode_1_g2=0.000
shapecode_1_b2=0.300
shapecode_1_a2=0.600
shapecode_1_border_r=0.000
shapecode_1_border_g=0.000
shapecode_1_border_b=0.000
shapecode_1_border_a=0.000
shape_1_per_frame1=x=.11+.22*rand(5);
shape_1_per_frame2=y=.1+.16*(2*time%6);
shape_1_per_frame3=
shape_1_per_frame4=b=.6+.3*q3;
shape_1_per_frame5=g=.7+.2*q3;
shape_1_per_frame6=r= .7;
shape_1_per_frame7=
shape_1_per_frame8=g2=.3*g;
shape_1_per_frame9=r2=.3*r;
shape_1_per_frame10=b2=.3*b;
shapecode_2_enabled=1
shapecode_2_sides=6
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=1
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.17633
shapecode_2_ang=0.26000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.19615
shapecode_2_r=1.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=1.000
shapecode_2_a2=0.200
shapecode_2_border_r=0.000
shapecode_2_border_g=0.000
shapecode_2_border_b=0.000
shapecode_2_border_a=0.200
shape_2_per_frame1=x=.22*rand(6);
shape_2_per_frame2=y=.18+.16*(2*time%5);
shape_2_per_frame3=
shape_2_per_frame4=g=1.5*q3;
shape_2_per_frame5=r=1.3*q4;
shape_2_per_frame6=b=1.7*q5;
shape_2_per_frame7=
shape_2_per_frame8=tex_ang=-q1;
shape_2_per_frame9=tex_zoom=2+sin(q1);
shapecode_3_enabled=1
shapecode_3_sides=6
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=1
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.16284
shapecode_3_ang=0.26000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=1.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.800
shapecode_3_g2=0.800
shapecode_3_b2=0.800
shapecode_3_a2=0.200
shapecode_3_border_r=0.000
shapecode_3_border_g=0.000
shapecode_3_border_b=0.000
shapecode_3_border_a=0.200
shape_3_per_frame1=x=.11+.22*rand(5);
shape_3_per_frame2=y=.1+.16*(2*time%6);
shape_3_per_frame3=
shape_3_per_frame4=r=.3*q3;
shape_3_per_frame5=b=.2*q2;
shape_3_per_frame6=g=.1*q1;
shape_3_per_frame7=
shape_3_per_frame8=tex_ang=q1;
shape_3_per_frame9=tex_zoom=2+1.2*sin(1.5*q1);
per_frame_init_1=x1 = 0.5;
per_frame_init_2=y1 = 0.6;
per_frame_init_3=
per_frame_init_4=x2 = 0.5;
per_frame_init_5=y2 = 0.4;
per_frame_init_6=
per_frame_init_7=x3 = 0.5;
per_frame_init_8=y3 = 0.2;
per_frame_init_9=
per_frame_init_10=vr1 = 0.0001;
per_frame_init_11=vr2 = 0.0;
per_frame_init_12=vr3 = 0.0;
per_frame_init_13=
per_frame_init_14=vx1 = 0;
per_frame_init_15=vx2 = 0;
per_frame_init_16=vx3 = 0;
per_frame_1=zoom = 1;
per_frame_2=warp = 0;
per_frame_3=wave_a = 0;
per_frame_4=
per_frame_5=// impuls transmission with an angular momentum factor, 3 bodies
per_frame_6=// code by Flexi
per_frame_7=// good luck with tuning these values to a fine dynamic behavior ;-)
per_frame_8=
per_frame_9=   r = 0.11+ (bass_att+treb_att)*0.005; // the object's radius
per_frame_10=
per_frame_11=   gravity = 0.01;
per_frame_12=
per_frame_13=   bouncedampening = 0.94;  // This is where kinetic energy is taken from the system.
per_frame_14=                            // Be careful with values close to 1.0
per_frame_15=
per_frame_16=   bounceimpact = 0.17;     // When an object hits one border, it slightly penetrates it.
per_frame_17=                            // The impact value determines how strong this depth is taken as resulting impuls.
per_frame_18=                            // This is where kinetic energy possibly is added to the system depent on the increase in size.
per_frame_19=
per_frame_20=// don't change below
per_frame_21=
per_frame_22=// bouncing off borders (the first rotating object)
per_frame_23=
per_frame_24=   y1  = y1+vy1; // adding velocity vector to position
per_frame_25=   x1  = x1+vx1;
per_frame_26=
per_frame_27=   vr  = sin(vr1)*r; // tangential velocity
per_frame_28=bounce = below(y1,r-(aspectx-1)*0.5); // hit floor?
per_frame_29=   vy1 = if(bounce, abs(vy1)*bouncedampening + (r-y1-(aspectx-1)*0.5)*bounceimpact, vy1-gravity/fps);
per_frame_30=   vx1 = if(bounce, vx1 + (vr-vx1)*bounceimpact, vx1);
per_frame_31=   vr  = if(bounce, vr + (vx1-vr)*0.85 , vr);
per_frame_32=bounce = above(x1,1-r+(aspecty-1)*0.5); // hit right border?
per_frame_33=   vx1 = if(bounce, - abs(vx1)*bouncedampening + (1-r-x1+(aspecty-1)*0.5)*bounceimpact, vx1);
per_frame_34=   vy1 = if(bounce, vy1 + (vr-vy1)*bounceimpact, vy1);
per_frame_35=   vr  = if(bounce, vr + (vy1-vr)*0.85 , vr);
per_frame_36=bounce = below(x1,r-(aspecty-1)*0.5); // hit left border?
per_frame_37=   vx1 = if(bounce, abs(vx1)*bouncedampening + (r-x1-(aspecty-1)*0.5)*bounceimpact, vx1);
per_frame_38=   vy1 = if(bounce, vy1 + (-vr-vy1)*bounceimpact, vy1);
per_frame_39=   vr  = if(bounce, vr - (vy1+vr)*0.85 , vr);
per_frame_40=   vr1 = asin(vr/r); // angular velocity of the surface
per_frame_41=
per_frame_42=// bouncing off borders (the second rotating object)
per_frame_43=vr=sin(vr2)*r;bounce=below(y2,r-(aspectx-1)*0.5);y2=y2+vy2;vy2=if(bounce,abs(vy2)*bouncedampening+(r-y2-(aspectx-1)*0.5)
per_frame_44=*bounceimpact,vy2-gravity/fps);vx2=if(bounce,vx2+(vr-vx2)*bounceimpact,vx2);vr=if(bounce,vr+(vx2-vr)*0.85,vr);
per_frame_45=bounce=above(x2,1-r+(aspecty-1)*0.5);vx2=if(bounce,-abs(vx2)*bouncedampening+(1-r-x2+(aspecty-1)*0.5)*bounceimpact,vx2);
per_frame_46=vy2=if(bounce,vy2+(vr-vy2)*bounceimpact,vy2);vr=if(bounce,vr+(vy2-vr)*0.85,vr);bounce=below(x2,r-(aspecty-1)*0.5);x2=x2+vx2;
per_frame_47=vx2=if(bounce,abs(vx2)*bouncedampening+(r-x2-(aspecty-1)*0.5)*bounceimpact,vx2);vy2=if(bounce,vy2+(-vr-vy2)*bounceimpact,vy2);
per_frame_48=vr=if(bounce,vr-(vy2+vr)*0.85,vr);vr2=asin(vr/r);
per_frame_49=
per_frame_50=// bouncing off borders (the third rotating object)
per_frame_51=vr=sin(vr3)*r;bounce=below(y3,r-(aspectx-1)*0.5);y3=y3+vy3;vy3=if(bounce,abs(vy3)*bouncedampening+(r-y3-(aspectx-1)*0.5)
per_frame_52=*bounceimpact,vy3-gravity/fps);vx3=if(bounce,vx3+(vr-vx3)*bounceimpact,vx3);vr=if(bounce,vr+(vx3-vr)*0.85,vr);
per_frame_53=bounce=above(x3,1-r+(aspecty-1)*0.5);vx3=if(bounce,-abs(vx3)*bouncedampening+(1-r-x3+(aspecty-1)*0.5)*bounceimpact,vx3);
per_frame_54=vy3=if(bounce,vy3+(vr-vy3)*bounceimpact,vy3);vr=if(bounce,vr+(vy3-vr)*0.85,vr);bounce=below(x3,r-(aspecty-1)*0.5);x3=x3+vx3;
per_frame_55=vx3=if(bounce,abs(vx3)*bouncedampening+(r-x3-(aspecty-1)*0.5)*bounceimpact,vx3);vy3=if(bounce,vy3+(-vr-vy3)*bounceimpact,vy3);
per_frame_56=vr=if(bounce,vr-(vy3+vr)*0.85,vr);vr3=asin(vr/r);
per_frame_57=
per_frame_58=// bouncing of object1 with object2
per_frame_59=
per_frame_60=bounce = below( sqrt( sqr(x1+vx1-x2-vx2) + sqr(y1+vy1-y2-vy2)), 2*r); // is distance < diameter ?
per_frame_61=bounce = bounce*below(sqrt( sqr(x1+vx1-x2-vx2) + sqr(y1+vy1-y2-vy2)),sqrt( sqr(x1-x2) + sqr(y1-y2))); // detect only if objects
per_frame_62=                                                                                                      // move towards each other
per_frame_63=ref_ang = atan2(x2-x1,y2-y1)+asin(1); // angle of the common tangent
per_frame_64=v1 = sqrt(vx1*vx1+vy1*vy1); // absolute velocity
per_frame_65=v2 = sqrt(vx2*vx2+vy2*vy2);
per_frame_66=w1 = atan2(vx1,vy1); // absolute motion angle
per_frame_67=w2 = atan2(vx2,vy2);
per_frame_68=vr = sin(vr1)*r; // angular velocity of the surface
per_frame_69=v2r= sin(vr2)*r;
per_frame_70=// in case of a bounce, the velocity is split into the horizontal and vertical part relative to the common tangent,
per_frame_71=// then the vertical aspects get swapped.
per_frame_72=// a bounce goes 90% into impuls transmission and 10% angular momentum transmission.
per_frame_73=// these values make quite a plausible impression, but in fact this has pretty little to do with physical correctness ;)
per_frame_74=vx1 = if(bounce,sin(ref_ang)*v1*cos(w1-ref_ang) + ((vr-v2r)-sin(ref_ang)*v1*cos(w1-ref_ang))*0.1
per_frame_75=              + sin(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)), vx1);
per_frame_76=vy1 = if(bounce,cos(ref_ang)*v1*cos(w1-ref_ang) + ((vr-v2r)-cos(ref_ang)*v1*cos(w1-ref_ang))*0.1
per_frame_77=              + cos(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)), vy1);
per_frame_78=vx2 = if(bounce,sin(ref_ang)*v2*cos(w2-ref_ang) + ((v2r-vr)-sin(ref_ang)*v2*cos(w2-ref_ang))*0.1
per_frame_79=              + sin(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)), vx2);
per_frame_80=vy2 = if(bounce,cos(ref_ang)*v2*cos(w2-ref_ang) + ((v2r-vr)-cos(ref_ang)*v2*cos(w2-ref_ang))*0.1
per_frame_81=              + cos(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)), vy2);
per_frame_82=vr = if(bounce, vr + (cos(w1-ref_ang)*(v1-v2)-vr)*0.9 , vr);
per_frame_83=vr1 = asin(vr/r);
per_frame_84=v2r = if(bounce, v2r + (cos(w2-ref_ang)*(v2-v1)-v2r)*0.9 , v2r);
per_frame_85=vr2 = asin(v2r/r);
per_frame_86=
per_frame_87=// bouncing of object1 with object3
per_frame_88=
per_frame_89=
per_frame_90=bounce=below(sqrt(sqr(x1+vx1-x3-vx3)+sqr(y1+vy1-y3-vy3)),2*r);bounce=bounce*below(sqrt(sqr(x1+vx1-x3-
per_frame_91=vx3)+sqr(y1+vy1-y3-vy3)),sqrt(sqr(x1-x3)+sqr(y1-y3)));ref_ang=atan2(x3-x1,y3-y1)+asin(1);v1=sqrt(vx1*vx1
per_frame_92=+vy1*vy1);v2=sqrt(vx3*vx3+vy3*vy3);w1=atan2(vx1,vy1);w2=atan2(vx3,vy3);vr=sin(vr1)*r;v2r=sin(vr3)*r;vx1
per_frame_93==if(bounce,sin(ref_ang)*v1*cos(w1-ref_ang)+((vr-v2r)-sin(ref_ang)*v1*cos(w1-ref_ang))*0.1+sin(ref_ang+
per_frame_94=asin(1))*v2*cos(w2-ref_ang-asin(1)),vx1);vy1=if(bounce,cos(ref_ang)*v1*cos(w1-ref_ang)+((vr-v2r)-cos
per_frame_95=(ref_ang)*v1*cos(w1-ref_ang))*0.1+cos(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)),vy1);vx3=if(bounce,sin
per_frame_96=(ref_ang)*v2*cos(w2-ref_ang)+((v2r-vr)-sin(ref_ang)*v2*cos(w2-ref_ang))*0.1+sin(ref_ang+asin(1))*v1*cos
per_frame_97=(w1-ref_ang-asin(1)),vx3);vy3=if(bounce,cos(ref_ang)*v2*cos(w2-ref_ang)+((v2r-vr)-cos(ref_ang)*v2*cos(w2
per_frame_98=-ref_ang))*0.1+cos(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)),vy3);vr=if(bounce,vr+(cos(w1-ref_ang)*(v1
per_frame_99=-v2)-vr)*0.9,vr);vr1=asin(vr/r);v2r=if(bounce,v2r+(cos(w2-ref_ang)*(v2-v1)-v2r)*0.9,v2r);vr3=asin(v2r/r);
per_frame_100=
per_frame_101=// bouncing of object3 with object2
per_frame_102=bounce=below(sqrt(sqr(x3+vx3-x2-vx2)+sqr(y3+vy3-y2-vy2)),2*r);bounce=bounce*below(sqrt(sqr(x2+vx2-x3-
per_frame_103=vx3)+sqr(y2+vy2-y3-vy3)),sqrt(sqr(x2-x3)+sqr(y2-y3)));ref_ang=atan2(x2-x3,y2-y3)+asin(1);v1=sqrt(vx3*vx3
per_frame_104=+vy3*vy3);v2=sqrt(vx2*vx2+vy2*vy2);w1=atan2(vx3,vy3);w2=atan2(vx2,vy2);vr=sin(vr3)*r;v2r=sin(vr2)*r;vx3
per_frame_105==if(bounce,sin(ref_ang)*v1*cos(w1-ref_ang)+((vr-v2r)-sin(ref_ang)*v1*cos(w1-ref_ang))*0.1+sin(ref_ang+
per_frame_106=asin(1))*v2*cos(w2-ref_ang-asin(1)),vx3);vy3=if(bounce,cos(ref_ang)*v1*cos(w1-ref_ang)+((vr-v2r)-cos
per_frame_107=(ref_ang)*v1*cos(w1-ref_ang))*0.1+cos(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)),vy3);vx2=if(bounce,sin
per_frame_108=(ref_ang)*v2*cos(w2-ref_ang)+((v2r-vr)-sin(ref_ang)*v2*cos(w2-ref_ang))*0.1+sin(ref_ang+asin(1))*v1*cos
per_frame_109=(w1-ref_ang-asin(1)),vx2);vy2=if(bounce,cos(ref_ang)*v2*cos(w2-ref_ang)+((v2r-vr)-cos(ref_ang)*v2*cos(w2
per_frame_110=-ref_ang))*0.1+cos(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)),vy2);vr=if(bounce,vr+(cos(w1-ref_ang)*(v1
per_frame_111=-v2)-vr)*0.9,vr);vr3=asin(vr/r);v2r=if(bounce,v2r+(cos(w2-ref_ang)*(v2-v1)-v2r)*0.9,v2r);vr2=asin(v2r/r);
per_frame_112=
per_frame_113=
per_frame_114=q1 = aspectx;
per_frame_115=q2 = aspecty;
per_frame_116=q3 = r*2;
per_frame_117=
per_frame_118=q4  = x1;  q5 = y1;  q6 = vr1;
per_frame_119=q7  = x2;  q8 = y2;  q9 = vr2;
per_frame_120=q10 = x3; q11 = y3; q12 = vr3;
per_frame_121=q13 = atan2( (x1+x2+x3)/3 - 0.5, (y1+y2+y3)/3-0.5);
per_frame_122=q14 = sigmoid(sqrt( sqr((x1+x2+x3)/3 - 0.5) + sqr((y1+y2+y3)/3-0.5) ),2)*0.2;
per_frame_123=q15 = 1/max(aspectx,aspecty);
per_pixel_1=c = 42; // impacts the "sharpness" of the sigmoid filter function
per_pixel_2=s = 0.5; // strength of the rotation
per_pixel_3=d = q3*0.6; // radius of the sigmoid filter function
per_pixel_4=
per_pixel_5=//
per_pixel_6=cx1 = 0.5 + (q4-0.5)*q15;
per_pixel_7=cy1 = 0.5 - (q5-0.5)*q15;
per_pixel_8=d1 = sqrt( sqr(x-cx1) + sqr(y-cy1));
per_pixel_9=s1 = sigmoid(d-d1,c)*s;
per_pixel_10=rx1 = -q6*sin(y-cy1)*s1;
per_pixel_11=ry1 = q6*sin(x-cx1)*s1;
per_pixel_12=
per_pixel_13=cx2 = 0.5 + (q7-0.5)*q15;
per_pixel_14=cy2 = 0.5 - (q8-0.5)*q15;
per_pixel_15=d2 = sqrt( sqr(x-cx2) + sqr(y-cy2));
per_pixel_16=s2 = sigmoid(d-d2,c)*s;
per_pixel_17=rx2 = -q9*sin(y-cy2)*s2;
per_pixel_18=ry2 = q9*sin(x-cx2)*s2;
per_pixel_19=
per_pixel_20=cx3 = 0.5 + (q10-0.5)*q15;
per_pixel_21=cy3 = 0.5 - (q11-0.5)*q15;
per_pixel_22=d3 = sqrt( sqr(x-cx3) + sqr(y-cy3));
per_pixel_23=s3 = sigmoid(0.12-d3,c)*s;
per_pixel_24=rx3 = -q12*sin(y-cy3)*s3;
per_pixel_25=ry3 = q12*sin(x-cx3)*s3;
per_pixel_26=
per_pixel_27=
per_pixel_28=
per_pixel_29=dx = rx1 + rx2 + rx3;
per_pixel_30=dy = ry1 + ry2 + ry3;
per_pixel_31=
warp_1=`shader_body
warp_2=`{
warp_3=`
warp_4=`    float2 d = texsize.zw*3;
warp_5=`    float3 dx = 2*GetBlur1(frac(uv+float2(1,0)*d))-2*GetBlur1(frac(uv-float2(1,0)*d));
warp_6=`    float3 dy = 2*GetBlur1(frac(uv+float2(0,1)*d))-2*GetBlur1(frac(uv-float2(0,1)*d));
warp_7=`    float3 b1 = GetBlur1(uv) - 0;
warp_8=`    d *= -1;
warp_9=`    float d2 = d*1.5;
warp_10=`    float1 c1 = 0.042;
warp_11=`    float1 c2 = -0.008;
warp_12=`
warp_13=`
warp_14=`    float2 my_uv = uv - float2(dx.y,dy.y)*d*0.5 - float2(dx.x,dy.x)*d2;
warp_15=`    ret.y = tex2D( sampler_fc_main, my_uv-floor(my_uv)).y;
warp_16=`    ret.y += (ret.y - b1.y)*c1 + c2;
warp_17=`
warp_18=`
warp_19=`    my_uv = uv - float2(dx.x,dy.x)*d*0.5 - float2(dx.z,dy.z)*d2;
warp_20=`    ret.x = tex2D( sampler_fc_main, my_uv-floor(my_uv)).x;
warp_21=`    ret.x += (ret.x - b1.x)*c1 + c2;
warp_22=`
warp_23=`
warp_24=`    my_uv = uv - float2(dx.z,dy.z)*d*0.5 - float2(dx.y,dy.y)*d2;
warp_25=`    ret.z = tex2D( sampler_fc_main, my_uv-floor(my_uv)).z;
warp_26=`    ret.z += (ret.z - b1.z)*c1 + c2;
warp_27=`//ret = 0;
warp_28=`
warp_29=`}
comp_1=`shader_body
comp_2=`{
comp_3=`float2 d = texsize.zw*3;
comp_4=`float3 dx = (2*GetBlur1(uv + float2(1,0)*d) - 2*GetBlur1(uv + float2(-1,0)*d))*0.5;
comp_5=`float3 dy = (2*GetBlur1(uv + float2(0,1)*d) - 2*GetBlur1(uv + float2(0,-1)*d))*0.5;
comp_6=`float2 uv1 = frac(uv - float2(dx.y,dy.y)*1 - float2(dx.z,dy.z)*rad*2);
comp_7=`float2 uv_swimmer =frac(0.5 + (uv-0.5)+float2(q19,q20)*float2(-1,1));
comp_8=`dx = (2*GetBlur1(uv_swimmer + float2(1,0)*d) - 2*GetBlur1(uv_swimmer + float2(-1,0)*d))*0.5;
comp_9=`dy = (2*GetBlur1(uv_swimmer + float2(0,1)*d) - 2*GetBlur1(uv_swimmer + float2(0,-1)*d))*0.5;
comp_10=`uv1 -= float2(dx.x,dy.x)*4;
comp_11=`
comp_12=`ret = lerp(ret,1,GetBlur2(uv1).y);
comp_13=`ret = lerp(ret,float3(1,0.5,0),GetPixel(uv).y);
comp_14=`ret = lerp(ret,float3(1,1,1),GetPixel(uv-float2(dx.x,dy.x)*0.2).z*saturate(1-rad*1.5));
comp_15=`
comp_16=`
comp_17=`
comp_18=`ret = lerp(ret, 1, GetBlur1(uv_swimmer+float2(dx.x,dy.x)*0.3).x);
comp_19=`ret = lerp(ret,float3(0.5,0,1),GetPixel(uv_swimmer).x);
comp_20=`}
