MILKDROP_PRESET_VERSION=201
PSVERSION=2
PSVERSION_WARP=2
PSVERSION_COMP=2
[preset00]
fRating=4.000
fGammaAdj=1.000
fDecay=1.000
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.000
nVideoEchoOrientation=1
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=4.100
fWaveScale=1.286
fWaveSmoothing=0.630
fWaveParam=0.000
fModWaveAlphaStart=0.710
fModWaveAlphaEnd=1.300
fWarpAnimSpeed=1.000
fWarpScale=1.331
fZoomExponent=1.00000
fShader=0.000
zoom=0.99951
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=1.00000
sy=1.00000
wave_r=0.650
wave_g=0.650
wave_b=0.650
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.010
ob_g=0.000
ob_b=0.000
ob_a=0.000
ib_size=0.000
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=12.000
nMotionVectorsY=9.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.900
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=0
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.00000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=1.000
wave_0_per_frame1=vol = (bass_att + mid_att + treb_att)*.333333;
wave_0_per_frame2=vol_avg = .1*(vol_avg*9 + vol);
wave_0_per_frame3=vg = vol_avg*.1;
wave_0_per_frame4=//t1 = if(above(vg,1.8),1.8,vg);
wave_0_per_frame5=t1=time*.3;
wave_0_per_frame6=t5=time*.2;
wave_0_per_frame7=//t2=sin(time)*1.5+2;
wave_0_per_frame8=//t3=.25;
wave_0_per_frame9=//t2=2;
wave_0_per_frame10=t4=0;
wave_0_per_frame11=a=1;
wave_0_per_frame12=t2=2.9;
wave_0_per_point1=tm=if(above(yp,0.98),t1,tm);
wave_0_per_point2=tm2=if(above(yp,0.98),t5,tm2);
wave_0_per_point3=ex=if(above(yp,0.98),t2,ex);
wave_0_per_point4=//ex=2;
wave_0_per_point5=sp=.01;
wave_0_per_point6=yp=if(above(xp,0.9998),yp+sp,yp);
wave_0_per_point7=xp=if(above(xp,0.9998),0,xp+sp);
wave_0_per_point8=yp=if(above(yp,0.9998),0,yp);
wave_0_per_point9=x=((xp*ex)*.1+.5)-(.05*ex)-t3;
wave_0_per_point10=y=((yp*ex)*.1+.5)-(.05*ex)-t4;
wave_0_per_point11=
wave_0_per_point12=//g=sin(xp*yp*1.506+tm);
wave_0_per_point13=//b=sin(xp*yp*3.142+tm);
wave_0_per_point14=//r=cos(xp*yp*1.506+tm);
wave_0_per_point15=
wave_0_per_point16=g=sin(xp*3.14+tm)*sin(yp*3.14+tm2);
wave_0_per_point17=b=sin(xp*3.14+tm2)*sin(yp*6.28+tm);
wave_0_per_point18=r=1-b;
wave_0_per_point19=
wave_0_per_point20=
wave_0_per_point21=
wave_0_per_point22=
wave_0_per_point23=
wave_0_per_point24=
wave_0_per_point25=
wavecode_1_enabled=0
wavecode_1_samples=102
wavecode_1_sep=0
wavecode_1_bSpectrum=1
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.00000
wavecode_1_r=0.500
wavecode_1_g=0.100
wavecode_1_b=0.240
wavecode_1_a=1.000
wave_1_per_frame1=samples = 256 + 50*sin(time*.939493949);
wave_1_per_frame2=vol = (bass_att + mid_att + treb_att)*.333333;
wave_1_per_frame3=vol_avg = .1*(vol_avg*9 + vol);
wave_1_per_frame4=vg = vol_avg*.1;
wave_1_per_frame5=t1 = if(above(vg,1.8),1.8,vg);
wave_1_per_point1=tm = q1;
wave_1_per_point2=sp = sample*6.28*8*6*sin(time)*100;
wave_1_per_point3=
wave_1_per_point4=vol = (value1+value2)*.5;
wave_1_per_point5=it = it*above(sample,0);
wave_1_per_point6=it = it + 1;
wave_1_per_point7=//rad = .5 + vol + .01;
wave_1_per_point8=rad=1;
wave_1_per_point9=ra = rad*sin(sample*3.14);
wave_1_per_point10=ox = ra*sin(sp);
wave_1_per_point11=oy = sin(sample*3.14-1.57)*rad;
wave_1_per_point12=oz = ra*cos(sp);
wave_1_per_point13=
wave_1_per_point14=xang = q4;
wave_1_per_point15=yang = q5;
wave_1_per_point16=zang = q6;
wave_1_per_point17=fov = .5;
wave_1_per_point18=
wave_1_per_point19=mx = ox*cos(zang) - oy*sin(zang);
wave_1_per_point20=my = ox*sin(zang) + oy*cos(zang);
wave_1_per_point21=ox = mx;
wave_1_per_point22=oy = my;
wave_1_per_point23=mx = ox*cos(yang) + oz*sin(yang);
wave_1_per_point24=mz = - ox*sin(yang) + oz*cos(yang);
wave_1_per_point25=ox = mx;
wave_1_per_point26=oz = mz;
wave_1_per_point27=my = oy*cos(xang) - oz*sin(xang);
wave_1_per_point28=mz = oy*sin(xang) + oz*cos(xang);
wave_1_per_point29=oy = my;
wave_1_per_point30=oz = mz;
wave_1_per_point31=
wave_1_per_point32=yang = q8;
wave_1_per_point33=oz = oz + 5;
wave_1_per_point34=
wave_1_per_point35=mx = ox*cos(yang) + oz*sin(yang);
wave_1_per_point36=mz = - ox*sin(yang) + oz*cos(yang);
wave_1_per_point37=ox = mx;
wave_1_per_point38=oz = mz;
wave_1_per_point39=
wave_1_per_point40=oz = oz - 5;
wave_1_per_point41=
wave_1_per_point42=oz = oz - 2;
wave_1_per_point43=x = ox*fov/oz + 0.5;
wave_1_per_point44=x = (x-.5)*0.75 + 0.5;
wave_1_per_point45=y = oy*fov/oz + 0.5;
wave_1_per_point46=
wave_1_per_point47=r = 1 + .5*sin(sample*.10+(time*10*bass));
wave_1_per_point48=g = 1 + .5*sin(sample*2+(time*50*treb));
wave_1_per_point49=b = 1 + .5*sin(sample*5+(time*20*mid));
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=1
wavecode_2_bUseDots=1
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.00000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wave_2_per_frame1=vol = (bass_att + mid_att + treb_att)*.333333;
wave_2_per_frame2=vol_avg = .1*(vol_avg*9 + vol);
wave_2_per_frame3=vg = vol_avg*.1;
wave_2_per_frame4=//t1 = if(above(vg,1.8),1.8,vg);
wave_2_per_frame5=t1=time*.3;
wave_2_per_frame6=//t2=sin(time)*1.5+2;
wave_2_per_frame7=//t3=.25;
wave_2_per_frame8=//t2=sin(time*.071)*1.2+4.1;
wave_2_per_frame9=t2=2;
wave_2_per_frame10=t3=0;
wave_2_per_frame11=t4=0;
wave_2_per_point1=tm=if(above(yp,0.98),t1,tm);
wave_2_per_point2=ex=if(above(yp,0.98),t2,ex);
wave_2_per_point3=//ex=2;
wave_2_per_point4=sp=.01;
wave_2_per_point5=yp=if(above(xp,0.9998),yp+sp,yp);
wave_2_per_point6=xp=if(above(xp,0.9998),0,xp+sp);
wave_2_per_point7=yp=if(above(yp,0.9998),0,yp);
wave_2_per_point8=x=((xp*ex)*.1+.5)-(.05*ex)-t3;
wave_2_per_point9=y=((yp*ex)*.1+.5)-(.05*ex)-t4;
wave_2_per_point10=
wave_2_per_point11=//g=sin(xp*yp*1.506+tm);
wave_2_per_point12=//b=sin(xp*yp*3.142+tm);
wave_2_per_point13=//r=cos(xp*yp*1.506+tm);
wave_2_per_point14=
wave_2_per_point15=r=sin(xp*3.14+tm)*sin(yp*3.14+tm);
wave_2_per_point16=g=sin(xp*6.28+tm)*sin(yp*6.28+tm);
wave_2_per_point17=b=.4;
wave_2_per_point18=
wave_2_per_point19=
wave_2_per_point20=
wave_2_per_point21=
wave_2_per_point22=
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.00000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
wave_3_per_frame1=vol = (bass_att + mid_att + treb_att)*.333333;
wave_3_per_frame2=vol_avg = .1*(vol_avg*9 + vol);
wave_3_per_frame3=vg = vol_avg*.1;
wave_3_per_frame4=t1 = if(above(vg,1.8),1.8,vg);
wave_3_per_point1=tm = q1;
wave_3_per_point2=sp = sample*6.28*8*6;
wave_3_per_point3=
wave_3_per_point4=vol = (value1+value2)*.5;
wave_3_per_point5=it = it*above(sample,0);
wave_3_per_point6=it = it + 1;
wave_3_per_point7=rad = .5 + vol;
wave_3_per_point8=ra = rad*sin(sample*3.14);
wave_3_per_point9=ox = ra*sin(sp);
wave_3_per_point10=oy = sin(sample*3.14-1.57)*rad;
wave_3_per_point11=oz = ra*cos(sp);
wave_3_per_point12=
wave_3_per_point13=xang = tm*.132;
wave_3_per_point14=sxang = 0;
wave_3_per_point15=yang = tm*.153;
wave_3_per_point16=ayang = 0;
wave_3_per_point17=zang = tm*.110;
wave_3_per_point18=azang = 0;
wave_3_per_point19=fov = 0.6 + 0.2*sin(tm);
wave_3_per_point20=fov = .5;
wave_3_per_point21=
wave_3_per_point22=mx = ox*cos(zang) - oy*sin(zang);
wave_3_per_point23=my = ox*sin(zang) + oy*cos(zang);
wave_3_per_point24=ox = mx;
wave_3_per_point25=oy = my;
wave_3_per_point26=mx = ox*cos(yang) + oz*sin(yang);
wave_3_per_point27=mz = - ox*sin(yang) + oz*cos(yang);
wave_3_per_point28=ox = mx;
wave_3_per_point29=oz = mz;
wave_3_per_point30=my = oy*cos(xang) - oz*sin(xang);
wave_3_per_point31=mz = oy*sin(xang) + oz*cos(xang);
wave_3_per_point32=oy = my;
wave_3_per_point33=oz = mz;
wave_3_per_point34=
wave_3_per_point35=oz = oz - 2;
wave_3_per_point36=x = ox*fov/oz + 0.5;
wave_3_per_point37=x = (x-.5)*0.75 + 0.5;
wave_3_per_point38=y = oy*fov/oz + 0.5;
wave_3_per_point39=
wave_3_per_point40=r = 1;
wave_3_per_point41=g = .25+.25*sin(sp);
wave_3_per_point42=b = 0;
wave_3_per_point43=a = .5 + (oz+2)*.5;
wave_3_per_point44=a = a*below(z,2);
wave_3_per_point45=minrgb = min(r,min(g,b));
wave_3_per_point46=maxrgb = max(r,max(g,b));
wave_3_per_point47=l = (maxrgb-minrgb)*.5;
wave_3_per_point48=diff = maxrgb-minrgb;
wave_3_per_point49=sum = maxrgb+minrgb;
wave_3_per_point50=s = if(above(l,0.5),diff/(2-sum),diff/sum)*(1-equal(l,0));
wave_3_per_point51=h = if(equal(r,maxrgb),(g-b)/diff,if(equal(g,maxrgb),2+(b-r)/diff,4+(r-g)/diff));
wave_3_per_point52=h = h*0.1666666;
wave_3_per_point53=h = if(below(h,0),0,if(above(h,1),1,h));
wave_3_per_point54=
wave_3_per_point55=h = h + time*0.05*1.324;
wave_3_per_point56=h = h - int(h);
wave_3_per_point57=
wave_3_per_point58=tmpb = if(below(l,0.5),l*(1+s),(l+s)-(s*l));
wave_3_per_point59=tmpa = 2*l - tmpb;
wave_3_per_point60=hvr = h + .333333;
wave_3_per_point61=hvr = if(below(hvr,0),hvr+1,if(above(hvr,1),hvr-1,hvr));
wave_3_per_point62=hvg = h;
wave_3_per_point63=hvg = if(below(hvg,0),hvg+1,if(above(hvg,1),hvg-1,hvg));
wave_3_per_point64=hvb = h - .333333;
wave_3_per_point65=hvb = if(below(hvb,0),hvb+1,if(above(hvb,1),hvb-1,hvb));
wave_3_per_point66=
wave_3_per_point67=r = if(below(6*hvr,1),tmpa+(tmpb-tmpa)*6*hvr, if(below(2*hvr,1),tmpb, if(below(hvr*3,2),tmpa+(tmpb-tmpa)*(.666666-hvr)*6,tmpa)));
wave_3_per_point68=g = if(below(6*hvg,1),tmpa+(tmpb-tmpa)*6*hvg, if(below(2*hvg,1),tmpb, if(below(hvg*3,2),tmpa+(tmpb-tmpa)*(.666666-hvg)*6,tmpa)));
wave_3_per_point69=b = if(below(6*hvb,1),tmpa+(tmpb-tmpa)*6*hvb, if(below(2*hvb,1),tmpb, if(below(hvb*3,2),tmpa+(tmpb-tmpa)*(.666666-hvb)*6,tmpa)));
shapecode_0_enabled=1
shapecode_0_sides=100
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.830
shapecode_0_y=0.500
shapecode_0_rad=0.54278
shapecode_0_ang=0.00000
shapecode_0_tex_ang=1.57080
shapecode_0_tex_zoom=1.85660
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=1.000
shapecode_0_r2=1.000
shapecode_0_g2=1.000
shapecode_0_b2=1.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shapecode_1_enabled=1
shapecode_1_sides=100
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=1
shapecode_1_num_inst=1
shapecode_1_x=0.170
shapecode_1_y=0.500
shapecode_1_rad=0.54278
shapecode_1_ang=0.00000
shapecode_1_tex_ang=4.71239
shapecode_1_tex_zoom=1.85660
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=1.000
shapecode_1_a=1.000
shapecode_1_r2=1.000
shapecode_1_g2=1.000
shapecode_1_b2=1.000
shapecode_1_a2=0.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.000
shapecode_2_enabled=1
shapecode_2_sides=4
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=1
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.98609
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=1.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=0.000
shapecode_2_g2=1.000
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.000
shape_2_per_frame1=r=if(above(treb,.4),1,.8);
shape_2_per_frame2=g=if(above(mid,.4),1,.8);
shape_2_per_frame3=b=if(above(bass,.4),1,.8);
shape_2_per_frame4=r2=r;
shape_2_per_frame5=g2=g;
shape_2_per_frame6=b2=b;
shape_2_per_frame7=z=if(above(bass,1.2),z*.95,3.14);
shape_2_per_frame8=z=if(above(mid,1.2),-z,z);
shape_2_per_frame9=tex_ang=z;
shape_2_per_frame10=zz=above(treb,1.3)+zz*.95;
shape_2_per_frame11=a=zz*.07+.2;
shapecode_3_enabled=1
shapecode_3_sides=12
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=92
shapecode_3_x=0.800
shapecode_3_y=0.500
shapecode_3_rad=0.02705
shapecode_3_ang=1.57080
shapecode_3_tex_ang=1.25664
shapecode_3_tex_zoom=3.07268
shapecode_3_r=1.000
shapecode_3_g=1.000
shapecode_3_b=1.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=0.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=0.000
shapecode_3_border_b=0.000
shapecode_3_border_a=0.000
shape_3_per_frame1=t1 = time - int (time);
shape_3_per_frame2=sample = instance/num_inst;
shape_3_per_frame3=t_abs = sample*3;
shape_3_per_frame4=t_rel = sample-time/5;
shape_3_per_frame5=
shape_3_per_frame6=ampl = 2*t_abs/2 ;
shape_3_per_frame7=
shape_3_per_frame8=k1=sin(time/13);
shape_3_per_frame9=k2=sin(time/12);
shape_3_per_frame10=ox = ampl*sin (t_abs*(31+5*k1)) + sin(time/25)*(1-t_abs)*0.4  ;
shape_3_per_frame11=oy = ampl*cos (t_abs*(31+5*k2));
shape_3_per_frame12=oz = -1  ;
shape_3_per_frame13=
shape_3_per_frame14=
shape_3_per_frame15=r = sqr(sin(t_rel*3.4));
shape_3_per_frame16=g = sqr(sin(t_rel));
shape_3_per_frame17=b = sqr (cos(t_rel*1.8));
shape_3_per_frame18=
shape_3_per_frame19=//a=(0.1*(sin(t_abs*3)) + 0.6*q3*below (abs(1-t_abs-t1 ),0.3))*a;
shape_3_per_frame20=
shape_3_per_frame21=xang = time/9.5;
shape_3_per_frame22=yang = 0*time/7;
shape_3_per_frame23=zang = -time/22;
shape_3_per_frame24=fov = 0.5;
shape_3_per_frame25=
shape_3_per_frame26=
shape_3_per_frame27=// Rotation um x,y,z
shape_3_per_frame28=
shape_3_per_frame29=mx = ox*cos(zang) - oy*sin(zang);
shape_3_per_frame30=my = ox*sin(zang) + oy*cos(zang);
shape_3_per_frame31=
shape_3_per_frame32=ox = mx;
shape_3_per_frame33=oy = my;
shape_3_per_frame34=mx = ox*cos(yang) + oz*sin(yang);
shape_3_per_frame35=mz = - ox*sin(yang) + oz*cos(yang);
shape_3_per_frame36=ox = mx;
shape_3_per_frame37=oz = mz;
shape_3_per_frame38=my = oy*cos(xang) - oz*sin(xang);
shape_3_per_frame39=mz = oy*sin(xang) + oz*cos(xang);
shape_3_per_frame40=oy = my;
shape_3_per_frame41=oz = mz;
shape_3_per_frame42=
shape_3_per_frame43=oz = oz - 6;
shape_3_per_frame44=x = ox*fov/oz +0.5;
shape_3_per_frame45=//x = (x-.5)*0.75 + 0.5;
shape_3_per_frame46=y = oy*fov/oz + 0.5;
shape_3_per_frame47=
shape_3_per_frame48=a=1/mz*.5;
shape_3_per_frame49=//a2=1/mz*.5;
shape_3_per_frame50=//border_a=1/mz*.5;
shape_3_per_frame51=rad=1/mz*.005;
per_frame_init_1=batr=bass_att+treb_att;
per_frame_init_2=natr=batr;
per_frame_1=//per frame less reactive volume for all unused q vars, put before other q vars are set for cop out mashing
per_frame_2=vb = vb*0.95 + (1-vb)*pow(bass_att*treb_att*mid_att,2)*0.02;
per_frame_3=vvb = vvb*0.95 + (1-vvb)*vb*0.01;
per_frame_4=vm = vm*0.95 + (1-vm)*pow(mid_att,2)*0.02;
per_frame_5=vvm = vvm*0.95 + (1-vvm)*vm*0.01;
per_frame_6=vt = vt*0.95 + (1-vt)*pow(treb_att,2)*0.02;
per_frame_7=vvt = vvt*0.95 + (1-vvt)*vt*0.01;
per_frame_8=vvb = min(1,max(0,vvb));
per_frame_9=vvm = min(1,max(0,vvm));
per_frame_10=vvt = min(1,max(0,vvt));
per_frame_11=q1 = vvb*2;//0.5 + vb - vvb;
per_frame_12=q2 = vvm*2;//0.5 + vm - vvm;
per_frame_13=q3 = vvt*2;//0.5 + vt - vvt;
per_frame_14=v=2;
per_frame_15=bb = bb - vvb*v;
per_frame_16=mm = mm - vvm*v;
per_frame_17=tt = tt - vvt*v;
per_frame_18=q4 = -bb;
per_frame_19=q5 = -mm;
per_frame_20=q6 = -tt;
per_frame_21=q4=(q1+q2+q3)*5;
per_frame_22=q5=(q1+q2+q3)*5;
per_frame_23=q6=(q1+q2+q3)*5;
per_frame_24=q7=(q1+q2+q3)*5;
per_frame_25=q8=(q1+q2+q3)*5;
per_frame_26=q9=(q1+q2+q3)*5;
per_frame_27=q10=(q1+q2+q3)*5;
per_frame_28=q11=(q1+q2+q3)*5;
per_frame_29=q12=(q1+q2+q3)*5;
per_frame_30=q13=(q1+q2+q3)*5;
per_frame_31=q14=(q1+q2+q3)*5;
per_frame_32=q15=(q1+q2+q3)*5;
per_frame_33=q16=(q1+q2+q3)*5;
per_frame_34=q17=(q1+q2+q3)*5;
per_frame_35=q18=(q1+q2+q3)*5;
per_frame_36=q19=(q1+q2+q3)*5;
per_frame_37=q20=(q1+q2+q3)*5;
per_frame_38=q21=(q1+q2+q3)*5;
per_frame_39=q22=(q1+q2+q3)*5;
per_frame_40=q23=(q1+q2+q3)*5;
per_frame_41=q24=(q1+q2+q3)*5;
per_frame_42=q25=(q1+q2+q3)*5;
per_frame_43=q26=(q1+q2+q3)*5;
per_frame_44=q27=(q1+q2+q3)*5;
per_frame_45=q28=(q1+q2+q3)*5;
per_frame_46=q29=(q1+q2+q3)*5;
per_frame_47=q30=(q1+q2+q3)*5;
per_frame_48=q31=(q1+q2+q3)*5;
per_frame_49=q32=(q1+q2+q3)*5;
per_frame_50=
per_frame_51=
per_frame_52=thresh = above(bass_att,thresh)*2+(1-above(bass_att,thresh))*((thresh-1.3)*0.96+1.3);
per_frame_53=dx_r = equal(thresh,2)*0.015*sin(5*time)+(1-equal(thresh,2))*dx_r;
per_frame_54=dy_r = equal(thresh,2)*0.015*sin(6*time)+(1-equal(thresh,2))*dy_r;
per_frame_55=natr=bass_att+thresh*treb_att;
per_frame_56=cha=abs(batr-natr);
per_frame_57=spik=above(abs(cha-addict),addict);
per_frame_58=addict=(addict+cha)/2;
per_frame_59=
per_frame_60=//effects here
per_frame_61=zoom=zoom+if((above(bass*2,treb)-1),-1,1)*above(cha*thresh,2)*0.1;
per_frame_62=
per_frame_63=
per_frame_64=//added the rotation effect with the same code just to offer some possibilities, activate it if you dare - goody
per_frame_65=//rot=rot+if((above(bass*2,treb)-1),-1,1)*above(cha*thresh,2)*0.1;
per_frame_66=
per_frame_67=//zoomexp=2/zoom;
per_frame_68=mv_r=log(thresh)*spik;
per_frame_69=mv_b=abs(spik*cha-1);
per_frame_70=mv_g=sin(time+thresh);
per_frame_71=mv_a=spik*.75;
per_frame_72=
per_frame_73=//end.
per_frame_74=batr=natr;
per_frame_75=monitor=log(thresh);
per_frame_76=
per_frame_77=
per_frame_78=wave_r = wave_r + 0.35*sin(3*time) + 0.15*sin(2.5*time);
per_frame_79=wave_g = wave_g + 0.35*sin(2.7*time) + 0.15*sin(2.11*time);
per_frame_80=wave_b = wave_b + 0.35*sin(2.84*time) + 0.15*sin(2.3*time);
per_frame_81=
per_frame_82=wave_mystery=wave_mystery*(addict);
per_frame_83=
per_frame_84=
per_frame_85=cog = ocog+0.005*(bass+bass_att+(bass*bass_att)-2);
per_frame_86=ocog = below(cog,30000)*cog;
per_frame_87=
per_frame_88=
per_frame_89=q1=batr;
per_frame_90=q2=spik;
per_frame_91=
per_frame_92=
per_frame_93=
per_frame_94=
per_frame_95=
per_frame_96=
per_frame_97=//Hai guiz, you found the secret message. What are you gonna do now?
per_frame_98=chng=sin(time*.5);
per_frame_99=cthr=.9999;
per_frame_100=mq21=if(above(chng,cthr),rand(3),mq21);
per_frame_101=mq22=if(above(chng,cthr),rand(3),mq22);
per_frame_102=mq23=if(above(chng,cthr),rand(3),mq23);
per_frame_103=mq24=if(above(chng,cthr),rand(2),mq24);
per_frame_104=mq25=if(above(chng,cthr),rand(2),mq25);
per_frame_105=mq26=if(above(chng,cthr),rand(2),mq26);
per_frame_106=mq27=if(above(chng,cthr),rand(1),mq27);
per_frame_107=mq28=if(above(chng,cthr),rand(1),mq28);
per_frame_108=mq29=if(above(chng,cthr),rand(1)*.3,mq29);
per_frame_109=mq31=if(above(chng,cthr),rand(1)*.3,mq31);
per_frame_110=monitor=chng;
per_frame_111=q21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;
per_frame_112=q27=mq27;q28=mq28;q29=mq29;q31=mq31;
per_frame_113=
per_frame_114=monitor=mq1;
per_frame_115=vol=bass+treb+mid;
per_frame_116=atime=atime+vol;
per_frame_117=q11=.4+sin(atime*.006        )*.4;
per_frame_118=q12=.4+cos(atime*.00613828348)*.4;
per_frame_119=q13=.4+sin(atime*.00598593455)*.4;
per_frame_120=monitor=q13;
per_frame_121=q4=sin(atime*.03);
per_frame_122=q5=cos(atime*.030383824);
per_frame_123=q6=tan(atime*.029384834);
per_frame_124=
per_pixel_1=
per_pixel_2=//Tiles- 
per_pixel_3=//movement first:
per_pixel_4=dxm=.01*sin(time*.41);
per_pixel_5=dym=.01*sin(time*.36);
per_pixel_6=
per_pixel_7=//Now the tiles themselves:
per_pixel_8=dx=dxm+.01*sin(x*80+sin(time))+.005*sin(q1*(y*sin(time*.94)));
per_pixel_9=dy=dym+.01*sin(y*80+sin(time))+.005*sin(q1*(x*sin(time*.97)));
per_pixel_10=//end tiles
per_pixel_11=
warp_1=`shader_body
warp_2=`{
warp_3=`    // sample previous frame
warp_4=`    ret = tex2D( sampler_main, uv ).xyz;
warp_5=`float4 noise9 = tex3D(sampler_noisevol_hq, 
warp_6=`                      ((uv.xyy*q27
warp_7=`                       )*texsize.xyy*texsize_noisevol_hq.zww
warp_8=`                      ).xyz*
warp_9=`                      float3(1,1,0)*0.05 + 
warp_10=`                      time*float3(0,0,1)*q29
warp_11=`                     );
warp_12=`if(ret.x> q21*q13         && ret.x<= q24*q11        )ret.y -= (noise9).x*.5; 
warp_13=`if(ret.y> q22*q11         && ret.y<= q25*q12        )ret.z -= (noise9).y*.5; 
warp_14=`if(ret.z> q23*q12         && ret.z<= q26*q13        )ret.x -= (noise9).z*.5; 
warp_15=`
warp_16=`    // take the difference between the crisp and blurred images,
warp_17=`    // then add it back into the image.  Creates spots and stripes over time.
warp_18=`    ret += (ret - GetBlur1(uv))*0.3;
warp_19=`    ret *= 0.9;
warp_20=`
warp_21=`   // add noise:
warp_22=`   float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 0.1;// + rand_frame.xy;
warp_23=`   ret += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)/256.0 * 28;
warp_24=`
warp_25=`   // desaturate over time, to keep the globs white
warp_26=`   ret = lerp(ret, lum(ret), 0.04);
warp_27=`}
comp_1=`float2 factorA, factorB, product;
comp_2=`float2 numerator, denominator, fraction;
comp_3=`shader_body
comp_4=`{
comp_5=`float2 uvo = uv;
comp_6=`uv = (uv-0.5);
comp_7=`factorA = uv+ float2(q1,q2);
comp_8=`factorB = float2(8,0);
comp_9=`product = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
comp_10=`float2 uv1 = product;
comp_11=`factorA = uv+ float2(q3,q4);
comp_12=`factorB = float2(8,0);
comp_13=`product = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
comp_14=`float2 uv2 = product;
comp_15=`factorA = uv+ float2(q5,q6);
comp_16=`factorB = float2(8,0);
comp_17=`product = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
comp_18=`float2 uv3 = product;
comp_19=`factorA = uv+ float2(q7,q8);
comp_20=`factorB = float2(8,0);
comp_21=`product = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
comp_22=`float2 uv4 = product;
comp_23=`factorA = uv1;
comp_24=`factorB = uv2;
comp_25=`product = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
comp_26=`float2 uv12 = product;
comp_27=`factorA = uv3;
comp_28=`factorB = uv4;
comp_29=`product = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
comp_30=`float2 uv34 = product;
comp_31=`factorA = uv12;
comp_32=`factorB = uv34;
comp_33=`product = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
comp_34=`numerator = float2(1,0);
comp_35=`denominator = product;
comp_36=`fraction = float2( numerator.x*denominator.x + numerator.y*denominator.y,   // the fractions real part
comp_37=`                   numerator.y*denominator.x - numerator.x*denominator.y)/  // the fractions imaginary part
comp_38=`                   (denominator.x*denominator.x + denominator.y*denominator.y);
comp_39=`uv = fraction*2;
comp_40=`uv = lerp(0.5 + (uvo-0.5)*(2+(bass_att-treb_att)*0.02),uv+0.5,0.5);
comp_41=`
comp_42=`float l = length(uv-0.5);
comp_43=`uv = 0.5 + (1.0 - abs( frac( uv * 0.5 ) * 2 - 1.0 )-0.5); // Eo.S. mirror code with cutted borders
comp_44=`ret = GetPixel(uv).x*float3(1,0,0)*0.5;
comp_45=`ret = pow(ret.x,0.8)*float3(1.2,0.15,0);
comp_46=`ret = lerp(ret,float3(1,1,1),GetBlur2(uv).z*0.6);
comp_47=`ret = lerp(ret,float3(1,1.1,1.2),GetPixel(uv).z);
comp_48=`ret = lerp(ret,float3(0.2,0,0.1),GetBlur1(uv).y*6);
comp_49=`}
