MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=4.000000
fGammaAdj=1.000
fDecay=0.995
fVideoEchoZoom=1.007
fVideoEchoAlpha=0.000
nVideoEchoOrientation=3
nWaveMode=0
bAdditiveWaves=0
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=0
bMaximizeWaveColor=1
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=1.000
fWaveSmoothing=0.750
fWaveParam=0.000
fModWaveAlphaStart=0.750
fModWaveAlphaEnd=0.950
fWarpAnimSpeed=0.137
fWarpScale=13.125
fZoomExponent=1.00000
fShader=0.000
zoom=0.99951
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.99213
sx=1.00000
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.500
ob_r=0.010
ob_g=0.000
ob_b=0.000
ob_a=0.000
ib_size=0.260
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=12.000
nMotionVectorsY=9.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.900
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=0
wavecode_0_samples=395
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=0
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=0.150
wavecode_0_g=0.150
wavecode_0_b=0.150
wavecode_0_a=0.000
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=0.01000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=0.000
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=1
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=0.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=1
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=0.000
shapecode_0_enabled=1
shapecode_0_sides=6
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.17809
shapecode_0_ang=0.26000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=0.39711
shapecode_0_r=1.000
shapecode_0_g=0.700
shapecode_0_b=0.600
shapecode_0_a=1.000
shapecode_0_r2=0.400
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=1.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shape_0_per_frame1=x=.11+.22*rand(5);
shape_0_per_frame2=y=.1+.16*(2*time%6);
shape_0_per_frame3=
shape_0_per_frame4=b=.6+.3*q3;
shape_0_per_frame5=g=.7+.2*q3;
shape_0_per_frame6=r= .7;
shape_0_per_frame7=
shape_0_per_frame8=g2=.3*g;
shape_0_per_frame9=r2=.3*r;
shape_0_per_frame10=b2=.3*b;
shapecode_1_enabled=1
shapecode_1_sides=6
shapecode_1_additive=1
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.17809
shapecode_1_ang=0.26000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=0.99999
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=0.400
shapecode_1_a=0.500
shapecode_1_r2=0.200
shapecode_1_g2=0.000
shapecode_1_b2=0.300
shapecode_1_a2=0.600
shapecode_1_border_r=0.000
shapecode_1_border_g=0.000
shapecode_1_border_b=0.000
shapecode_1_border_a=0.000
shape_1_per_frame1=x=.11+.22*rand(5);
shape_1_per_frame2=y=.1+.16*(2*time%6);
shape_1_per_frame3=
shape_1_per_frame4=b=.6+.3*q3;
shape_1_per_frame5=g=.7+.2*q3;
shape_1_per_frame6=r= .7;
shape_1_per_frame7=
shape_1_per_frame8=g2=.3*g;
shape_1_per_frame9=r2=.3*r;
shape_1_per_frame10=b2=.3*b;
shapecode_2_enabled=1
shapecode_2_sides=6
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=1
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.17633
shapecode_2_ang=0.26000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.19615
shapecode_2_r=1.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=1.000
shapecode_2_a2=0.200
shapecode_2_border_r=0.000
shapecode_2_border_g=0.000
shapecode_2_border_b=0.000
shapecode_2_border_a=0.200
shape_2_per_frame1=x=.22*rand(6);
shape_2_per_frame2=y=.18+.16*(2*time%5);
shape_2_per_frame3=
shape_2_per_frame4=g=1.5*q3;
shape_2_per_frame5=r=1.3*q4;
shape_2_per_frame6=b=1.7*q5;
shape_2_per_frame7=
shape_2_per_frame8=tex_ang=-q1;
shape_2_per_frame9=tex_zoom=2+sin(q1);
shapecode_3_enabled=1
shapecode_3_sides=6
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=1
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.16284
shapecode_3_ang=0.26000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=1.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.800
shapecode_3_g2=0.800
shapecode_3_b2=0.800
shapecode_3_a2=0.200
shapecode_3_border_r=0.000
shapecode_3_border_g=0.000
shapecode_3_border_b=0.000
shapecode_3_border_a=0.200
shape_3_per_frame1=x=.11+.22*rand(5);
shape_3_per_frame2=y=.1+.16*(2*time%6);
shape_3_per_frame3=
shape_3_per_frame4=r=.3*q3;
shape_3_per_frame5=b=.2*q2;
shape_3_per_frame6=g=.1*q1;
shape_3_per_frame7=
shape_3_per_frame8=tex_ang=q1;
shape_3_per_frame9=tex_zoom=2+1.2*sin(1.5*q1);
per_frame_1=// elastic thread code
per_frame_2=
per_frame_3=xx1 = xx1*0.9 + (bass)*0.01;
per_frame_4=xx2 = xx2*0.9 + (treb)*0.01;
per_frame_5=yy1 = yy1*0.94 + (treb+bass)*0.0075;
per_frame_6=x1 = 0.5 + (xx1-xx2)*2;
per_frame_7=y1 = 0.4 + yy1*1.5;
per_frame_8=dt = 0.03/fps;
per_frame_9=vx2 = vx2*(1-2*dt) + dt*((x1+x3-2*x2)*10);
per_frame_10=vy2 = vy2*(1-2*dt) + dt*((y1+y3-2*y2)*10-0.5);
per_frame_11=vx3 = vx3*(1-2*dt) + dt*((x2+x4-2*x3)*10);
per_frame_12=vy3 = vy3*(1-2*dt) + dt*((y2+y4-2*y3)*10-0.5);
per_frame_13=vx4 = vx4*(1-2*dt) + dt*((x3-x4)*10);
per_frame_14=vy4 = vy4*(1-2*dt) + dt*((y3-y4)*10-0.5);
per_frame_15=x2 = x2 + vx2; y2 = y2 + vy2;
per_frame_16=x3 = x3 + vx3; y3 = y3 + vy3;
per_frame_17=x4 = x4 + vx4; y4 = y4 + vy4;
per_frame_18=vx2 = if(above(x2,0),vx2,abs(vx2)*0.5);
per_frame_19=vx2 = if(below(x2,1),vx2,-abs(vx2)*0.5);
per_frame_20=vx3 = if(above(x3,0),vx3,abs(vx3)*0.5);
per_frame_21=vx3 = if(below(x3,1),vx3,-abs(vx3)*0.5);
per_frame_22=vx4 = if(above(x4,0),vx4,abs(vx4)*0.5);
per_frame_23=vx4 = if(below(x4,1),vx4,-abs(vx4)*0.5);
per_frame_24=vy2 = if(above(y2,0),vy2,abs(vy2)*0.5);
per_frame_25=vy2 = if(below(y2,1),vy2,-abs(vy2)*0.5);
per_frame_26=vy3 = if(above(y3,0),vy3,abs(vy3)*0.5);
per_frame_27=vy3 = if(below(y3,1),vy3,-abs(vy3)*0.5);
per_frame_28=vy4 = if(above(y4,0),vy4,abs(vy4)*0.5);
per_frame_29=vy4 = if(below(y4,1),vy4,-abs(vy4)*0.5);
per_frame_30=q1 = x1;q2 = x2;q3 = x3;q4 = x4;
per_frame_31=q5 = y1;q6 = y2;q7 = y3;q8 = y4;
per_frame_32=q9 = 1/aspectx;
per_frame_33=q10 = 1/aspecty;
per_frame_34=q11 = aspectx;
per_frame_35=q12 = aspecty;
per_frame_36=q13 = sqrt(vx4*vx4 + vy4*vy4);
per_frame_37=q14 = atan2(vx4,vy4);
per_frame_38=q15 = sin(q14);
per_frame_39=q16 = cos(q14);
per_frame_40=
per_frame_41=// Flexis dampened sound response functions
per_frame_42=
per_frame_43=db = db*0.98 + bass*0.2; // dampener
per_frame_44=bb = bb + db*0.1; // accumulation, replace time expressions with this ;)
per_frame_45=
per_frame_46=ddt = ddt*0.98 + treb*0.2;
per_frame_47=tt = tt + ddt*0.1;
per_frame_48=
per_frame_49=dm = dm*0.98 + mid*0.2;
per_frame_50=mm = mm + dm*0.1;
per_frame_51=
per_frame_52=
per_frame_53=//***** [q21-q28] variables for Flexis caleidoscope shader code *****
per_frame_54=
per_frame_55=// change
per_frame_56=q23 = 0.5 + sin((bb-mm)*0.1)*0.25; // center x
per_frame_57=q24 = 0.5 + sin((tt-mm)*0.1)*0.25; // center y
per_frame_58=w = (bb-tt)*0.1;                   // angle
per_frame_59=q26 = 0.25 - (db-ddt)*0.025;        // size
per_frame_60=
per_frame_61=//don't change
per_frame_62=q21 = sin(w);
per_frame_63=q22 = cos(w);
per_frame_64=q27 = sin(-w);
per_frame_65=q28 = cos(-w);
per_frame_66=q25 = 1/q26;
warp_1=`float dist, struc, len; float2 uv0, uv1; float3 uv2; float4 box;
warp_2=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
warp_3=`
warp_4=`static const float3 CamPos = float3(q4,q5,q6);
warp_5=`static const float sustain = .98 - q14, change = q14, ds = q10;
warp_6=`static const float myzoom = q7, limit = 24, tele=q16;
warp_7=`
warp_8=`float GetDist(float2 uvi) {float2 tmp; tmp = tex2D (sampler_pc_main, uvi).gb; 
warp_9=`  return 1-(tmp.y + 1.0/255*tmp.x + ds*.7);}
warp_10=`
warp_11=`float2 PutDist(float x) {float fg, fb; fg = modf((1-x)*255.0,fb);
warp_12=`  return (float2(fg,fb/255.0));}
warp_13=`
warp_14=`
warp_15=`float MinDist (float2 uvi) 
warp_16=`{
warp_17=`   float tmp; float4 nb; float4 nb2; float2 pix;
warp_18=`   pix = texsize.zw*(1.0+length(uvi-0.5)*8.0);
warp_19=`   tmp = GetDist(uvi);
warp_20=`   nb.x = GetDist(uvi+pix*float2(-1,-1));  
warp_21=`   nb.y = GetDist(uvi+pix*float2(1,-1));
warp_22=`   nb.z = GetDist(uvi+pix*float2(1,1));   
warp_23=`   nb.w = GetDist(uvi+pix*float2(-1,1));
warp_24=`   nb2.x = GetDist(uvi+pix*float2(0,-1));  
warp_25=`   nb2.y = GetDist(uvi+pix*float2(1,0));
warp_26=`   nb2.z = GetDist(uvi+pix*float2(0,1));   
warp_27=`   nb2.w = GetDist(uvi+pix*float2(-1,0));
warp_28=`   //Eo.S. more efficient usage of min to get min value of all 8 GetDist() calls, removes 11ALU
warp_29=`   nb = min( nb, nb2 );
warp_30=`   nb.xy = min( nb.xy, nb.zw );
warp_31=`   tmp = min( nb.x, nb.y );
warp_32=`   return tmp;
warp_33=`}
warp_34=`
warp_35=`float3 Get1 (float2 uvi) {float3 tmp; float2 pix;
warp_36=`   return lerp (GetPixel(uvi), tmp = GetBlur1(uvi),change*4);} //#
warp_37=`
warp_38=`float4 mbox (float3 uvi) {float3 zz, zz0; float tmp, li;
warp_39=`  zz = uvi; zz0 = zz+q8; li=0;
warp_40=`  for (int n = 0; n <= 7; n++) {
warp_41=`    zz = 2.0*clamp(zz,-1,1)-zz;  tmp = dot(zz,zz);
warp_42=`    if (tmp <= 0.25) {zz *= 4; li=limit;} else if (tmp <= 1) {zz /= pow(tmp,1);}
warp_43=`    zz = 2.6*zz + zz0;}
warp_44=`  return float4(zz,li);}
warp_45=`
warp_46=`shader_body {
warp_47=`uv1 = (uv-.5)*aspect.xy*tele;
warp_48=`uv = (uv-.5)*(1-ds/(GetDist(uv))) + .5;
warp_49=`
warp_50=`float3 noise = frac(8*tex2D (sampler_noise_lq,uv+rand_frame.yz)); 
warp_51=`
warp_52=`dist = noise.r;
warp_53=`   if (noise.g > 0.2) 
warp_54=`   {
warp_55=`       float3 noiseBiased = noise - float3( 0.4, 0.5, 0.5 );
warp_56=`//Eo.S. combine the subtraction on noise to a single float3 to ensure compiler does the subtraction in a single ALU
warp_57=`       dist = MinDist( (noiseBiased.zy) * 0.003 +uv ) +  0.008 * (noiseBiased.x) * abs(noiseBiased.y);
warp_58=`   }
warp_59=`dist = min(dist,GetDist(uv));
warp_60=`float tdist = dist + pow(dist,3);
warp_61=`uv2 = mul(float3(uv1*tdist,tdist-.0)/myzoom,RotMat)+CamPos;
warp_62=`uv2 = (frac(uv2/8.0+.5)-.5)*8.0;
warp_63=`box = mbox (uv2);
warp_64=`len = (length(box.xyz));
warp_65=`struc = length(box.xyw)/limit;
warp_66=`float dec = log(1+len/limit)*.02*(1-GetDist(uv));
warp_67=`if ((dist <= GetDist(uv)) && (len < limit) && (dist > 0.005)){
warp_68=` ret.r = (1-sustain)*struc+sustain*(Get1(uv).r); ret.gb=  PutDist(dist); } 
warp_69=` else {ret = tex2D(sampler_fc_main,uv)*float3(sustain,0,1-dec)-float3(1.0/255,0,change/6);} 
warp_70=`}
comp_1=`float sigmoid(float t, float c){
comp_2=`   return 1 / ( 1 + exp(t*c));
comp_3=`}
comp_4=`
comp_5=`shader_body
comp_6=`{
comp_7=`// ***** Flexis rotating caleidoscope code *****
comp_8=`
comp_9=`float2 cntr = float2(q23,q24); float sin = q21; float cos = q22; float scale = q25;
comp_10=`float2 uv_r = (uv-cntr)*aspect.xy;
comp_11=`       uv_r = scale*float2( cos*uv_r.x - sin*uv_r.y, sin*uv_r.x + cos*uv_r.y); // rotation
comp_12=`       uv_r = cntr + uv_r*aspect.zw;
comp_13=`       uv_r = 1.0 - abs( frac( uv_r * 0.5 ) * 2.0 - 1.0 ); // mirror
comp_14=`
comp_15=`sin = q27; cos = q28; scale = q26;
comp_16=`float2 uv_rr = (uv_r-cntr)*aspect.xy;
comp_17=`       uv_rr = scale*float2( cos*uv_rr.x - sin*uv_rr.y, sin*uv_rr.x + cos*uv_rr.y); // counter-rotation
comp_18=`       uv_rr = cntr + (uv_rr)*aspect.zw;
comp_19=`
comp_20=`float2 caleidoscope_uv = uv_rr;
comp_21=`
comp_22=`// *****
comp_23=`
comp_24=`uv = uv_rr;
comp_25=`
comp_26=`    float2 d = texsize.zw;
comp_27=`    float3 dx = ( GetPixel(uv+float2(1,0)*d)-GetPixel(uv-float2(1,0)*d) );
comp_28=`    float3 dy = ( GetPixel(uv+float2(0,1)*d)-GetPixel(uv-float2(0,1)*d) );
comp_29=`float2 dz = float2(dx.y,dy.y)*3;
comp_30=`
comp_31=`d = texsize.zw*2;
comp_32=`dx = ( GetBlur1(uv+float2(1,0)*d)-GetBlur1(uv-float2(1,0)*d) );
comp_33=`dy = ( GetBlur1(uv+float2(0,1)*d)-GetBlur1(uv-float2(0,1)*d) );
comp_34=`
comp_35=`dz +=float2(dx.y,dy.y);
comp_36=`
comp_37=`float3 bg = pow(length(dz)*0.8+0,0.7) + GetBlur2(uv).y*0.4-0.1;
comp_38=`
comp_39=`ret = bg*float3(0.3,0.5,0.7);
comp_40=`ret = lerp(ret,float3(0.2,0.1,0),GetPixel(uv + float2(dx.x,dy.x)*texsize.zw*18).x*6);
comp_41=`ret = lerp(ret,1,GetPixel(uv).z);
comp_42=`
comp_43=`//ret = GetPixel(uv);
comp_44=`
comp_45=`//ret = sigmoid(length((uv-0.5)*aspect)-0.04,50);
comp_46=`}
