MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=2
PSVERSION_COMP=3
[preset00]
fRating=5.000
fGammaAdj=1.000
fDecay=0.980
fVideoEchoZoom=2.000
fVideoEchoAlpha=0.000
nVideoEchoOrientation=0
nWaveMode=0
bAdditiveWaves=0
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=0
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.010
fWaveSmoothing=0.000
fWaveParam=-0.340
fModWaveAlphaStart=1.000
fModWaveAlphaEnd=1.000
fWarpAnimSpeed=0.803
fWarpScale=1.220
fZoomExponent=1.50374
fShader=0.000
zoom=1.00000
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.28380
sx=1.00000
sy=1.00000
wave_r=1.000
wave_g=1.000
wave_b=1.000
wave_x=0.500
wave_y=0.500
ob_size=0.005
ob_r=1.000
ob_g=0.700
ob_b=1.000
ob_a=1.000
ib_size=0.000
ib_r=1.000
ib_g=0.000
ib_b=0.750
ib_a=1.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.000
mv_r=1.000
mv_g=1.000
mv_b=0.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=200
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=0
wavecode_0_scaling=2.44415
wavecode_0_smoothing=0.00000
wavecode_0_r=1.000
wavecode_0_g=0.500
wavecode_0_b=0.000
wavecode_0_a=1.000
wave_0_per_point1=
wave_0_per_point2=///// counter (2 figures)
wave_0_per_point3=
wave_0_per_point4=s=14*sample;
wave_0_per_point5=c1= above(s,7);
wave_0_per_point6=c2= 7*c1-s;
wave_0_per_point7=c = 7*c1-int(s);
wave_0_per_point8=
wave_0_per_point9=///  model (2 x 7 segments of number 8)
wave_0_per_point10=xa=bnot(c)*(-c2);                                   ya=0;
wave_0_per_point11=xb=0;                                               yb=bnot(c+1)*(-c2-2);
wave_0_per_point12=xc=bnot(c+2);                                       yc=bnot(c+2)*(c2+2);
wave_0_per_point13=xd=bnot(c+3)*(c2+4);                                yd=bnot(c+3)*(-1);
wave_0_per_point14=xe=0;                                               ye=bnot(c+4)*(c2+3);
wave_0_per_point15=xf=bnot(c+5);                                       yf=bnot(c+5)*(-c2-7);
wave_0_per_point16=xg=bnot(c+6)*(-c2-6);                               yg=bnot(c+6)*(-2);
wave_0_per_point17=
wave_0_per_point18=x8=xa+xb+xc+xd+xe+xf+xg;                            y8=ya+yb+yc+yd+ye+yf+yg;
wave_0_per_point19=
wave_0_per_point20=///// timer
wave_0_per_point21=t1=(.2*q10)%10;
wave_0_per_point22=t2=(.02*q10)%10;
wave_0_per_point23=
wave_0_per_point24=x=   if(c1,bnot(t1),  bnot(t2))   *(x8-xd);         y=   if(c1,bnot(t1),  bnot(t2))   *(y8-yd);       /// 0
wave_0_per_point25=x=x+ if(c1,bnot(t1-1),bnot(t2-1)) *(xb+xe);         y=y+ if(c1,bnot(t1-1),bnot(t2-1)) *(yb+ye);       /// 1
wave_0_per_point26=x=x+ if(c1,bnot(t1-2),bnot(t2-2)) *(x8-xb-xf);      y=y+ if(c1,bnot(t1-2),bnot(t2-2)) *(y8-yb-yf);    /// 2
wave_0_per_point27=x=x+ if(c1,bnot(t1-3),bnot(t2-3)) *(x8-xb-xe);      y=y+ if(c1,bnot(t1-3),bnot(t2-3)) *(y8-yb-ye);    /// 3
wave_0_per_point28=x=x+ if(c1,bnot(t1-4),bnot(t2-4)) *(x8-xa-xe-xg);   y=y+ if(c1,bnot(t1-4),bnot(t2-4)) *(y8-ya-ye-yg); /// 4
wave_0_per_point29=x=x+ if(c1,bnot(t1-5),bnot(t2-5)) *(x8-xc-xe);      y=y+ if(c1,bnot(t1-5),bnot(t2-5)) *(y8-yc-ye);    /// 5
wave_0_per_point30=x=x+ if(c1,bnot(t1-6),bnot(t2-6)) *(x8-xc);         y=y+ if(c1,bnot(t1-6),bnot(t2-6)) *(y8-yc);       /// 6
wave_0_per_point31=x=x+ if(c1,bnot(t1-7),bnot(t2-7)) *(xa+xc+xf);      y=y+ if(c1,bnot(t1-7),bnot(t2-7)) *(ya+yc+yf);    /// 7
wave_0_per_point32=x=x+ if(c1,bnot(t1-8),bnot(t2-8)) *x8;              y=y+ if(c1,bnot(t1-8),bnot(t2-8)) *y8;            /// 8
wave_0_per_point33=x=x+ if(c1,bnot(t1-9),bnot(t2-9)) *(x8-xe-xg);      y=y+ if(c1,bnot(t1-9),bnot(t2-9)) *(y8-ye-yg);    /// 9
wave_0_per_point34=
wave_0_per_point35=
wave_0_per_point36=x= .92 + .015*x + c1*.02;
wave_0_per_point37=y= .83 + .015*y ; 
wavecode_1_enabled=1
wavecode_1_samples=200
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=7.75180
wavecode_1_smoothing=0.00000
wavecode_1_r=0.000
wavecode_1_g=0.500
wavecode_1_b=1.000
wavecode_1_a=1.000
wave_1_per_point1=
wave_1_per_point2=///// counter (2 figures)
wave_1_per_point3=
wave_1_per_point4=s=14*sample;
wave_1_per_point5=c1= above(s,7);
wave_1_per_point6=c2= 7*c1-s;
wave_1_per_point7=c = 7*c1-int(s);
wave_1_per_point8=
wave_1_per_point9=///  model (2 x 7 segments of number 8)
wave_1_per_point10=xa=bnot(c)*(-c2);                                   ya=0;
wave_1_per_point11=xb=0;                                               yb=bnot(c+1)*(-c2-2);
wave_1_per_point12=xc=bnot(c+2);                                       yc=bnot(c+2)*(c2+2);
wave_1_per_point13=xd=bnot(c+3)*(c2+4);                                yd=bnot(c+3)*(-1);
wave_1_per_point14=xe=0;                                               ye=bnot(c+4)*(c2+3);
wave_1_per_point15=xf=bnot(c+5);                                       yf=bnot(c+5)*(-c2-7);
wave_1_per_point16=xg=bnot(c+6)*(-c2-6);                               yg=bnot(c+6)*(-2);
wave_1_per_point17=
wave_1_per_point18=x8=xa+xb+xc+xd+xe+xf+xg;                            y8=ya+yb+yc+yd+ye+yf+yg;
wave_1_per_point19=
wave_1_per_point20=///// timer
wave_1_per_point21=t1=(.23*q11)%10;
wave_1_per_point22=t2=(.023*q11)%10;
wave_1_per_point23=
wave_1_per_point24=x=   if(c1,bnot(t1),  bnot(t2))   *(x8-xd);         y=   if(c1,bnot(t1),  bnot(t2))   *(y8-yd);       /// 0
wave_1_per_point25=x=x+ if(c1,bnot(t1-1),bnot(t2-1)) *(xb+xe);         y=y+ if(c1,bnot(t1-1),bnot(t2-1)) *(yb+ye);       /// 1
wave_1_per_point26=x=x+ if(c1,bnot(t1-2),bnot(t2-2)) *(x8-xb-xf);      y=y+ if(c1,bnot(t1-2),bnot(t2-2)) *(y8-yb-yf);    /// 2
wave_1_per_point27=x=x+ if(c1,bnot(t1-3),bnot(t2-3)) *(x8-xb-xe);      y=y+ if(c1,bnot(t1-3),bnot(t2-3)) *(y8-yb-ye);    /// 3
wave_1_per_point28=x=x+ if(c1,bnot(t1-4),bnot(t2-4)) *(x8-xa-xe-xg);   y=y+ if(c1,bnot(t1-4),bnot(t2-4)) *(y8-ya-ye-yg); /// 4
wave_1_per_point29=x=x+ if(c1,bnot(t1-5),bnot(t2-5)) *(x8-xc-xe);      y=y+ if(c1,bnot(t1-5),bnot(t2-5)) *(y8-yc-ye);    /// 5
wave_1_per_point30=x=x+ if(c1,bnot(t1-6),bnot(t2-6)) *(x8-xc);         y=y+ if(c1,bnot(t1-6),bnot(t2-6)) *(y8-yc);       /// 6
wave_1_per_point31=x=x+ if(c1,bnot(t1-7),bnot(t2-7)) *(xa+xc+xf);      y=y+ if(c1,bnot(t1-7),bnot(t2-7)) *(ya+yc+yf);    /// 7
wave_1_per_point32=x=x+ if(c1,bnot(t1-8),bnot(t2-8)) *x8;              y=y+ if(c1,bnot(t1-8),bnot(t2-8)) *y8;            /// 8
wave_1_per_point33=x=x+ if(c1,bnot(t1-9),bnot(t2-9)) *(x8-xe-xg);      y=y+ if(c1,bnot(t1-9),bnot(t2-9)) *(y8-ye-yg);    /// 9
wave_1_per_point34=
wave_1_per_point35=
wave_1_per_point36=x= .04 + .015*x + c1*.02;
wave_1_per_point37=y= .83 + .015*y ; 
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=1
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=0
wavecode_2_scaling=5.92556
wavecode_2_smoothing=0.00000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=1
wavecode_3_scaling=5.92556
wavecode_3_smoothing=0.00000
wavecode_3_r=1.000
wavecode_3_g=0.000
wavecode_3_b=0.000
wavecode_3_a=0.340
shapecode_0_enabled=0
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=2
shapecode_0_x=0.130
shapecode_0_y=0.500
shapecode_0_rad=1.40514
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=8.57788
shapecode_0_r=0.400
shapecode_0_g=0.000
shapecode_0_b=0.400
shapecode_0_a=1.000
shapecode_0_r2=0.400
shapecode_0_g2=0.000
shapecode_0_b2=0.400
shapecode_0_a2=1.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=1.000
shape_0_per_frame1=x=x+.744*instance;
shapecode_1_enabled=1
shapecode_1_sides=30
shapecode_1_additive=1
shapecode_1_thickOutline=0
shapecode_1_textured=1
shapecode_1_num_inst=60
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.10937
shapecode_1_ang=3.83274
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=8.66367
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=1.000
shapecode_1_a=1.000
shapecode_1_r2=1.000
shapecode_1_g2=1.000
shapecode_1_b2=1.000
shapecode_1_a2=1.000
shapecode_1_border_r=0.000
shapecode_1_border_g=0.000
shapecode_1_border_b=0.000
shapecode_1_border_a=1.000
shape_1_per_frame1=index = instance*q32;
shape_1_per_frame2=sample = instance/num_inst;
shape_1_per_frame3=
shape_1_per_frame4=x = gmegabuf(index);
shape_1_per_frame5=y = gmegabuf(index+1)+.04;
shape_1_per_frame6=
shape_1_per_frame7=//rad = gmegabuf(index+4)*2;
shape_1_per_frame8=
shape_1_per_frame9=ang=12*(x+y)+.5*instance;
shape_1_per_frame10=
shape_1_per_frame11=b=above(sample,.5);      b2=b;
shape_1_per_frame12=r=1-above(sample,.5);      r2=r;
shape_1_per_frame13=
shapecode_2_enabled=1
shapecode_2_sides=50
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.14024
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.73458
shapecode_2_r=0.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=0.000
shapecode_2_g2=0.000
shapecode_2_b2=0.000
shapecode_2_a2=1.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.800
shapecode_3_enabled=1
shapecode_3_sides=20
shapecode_3_additive=0
shapecode_3_thickOutline=1
shapecode_3_textured=0
shapecode_3_num_inst=300
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.04914
shapecode_3_ang=0.75398
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.73458
shapecode_3_r=0.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=1.000
shapecode_3_g2=1.000
shapecode_3_b2=1.000
shapecode_3_a2=0.000
shapecode_3_border_r=0.000
shapecode_3_border_g=0.000
shapecode_3_border_b=0.000
shapecode_3_border_a=0.000
shape_3_per_frame1=sample=instance/num_inst;
shape_3_per_frame2=
shape_3_per_frame3=
shape_3_per_frame4=///// body with circle shapes
shape_3_per_frame5=
shape_3_per_frame6=s=17*sample;
shape_3_per_frame7=s1=rad*sin(17*3.14*sample);
shape_3_per_frame8=
shape_3_per_frame9=
shape_3_per_frame10=/// body
shape_3_per_frame11=x=if(above(s,0),0,0);
shape_3_per_frame12=y=if(above(s,0),-2+3*s,0);
shape_3_per_frame13=rad=if(above(s,0),3.5*s1,0);
shape_3_per_frame14=
shape_3_per_frame15=x=if(above(s,1),0,x);
shape_3_per_frame16=y=if(above(s,1),-2+3*s,y);
shape_3_per_frame17=rad=if(above(s,1),3.6*s1,rad);
shape_3_per_frame18=
shape_3_per_frame19=x=if(above(s,2),0,x);
shape_3_per_frame20=y=if(above(s,2),-2+3*s,y);
shape_3_per_frame21=rad=if(above(s,2),3.7*s1,rad);
shape_3_per_frame22=
shape_3_per_frame23=/// neck, head
shape_3_per_frame24=x=if(above(s,3),0,x);
shape_3_per_frame25=y=if(above(s,3),5+.8*s,y);
shape_3_per_frame26=rad=if(above(s,3),1.3*s1,rad);
shape_3_per_frame27=
shape_3_per_frame28=x=if(above(s,4),0,x);
shape_3_per_frame29=y=if(above(s,4),-12+5*s,y);
shape_3_per_frame30=rad=if(above(s,4),3.2*s1,rad);
shape_3_per_frame31=
shape_3_per_frame32=//// right arm + hand
shape_3_per_frame33=x=if(above(s,5),-24+5*s,x);
shape_3_per_frame34=y=if(above(s,5),6,y);
shape_3_per_frame35=rad=if(above(s,5),1.7*s1,rad);
shape_3_per_frame36=
shape_3_per_frame37=x=if(above(s,6),-19+4*s,x);
shape_3_per_frame38=y=if(above(s,6),6,y);
shape_3_per_frame39=rad=if(above(s,6),1.5*s1,rad);
shape_3_per_frame40=
shape_3_per_frame41=x=if(above(s,7),-9.+2.5*s,x);
shape_3_per_frame42=y=if(above(s,7),6,y);
shape_3_per_frame43=rad=if(above(s,7),1.3*s1,rad);
shape_3_per_frame44=
shape_3_per_frame45=/// left arm + hand
shape_3_per_frame46=x=if(above(s,8),-46+5*s,x);
shape_3_per_frame47=y=if(above(s,8),6,y);
shape_3_per_frame48=rad=if(above(s,8),1.7*s1,rad);
shape_3_per_frame49=
shape_3_per_frame50=x=if(above(s,9),-45+4*s,x);
shape_3_per_frame51=y=if(above(s,9),6,y);
shape_3_per_frame52=rad=if(above(s,9),1.5*s1,rad);
shape_3_per_frame53=
shape_3_per_frame54=x=if(above(s,10),-36+2.5*s,x);
shape_3_per_frame55=y=if(above(s,10),6,y);
shape_3_per_frame56=rad=if(above(s,10),1.3*s1,rad);
shape_3_per_frame57=
shape_3_per_frame58=//// right leg + foot
shape_3_per_frame59=x=if(above(s,11),1.3,x);
shape_3_per_frame60=y=if(above(s,11),-85+7*s,y);
shape_3_per_frame61=rad=if(above(s,11),2.3*s1,rad);
shape_3_per_frame62=
shape_3_per_frame63=x=if(above(s,12),1.3,x);
shape_3_per_frame64=y=if(above(s,12),-85+6*s,y);
shape_3_per_frame65=rad=if(above(s,12),2*s1,rad);
shape_3_per_frame66=
shape_3_per_frame67=x=if(above(s,13),-38.5+3*s,x);
shape_3_per_frame68=y=if(above(s,13),-13,y);
shape_3_per_frame69=rad=if(above(s,13),1.2*s1,rad);
shape_3_per_frame70=
shape_3_per_frame71=/// left leg + foot
shape_3_per_frame72=x=if(above(s,14),-1.3,x);
shape_3_per_frame73=y=if(above(s,14),-106+7*s,y);
shape_3_per_frame74=rad=if(above(s,14),2.3*s1,rad);
shape_3_per_frame75=
shape_3_per_frame76=x=if(above(s,15),-1.3,x);
shape_3_per_frame77=y=if(above(s,15),-103+6*s,y);
shape_3_per_frame78=rad=if(above(s,15),2*s1,rad);
shape_3_per_frame79=
shape_3_per_frame80=x=if(above(s,16),-51.5+3*s,x);
shape_3_per_frame81=y=if(above(s,16),-13,y);
shape_3_per_frame82=rad=if(above(s,16),1.2*s1,rad);
shape_3_per_frame83=
shape_3_per_frame84=
shape_3_per_frame85=y=y+.5*sin(5*time+7*q1)*abs(x);
shape_3_per_frame86=x=x+.5*sin(5*time-7*q1)*abs(x+y);
shape_3_per_frame87=
shape_3_per_frame88=
shape_3_per_frame89=my_x = x;
shape_3_per_frame90=my_y = y;
shape_3_per_frame91=my_z = 0;
shape_3_per_frame92=
shape_3_per_frame93=//// rotations
shape_3_per_frame94=
shape_3_per_frame95=d = 280; 
shape_3_per_frame96=zoom =1;
shape_3_per_frame97=
shape_3_per_frame98=w1 = .2*time;
shape_3_per_frame99=w2 = 0;
shape_3_per_frame100=w3 = 0;
shape_3_per_frame101=
shape_3_per_frame102=x1 = cos(w1)*my_x + sin(w1)*my_y;
shape_3_per_frame103=y1 = -sin(w1)*my_x + cos(w1)*my_y;
shape_3_per_frame104=z1 = my_z;
shape_3_per_frame105=
shape_3_per_frame106=x2 = cos(w2)*x1 + sin(w2)*z1;
shape_3_per_frame107=z2 = -sin(w2)*x1 + cos(w2)*z1;
shape_3_per_frame108=y2 = y1;
shape_3_per_frame109=
shape_3_per_frame110=y3 = cos(w3)*y2 + sin(w3)*z2;
shape_3_per_frame111=z3 = -sin(w3)*y2 + cos(w3)*z2;
shape_3_per_frame112=x3 = x2;
shape_3_per_frame113=
shape_3_per_frame114=l = sqrt(x3*x3 + y3*y3);
shape_3_per_frame115=w = atan2(x3,y3);
shape_3_per_frame116=d = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));
shape_3_per_frame117=p = tan(asin(1) + atan2(d+z3,l));
shape_3_per_frame118=
shape_3_per_frame119=my_x = zoom*sin(w)*p;
shape_3_per_frame120=my_y = zoom*cos(w)*p;
shape_3_per_frame121=
shape_3_per_frame122=x = 0.5 + my_x/q2;
shape_3_per_frame123=y = 0.5 + my_y/q1;
shape_3_per_frame124=
shape_3_per_frame125=
shape_3_per_frame126=rad=.1*rad;
per_frame_init_1=count = 60;
per_frame_init_2=attributes = 8;
per_frame_init_3=radius = 0.02;
per_frame_init_4=
per_frame_init_5=// randomize initial coordinates
per_frame_init_6=index = 0;
per_frame_init_7=loop(count, 
per_frame_init_8=     exec2( assign( gmegabuf(index*attributes), int(rand(1000))/1000),
per_frame_init_9=            assign( index, index+1)
per_frame_init_10=          )
per_frame_init_11=    );
per_frame_init_12=
per_frame_init_13=index = 0;
per_frame_init_14=loop(count, 
per_frame_init_15=     exec2( assign( gmegabuf(index*attributes+1), int(rand(1000))/1000),
per_frame_init_16=            assign( index, index+1)
per_frame_init_17=          )
per_frame_init_18=    );
per_frame_init_19=
per_frame_init_20=
per_frame_init_21=
per_frame_init_22=index = 0;
per_frame_init_23=loop(count, 
per_frame_init_24=     exec2( assign( gmegabuf(index*attributes+4), radius),
per_frame_init_25=            assign( index, index+1)
per_frame_init_26=          )
per_frame_init_27=    );
per_frame_init_28=
per_frame_init_29=// randomize colors
per_frame_init_30=
per_frame_init_31=index = 0;
per_frame_init_32=loop(count, 
per_frame_init_33=     exec2( assign( gmegabuf(index*attributes+5), int(rand(1000))/1000),
per_frame_init_34=            assign( index, index+1)
per_frame_init_35=          )
per_frame_init_36=    );
per_frame_init_37=
per_frame_init_38=index = 0;
per_frame_init_39=loop(count, 
per_frame_init_40=     exec2( assign( gmegabuf(index*attributes+6), int(rand(1000))/1000),
per_frame_init_41=            assign( index, index+1)
per_frame_init_42=          )
per_frame_init_43=    );
per_frame_init_44=
per_frame_init_45=index = 0;
per_frame_init_46=loop(count, 
per_frame_init_47=     exec2( assign( gmegabuf(index*attributes+7), int(rand(1000))/1000),
per_frame_init_48=            assign( index, index+1)
per_frame_init_49=          )
per_frame_init_50=    );
per_frame_init_51=
per_frame_init_52=q32 = attributes;
per_frame_1=chng=sin(time*.5);
per_frame_2=cthr=.9999;
per_frame_3=mq21=if(above(chng,cthr),rand(3),mq21);
per_frame_4=mq22=if(above(chng,cthr),rand(3),mq22);
per_frame_5=mq23=if(above(chng,cthr),rand(3),mq23);
per_frame_6=mq24=if(above(chng,cthr),rand(2),mq24);
per_frame_7=mq25=if(above(chng,cthr),rand(2),mq25);
per_frame_8=mq26=if(above(chng,cthr),rand(2),mq26);
per_frame_9=mq27=if(above(chng,cthr),rand(1),mq27);
per_frame_10=mq28=if(above(chng,cthr),rand(1),mq28);
per_frame_11=mq29=if(above(chng,cthr),rand(1)*.3,mq29);
per_frame_12=mq31=if(above(chng,cthr),rand(1)*.3,mq31);
per_frame_13=monitor=chng;
per_frame_14=q21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;
per_frame_15=q27=mq27;q28=mq28;q29=mq29;q31=mq31;
per_frame_16=
per_frame_17=monitor=mq1;
per_frame_18=vol=bass+treb+mid;
per_frame_19=atime=atime+vol;
per_frame_20=q11=.4+sin(atime*.006        )*.4;
per_frame_21=q12=.4+cos(atime*.00613828348)*.4;
per_frame_22=q13=.4+sin(atime*.00598593455)*.4;
per_frame_23=monitor=q13;
per_frame_24=
per_frame_25=warp = 0;
per_frame_26=zoom = 1.00;
per_frame_27=bt=bt+bass/fps;
per_frame_28=q10=bt;
per_frame_29=tt=tt+treb/fps;
per_frame_30=q11=tt;
per_frame_31=
per_frame_32=/////////
per_frame_33=
per_frame_34=gravity = 0.006/fps;
per_frame_35=dampening = 0.99;
per_frame_36=
per_frame_37=// adding velocity to position vector
per_frame_38=
per_frame_39=index = 0;
per_frame_40=loop(count, 
per_frame_41=     exec2( assign( gmegabuf(index*attributes+1), // vertically
per_frame_42=                    gmegabuf(index*attributes+1) +
per_frame_43=                    gmegabuf(index*attributes+3)
per_frame_44=                  )
per_frame_45=            ,
per_frame_46=            assign( index , index+1)
per_frame_47=          )
per_frame_48=    );
per_frame_49=
per_frame_50=index = 0;
per_frame_51=loop(count, 
per_frame_52=     exec2( assign( gmegabuf(index*attributes), // horizontally 
per_frame_53=                    gmegabuf(index*attributes) +
per_frame_54=                    gmegabuf(index*attributes+2)
per_frame_55=                  )
per_frame_56=            ,
per_frame_57=            assign( index , index+1)
per_frame_58=          )
per_frame_59=    );
per_frame_60=
per_frame_61=// bounce off left border
per_frame_62=
per_frame_63=index = 0;
per_frame_64=loop(count, 
per_frame_65=     exec2( assign( gmegabuf(index*attributes+2)
per_frame_66=                   , 
per_frame_67=                    if( below( gmegabuf(index*attributes), 0)
per_frame_68=                       ,
per_frame_69=                        abs(gmegabuf(index*attributes+2))*dampening
per_frame_70=                       ,
per_frame_71=                        gmegabuf(index*attributes+2)
per_frame_72=                      ) 
per_frame_73=                  )
per_frame_74=            ,
per_frame_75=            assign( index , index+1)
per_frame_76=          )
per_frame_77=    );
per_frame_78=
per_frame_79=// bounce off right border
per_frame_80=
per_frame_81=index = 0;
per_frame_82=loop(count, 
per_frame_83=     exec2( assign( gmegabuf(index*attributes+2)
per_frame_84=                   , 
per_frame_85=                    if( above( gmegabuf(index*attributes), 1)
per_frame_86=                       ,
per_frame_87=                        -abs(gmegabuf(index*attributes+2))*dampening
per_frame_88=                       ,
per_frame_89=                        gmegabuf(index*attributes+2)
per_frame_90=                      ) 
per_frame_91=                  )
per_frame_92=            ,
per_frame_93=            assign( index , index+1)
per_frame_94=          )
per_frame_95=    );
per_frame_96=
per_frame_97=// bounce off bottom
per_frame_98=
per_frame_99=index = 0;
per_frame_100=loop(count, 
per_frame_101=     exec2( assign( gmegabuf(index*attributes+3), 
per_frame_102=                    gmegabuf(index*attributes+3) - gravity
per_frame_103=                  )
per_frame_104=            ,
per_frame_105=            assign( index , index+1)
per_frame_106=          )
per_frame_107=    );
per_frame_108=
per_frame_109=index = 0;
per_frame_110=loop(count, 
per_frame_111=     exec2( assign( gmegabuf(index*attributes+3)
per_frame_112=                   , 
per_frame_113=                    if( below( gmegabuf(index*attributes+1), 0)
per_frame_114=                       ,
per_frame_115=                        abs(gmegabuf(index*attributes+3))*dampening
per_frame_116=                       ,
per_frame_117=                        gmegabuf(index*attributes+3)
per_frame_118=                      ) 
per_frame_119=                  )
per_frame_120=            ,
per_frame_121=            assign( index , index+1)
per_frame_122=          )
per_frame_123=    );
per_frame_124=
per_frame_125=
per_frame_126=// inter object bounce
per_frame_127=
per_frame_128=index1 = 0;
per_frame_129=index2 = 0;
per_frame_130=
per_frame_131=hit = -1;
per_frame_132=pi2 = asin(1);
per_frame_133=loop(count, // for each object1
per_frame_134=     exec3( loop( count-index1, // for each other object2
per_frame_135=                  exec3( assign( hit, below( sqrt( sqr( gmegabuf(index1*attributes)   - gmegabuf(index2*attributes)   )  // possible hit?
per_frame_136=                                                   +
per_frame_137=                                                   sqr( gmegabuf(index1*attributes+1) - gmegabuf(index2*attributes+1) )
per_frame_138=                                                 ),
per_frame_139=                                             gmegabuf(index1*attributes + 4) + gmegabuf(index2*attributes + 4)
per_frame_140=                                           )
per_frame_141=                                      * // AND
per_frame_142=                                      above( sqrt( sqr( gmegabuf(index1*attributes)   - gmegabuf(index2*attributes)   ) // objects move towards each other?
per_frame_143=                                                   +
per_frame_144=                                                   sqr( gmegabuf(index1*attributes+1) - gmegabuf(index2*attributes+1) )
per_frame_145=                                                 ),
per_frame_146=                                             sqrt( sqr( gmegabuf(index1*attributes+0) - gmegabuf(index2*attributes+0)
per_frame_147=                                                        + 
per_frame_148=                                                        gmegabuf(index1*attributes+2) - gmegabuf(index2*attributes+2)
per_frame_149=                                                      )
per_frame_150=                                                   +
per_frame_151=                                                   sqr( gmegabuf(index1*attributes+1) - gmegabuf(index2*attributes+1)
per_frame_152=                                                        +
per_frame_153=                                                        gmegabuf(index1*attributes+3) - gmegabuf(index2*attributes+3) 
per_frame_154=                                                      )
per_frame_155=                                                 )
per_frame_156=                                           )
per_frame_157=                                             
per_frame_158=                               ),
per_frame_159=                         exec3( exec3( assign(ref_ang, atan2( gmegabuf(index2*attributes)-gmegabuf(index1*attributes), // calculating the angle of the common tangent
per_frame_160=                                                              gmegabuf(index2*attributes + 1)-gmegabuf(index1*attributes + 1)
per_frame_161=                                                            ) + pi2
per_frame_162=                                             ),
per_frame_163=                                       assign(v1     , sqrt(sqr( gmegabuf(index1*attributes + 2)) + sqr( gmegabuf(index1*attributes + 3)))), // velocity of object1
per_frame_164=                                       assign(v2     , sqrt(sqr( gmegabuf(index2*attributes + 2)) + sqr( gmegabuf(index2*attributes + 3))))  // velocity of object2
per_frame_165=                                     ),
per_frame_166=                                exec3( assign(w1, atan2( gmegabuf(index1*attributes + 2), gmegabuf(index1*attributes + 3) ) ), // object1 motion angle
per_frame_167=                                       assign(w2, atan2( gmegabuf(index2*attributes + 2), gmegabuf(index2*attributes + 3) ) ), // object2 motion angle
per_frame_168=                                       assign( gmegabuf( index1*attributes + 2),
per_frame_169=                                               if( hit,
per_frame_170=                                                   sin(ref_ang)*v1*cos(w1-ref_ang) + sin(ref_ang+pi2)*v2*cos(w2-ref_ang-pi2),
per_frame_171=                                                   gmegabuf( index1*attributes + 2)
per_frame_172=                                               )
per_frame_173=                                             )
per_frame_174=                                     ),
per_frame_175=                                exec3( assign( gmegabuf( index1*attributes + 3),
per_frame_176=                                               if( hit,
per_frame_177=                                                   cos(ref_ang)*v1*cos(w1-ref_ang) + cos(ref_ang+pi2)*v2*cos(w2-ref_ang-pi2),
per_frame_178=                                                   gmegabuf( index1*attributes + 3)
per_frame_179=                                               )
per_frame_180=                                             ),
per_frame_181=                                       assign( gmegabuf( index2*attributes + 2),
per_frame_182=                                               if( hit,
per_frame_183=                                                   sin(ref_ang)*v2*cos(w2-ref_ang) + sin(ref_ang+pi2)*v1*cos(w1-ref_ang-pi2),
per_frame_184=                                                   gmegabuf( index2*attributes + 2)
per_frame_185=                                               )
per_frame_186=                                             ),
per_frame_187=                                       assign( gmegabuf( index2*attributes + 3),
per_frame_188=                                               if( hit,
per_frame_189=                                                   cos(ref_ang)*v2*cos(w2-ref_ang) + cos(ref_ang+pi2)*v1*cos(w1-ref_ang-pi2),
per_frame_190=                                                   gmegabuf( index2*attributes + 3)
per_frame_191=                                               )
per_frame_192=                                             )
per_frame_193=                                     )
per_frame_194=                              ),
per_frame_195=      
per_frame_196=                         assign(index2, index2+1)
per_frame_197=                       )
per_frame_198=                ),
per_frame_199=            assign(index1,index1+1), // increment index of object1
per_frame_200=            assign(index2,index1)    // starting index of object to compare may not be smaller than the ones that are already compared
per_frame_201=           )
per_frame_202=    );
per_frame_203=
per_frame_204=q1 = aspectx;
per_frame_205=q2 = aspecty;
warp_1=`shader_body
warp_2=`{
warp_3=`float2 zoom = 1.53;
warp_4=`float2 cntr = float2(0,0);
warp_5=`float2 c = float2(0.6*q7,0.75*q7);
warp_6=`float2 my_uv = (uv-0.5-cntr)*zoom;
warp_7=`my_uv = float2(my_uv.x*my_uv.x - my_uv.y*my_uv.y, 2*my_uv.x*my_uv.y) + c;
warp_8=`    ret = tex2D( sampler_fc_main, my_uv) - 0.012;
warp_9=`float4 noise9 = tex3D(sampler_noisevol_hq, 
warp_10=`                      ((my_uv.xyy*q27
warp_11=`                       )*texsize.xyy*texsize_noisevol_hq.zww
warp_12=`                      ).xyz*
warp_13=`                      float3(1,1,0)*0.05 + 
warp_14=`                      time*float3(0,0,1)*q29
warp_15=`                     );
warp_16=`if(ret.x> q21*q13         && ret.x<= q24*q11        )ret.y -= (noise9).x*.5; 
warp_17=`if(ret.y> q22*q11         && ret.y<= q25*q12        )ret.z -= (noise9).y*.5; 
warp_18=`if(ret.z> q23*q12         && ret.z<= q26*q13        )ret.x -= (noise9).z*.5; 
warp_19=`}
comp_1=` float s1, s2, s3, s4, ioffs, x, y;
comp_2=` float2 d,e;
comp_3=`
comp_4=` shader_body{
comp_5=`  ioffs=2; // higher values = smoother results for distortion
comp_6=`  x=uv.x, y=uv.y;
comp_7=`  d=texsize.zw;
comp_8=`  e=texsize.yx; 
comp_9=` s1=GetPixel(uv+d*float2(x+ioffs,y)).x;
comp_10=` s2=GetPixel(uv+d*float2(y-ioffs,y)).y;
comp_11=` s3=GetPixel(uv+d*float2(x,y+ioffs)).z;
comp_12=` s4=GetPixel(uv+d*float2(y,x-ioffs)).x;
comp_13=`
comp_14=` // distorted noise
comp_15=` ret=tex2D(sampler_noise_hq,d*float2(time*.1*roam_cos.x,time*.1*roam_sin.y)+uv*
comp_16=`.2+17000*d*float2( (s1-s2)/(ioffs*64), (s3-s4)/(ioffs*64) ) ).x;
comp_17=`ret*=GetPixel(uv);
comp_18=`float4 noise9 = tex3D(sampler_noisevol_hq, 
comp_19=`                      ((uv.xyy*q28
comp_20=`                       )*texsize.xyy*texsize_noisevol_hq.zww
comp_21=`                      ).xyz*
comp_22=`                      float3(1,1,0)*0.05 + 
comp_23=`                      time*float3(0,0,1)*q31
comp_24=`                     );
comp_25=`if(ret.x> q26*q13         && ret.x<= q23*q11        )ret.z -= (noise9).x*.5; 
comp_26=`if(ret.y> q25*q11         && ret.y<= q22*q12        )ret.x -= (noise9).y*.5; 
comp_27=`if(ret.z> q24*q12         && ret.z<= q21*q13        )ret.y -= (noise9).z*.5; 
comp_28=`
comp_29=`}
