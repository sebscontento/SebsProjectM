MILKDROP_PRESET_VERSION=201
PSVERSION=2
PSVERSION_WARP=2
PSVERSION_COMP=2
[preset00]
fRating=3.000
fGammaAdj=1.560
fDecay=1.000
fVideoEchoZoom=1.000
fVideoEchoAlpha=1.000
nVideoEchoOrientation=0
nWaveMode=1
bAdditiveWaves=0
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=0
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=1.000
fWaveSmoothing=0.750
fWaveParam=0.000
fModWaveAlphaStart=0.750
fModWaveAlphaEnd=0.950
fWarpAnimSpeed=5.996
fWarpScale=1.331
fZoomExponent=1.00000
fShader=0.000
zoom=0.99840
rot=0.00200
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=1.00000
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.005
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.010
ib_r=0.500
ib_g=0.900
ib_b=0.500
ib_a=1.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.900
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=1
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=1
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=1.000
wave_0_per_point1=//apply zoom burst on beat
wave_0_per_point2=flag = above(q3,2);
wave_0_per_point3=//state zero is ready state
wave_0_per_point4=state = state + flag*equal(state,0);
wave_0_per_point5=
wave_0_per_point6=//upwards flight
wave_0_per_point7=yval = if(equal(state,0),0, yval);
wave_0_per_point8=yval = yval + 0.00004*equal(state,1);
wave_0_per_point9=ymax = if(equal(state,0),rand(100)*0.004,ymax);
wave_0_per_point10=
wave_0_per_point11=//hit apogee
wave_0_per_point12=state = if(above(yval,0.5+ymax),2,state);
wave_0_per_point13=
wave_0_per_point14=//reset variable
wave_0_per_point15=yval = if(equal(state,0),0, yval);
wave_0_per_point16=burst = if(equal(state,0),0.001,burst);
wave_0_per_point17=alphax = if(equal(state,0),1,alphax);
wave_0_per_point18=xdriftinc = if(equal(state,0),0,xdriftinc);
wave_0_per_point19=
wave_0_per_point20=burstspeed = if(equal(state,0),rand(10),burstspeed);
wave_0_per_point21=xdrift = if(equal(state,0),rand(20),xdrift);
wave_0_per_point22=//to get the numbers small enough have to use constants
wave_0_per_point23=xdriftinc = xdriftinc
wave_0_per_point24=+ equal(xdrift,0)*equal(state,1)*0.00002
wave_0_per_point25=+ equal(xdrift,1)*equal(state,1)*0.000018
wave_0_per_point26=+ equal(xdrift,2)*equal(state,1)*0.000016
wave_0_per_point27=+ equal(xdrift,3)*equal(state,1)*0.000014
wave_0_per_point28=+ equal(xdrift,4)*equal(state,1)*0.000012
wave_0_per_point29=+ equal(xdrift,5)*equal(state,1)*0.00001
wave_0_per_point30=+ equal(xdrift,6)*equal(state,1)*0.000008
wave_0_per_point31=+ equal(xdrift,7)*equal(state,1)*0.000006
wave_0_per_point32=+ equal(xdrift,8)*equal(state,1)*0.000004
wave_0_per_point33=+ equal(xdrift,9)*equal(state,1)*0.000002
wave_0_per_point34=+ equal(xdrift,11)*equal(state,1)*-0.000002
wave_0_per_point35=+ equal(xdrift,12)*equal(state,1)*-0.000004
wave_0_per_point36=+ equal(xdrift,13)*equal(state,1)*-0.000006
wave_0_per_point37=+ equal(xdrift,14)*equal(state,1)*-0.000008
wave_0_per_point38=+ equal(xdrift,15)*equal(state,1)*-0.00001
wave_0_per_point39=+ equal(xdrift,16)*equal(state,1)*-0.000012
wave_0_per_point40=+ equal(xdrift,17)*equal(state,1)*-0.000014
wave_0_per_point41=+ equal(xdrift,18)*equal(state,1)*-0.000016
wave_0_per_point42=+ equal(xdrift,19)*equal(state,1)*-0.000018;
wave_0_per_point43=
wave_0_per_point44=burst = burst
wave_0_per_point45=+ equal(burstspeed,0)*equal(state,2)*0.000024
wave_0_per_point46=+ equal(burstspeed,1)*equal(state,2)*0.000022
wave_0_per_point47=+ equal(burstspeed,2)*equal(state,2)*0.00002
wave_0_per_point48=+ equal(burstspeed,3)*equal(state,2)*0.000018
wave_0_per_point49=+ equal(burstspeed,4)*equal(state,2)*0.000016
wave_0_per_point50=+ equal(burstspeed,5)*equal(state,2)*0.000014
wave_0_per_point51=+ equal(burstspeed,6)*equal(state,2)*0.000012
wave_0_per_point52=+ equal(burstspeed,7)*equal(state,2)*0.00001
wave_0_per_point53=+ equal(burstspeed,8)*equal(state,2)*0.000008
wave_0_per_point54=+ equal(burstspeed,9)*equal(state,2)*0.000008;
wave_0_per_point55=
wave_0_per_point56=alphax = alphax - 0.00004*equal(state,2);
wave_0_per_point57=state = if(below(alphax,0),0,state);
wave_0_per_point58=
wave_0_per_point59=
wave_0_per_point60=s = sample*3.14*100;
wave_0_per_point61=ss = sample*6.28*1000;
wave_0_per_point62=
wave_0_per_point63=//draw torus
wave_0_per_point64=xs = (burst*0.1 + burst*cos(s))*cos(ss);
wave_0_per_point65=ys = (burst*0.1 + burst*cos(s))*sin(ss);
wave_0_per_point66=zs = burst*sin(s);
wave_0_per_point67=
wave_0_per_point68=
wave_0_per_point69=//rotate x axis
wave_0_per_point70=angle = sin(q1*0.025)*6.28;
wave_0_per_point71=yx = ys*cos(angle) - zs*sin(angle);
wave_0_per_point72=zx = ys*sin(angle) + zs*cos(angle);
wave_0_per_point73=xx = xs;
wave_0_per_point74=
wave_0_per_point75=//rotate y axis
wave_0_per_point76=angle2 = sin(q1*0.03)*6.28;
wave_0_per_point77=xd = xx*cos(angle2) - zx*sin(angle2);
wave_0_per_point78=zd = xx*sin(angle2) + zx*cos(angle2);
wave_0_per_point79=yd = yx;
wave_0_per_point80=
wave_0_per_point81=//rotaye z axis
wave_0_per_point82=angle3 = sin(q1*0.022)*6.28;
wave_0_per_point83=xn = xd*cos(angle3) - yd*sin(angle3);
wave_0_per_point84=yn = xd*sin(angle3) + yd*cos(angle3);
wave_0_per_point85=
wave_0_per_point86=zd = zd + 2;
wave_0_per_point87=
wave_0_per_point88=x = xn*zd*0.3 + 0.5;
wave_0_per_point89=y = yn*zd*0.3*1.2;
wave_0_per_point90=
wave_0_per_point91=
wave_0_per_point92=x = x + xdriftinc;
wave_0_per_point93=y = y + sin(yval*1.5) - 0.18;
wave_0_per_point94=
wave_0_per_point95=
wave_0_per_point96=r = 0.5 + 0.5*sin(q1*1.2 + x + x);
wave_0_per_point97=g = 0.5 + 0.5*sin(q1*1.5 + x + y);
wave_0_per_point98=b = 0.5 + 0.5*sin(q1*1.36 + y + y);
wavecode_1_enabled=1
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=1
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=1
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wave_1_per_point1=//apply zoom burst on beat
wave_1_per_point2=flag = above(q3,2);
wave_1_per_point3=//state zero is ready state
wave_1_per_point4=state = state + flag*equal(state,0);
wave_1_per_point5=
wave_1_per_point6=//upwards flight
wave_1_per_point7=yval = if(equal(state,0),0, yval);
wave_1_per_point8=yval = yval + 0.00004*equal(state,1);
wave_1_per_point9=ymax = if(equal(state,0),rand(100)*0.004,ymax);
wave_1_per_point10=
wave_1_per_point11=//hit apogee
wave_1_per_point12=state = if(above(yval,0.5+ymax),2,state);
wave_1_per_point13=
wave_1_per_point14=//reset variable
wave_1_per_point15=yval = if(equal(state,0),0, yval);
wave_1_per_point16=burst = if(equal(state,0),0.001,burst);
wave_1_per_point17=alphax = if(equal(state,0),1,alphax);
wave_1_per_point18=xdriftinc = if(equal(state,0),0,xdriftinc);
wave_1_per_point19=
wave_1_per_point20=burstspeed = if(equal(state,0),rand(10),burstspeed);
wave_1_per_point21=xdrift = if(equal(state,0),rand(20),xdrift);
wave_1_per_point22=//to get the numbers small enough have to use constants
wave_1_per_point23=xdriftinc = xdriftinc
wave_1_per_point24=+ equal(xdrift,0)*equal(state,1)*0.00002
wave_1_per_point25=+ equal(xdrift,1)*equal(state,1)*0.000018
wave_1_per_point26=+ equal(xdrift,2)*equal(state,1)*0.000016
wave_1_per_point27=+ equal(xdrift,3)*equal(state,1)*0.000014
wave_1_per_point28=+ equal(xdrift,4)*equal(state,1)*0.000012
wave_1_per_point29=+ equal(xdrift,5)*equal(state,1)*0.00001
wave_1_per_point30=+ equal(xdrift,6)*equal(state,1)*0.000008
wave_1_per_point31=+ equal(xdrift,7)*equal(state,1)*0.000006
wave_1_per_point32=+ equal(xdrift,8)*equal(state,1)*0.000004
wave_1_per_point33=+ equal(xdrift,9)*equal(state,1)*0.000002
wave_1_per_point34=+ equal(xdrift,11)*equal(state,1)*-0.000002
wave_1_per_point35=+ equal(xdrift,12)*equal(state,1)*-0.000004
wave_1_per_point36=+ equal(xdrift,13)*equal(state,1)*-0.000006
wave_1_per_point37=+ equal(xdrift,14)*equal(state,1)*-0.000008
wave_1_per_point38=+ equal(xdrift,15)*equal(state,1)*-0.00001
wave_1_per_point39=+ equal(xdrift,16)*equal(state,1)*-0.000012
wave_1_per_point40=+ equal(xdrift,17)*equal(state,1)*-0.000014
wave_1_per_point41=+ equal(xdrift,18)*equal(state,1)*-0.000016
wave_1_per_point42=+ equal(xdrift,19)*equal(state,1)*-0.000018;
wave_1_per_point43=
wave_1_per_point44=burst = burst
wave_1_per_point45=+ equal(burstspeed,0)*equal(state,2)*0.000024
wave_1_per_point46=+ equal(burstspeed,1)*equal(state,2)*0.000022
wave_1_per_point47=+ equal(burstspeed,2)*equal(state,2)*0.00002
wave_1_per_point48=+ equal(burstspeed,3)*equal(state,2)*0.000018
wave_1_per_point49=+ equal(burstspeed,4)*equal(state,2)*0.000016
wave_1_per_point50=+ equal(burstspeed,5)*equal(state,2)*0.000014
wave_1_per_point51=+ equal(burstspeed,6)*equal(state,2)*0.000012
wave_1_per_point52=+ equal(burstspeed,7)*equal(state,2)*0.00001
wave_1_per_point53=+ equal(burstspeed,8)*equal(state,2)*0.000008
wave_1_per_point54=+ equal(burstspeed,9)*equal(state,2)*0.000008;
wave_1_per_point55=
wave_1_per_point56=alphax = alphax - 0.00004*equal(state,2);
wave_1_per_point57=state = if(below(alphax,0),0,state);
wave_1_per_point58=
wave_1_per_point59=
wave_1_per_point60=s = sample*3.14*100;
wave_1_per_point61=ss = sample*6.28*1000;
wave_1_per_point62=
wave_1_per_point63=//draw torus
wave_1_per_point64=xs = (burst + 0.0001*cos(s))*cos(ss);
wave_1_per_point65=ys = (burst + 0.0001*cos(s))*sin(ss);
wave_1_per_point66=zs = 0.1*burst*sin(s);
wave_1_per_point67=
wave_1_per_point68=
wave_1_per_point69=//rotate x axis
wave_1_per_point70=angle = sin(-q1*0.035)*6.28;
wave_1_per_point71=yx = ys*cos(angle) - zs*sin(angle);
wave_1_per_point72=zx = ys*sin(angle) + zs*cos(angle);
wave_1_per_point73=xx = xs;
wave_1_per_point74=
wave_1_per_point75=//rotate y axis
wave_1_per_point76=angle2 = sin(q1*0.03)*6.28;
wave_1_per_point77=xd = xx*cos(angle2) - zx*sin(angle2);
wave_1_per_point78=zd = xx*sin(angle2) + zx*cos(angle2);
wave_1_per_point79=yd = yx;
wave_1_per_point80=
wave_1_per_point81=//rotaye z axis
wave_1_per_point82=angle3 = sin(-q1*0.032)*6.28;
wave_1_per_point83=xn = xd*cos(angle3) - yd*sin(angle3);
wave_1_per_point84=yn = xd*sin(angle3) + yd*cos(angle3);
wave_1_per_point85=
wave_1_per_point86=zd = zd + 2;
wave_1_per_point87=
wave_1_per_point88=x = xn*zd*0.3 + 0.5;
wave_1_per_point89=y = yn*zd*0.3*1.2;
wave_1_per_point90=
wave_1_per_point91=
wave_1_per_point92=x = x + xdriftinc;
wave_1_per_point93=y = y + sin(yval*1.5) - 0.18;
wave_1_per_point94=
wave_1_per_point95=
wave_1_per_point96=r = 0.5 + 0.5*sin(q1*1.7 + x + x);
wave_1_per_point97=g = 0.5 + 0.5*sin(q1*1.5 + x + y);
wave_1_per_point98=b = 0.5 + 0.5*sin(q1*1.16 + y + y);
wavecode_2_enabled=1
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=1
wavecode_2_bUseDots=1
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=1
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wave_2_per_point1=//apply zoom burst on beat
wave_2_per_point2=flag = above(q3,2);
wave_2_per_point3=//state zero is ready state
wave_2_per_point4=state = state + flag*equal(state,0);
wave_2_per_point5=
wave_2_per_point6=//upwards flight
wave_2_per_point7=yval = if(equal(state,0),0, yval);
wave_2_per_point8=yval = yval + 0.00004*equal(state,1);
wave_2_per_point9=ymax = if(equal(state,0),rand(100)*0.004,ymax);
wave_2_per_point10=
wave_2_per_point11=//hit apogee
wave_2_per_point12=state = if(above(yval,0.5+ymax),2,state);
wave_2_per_point13=
wave_2_per_point14=//reset variable
wave_2_per_point15=yval = if(equal(state,0),0, yval);
wave_2_per_point16=burst = if(equal(state,0),0.001,burst);
wave_2_per_point17=alphax = if(equal(state,0),1,alphax);
wave_2_per_point18=xdriftinc = if(equal(state,0),0,xdriftinc);
wave_2_per_point19=
wave_2_per_point20=burstspeed = if(equal(state,0),rand(10),burstspeed);
wave_2_per_point21=xdrift = if(equal(state,0),rand(20),xdrift);
wave_2_per_point22=//to get the numbers small enough have to use constants
wave_2_per_point23=xdriftinc = xdriftinc
wave_2_per_point24=+ equal(xdrift,0)*equal(state,1)*0.00002
wave_2_per_point25=+ equal(xdrift,1)*equal(state,1)*0.000018
wave_2_per_point26=+ equal(xdrift,2)*equal(state,1)*0.000016
wave_2_per_point27=+ equal(xdrift,3)*equal(state,1)*0.000014
wave_2_per_point28=+ equal(xdrift,4)*equal(state,1)*0.000012
wave_2_per_point29=+ equal(xdrift,5)*equal(state,1)*0.00001
wave_2_per_point30=+ equal(xdrift,6)*equal(state,1)*0.000008
wave_2_per_point31=+ equal(xdrift,7)*equal(state,1)*0.000006
wave_2_per_point32=+ equal(xdrift,8)*equal(state,1)*0.000004
wave_2_per_point33=+ equal(xdrift,9)*equal(state,1)*0.000002
wave_2_per_point34=+ equal(xdrift,11)*equal(state,1)*-0.000002
wave_2_per_point35=+ equal(xdrift,12)*equal(state,1)*-0.000004
wave_2_per_point36=+ equal(xdrift,13)*equal(state,1)*-0.000006
wave_2_per_point37=+ equal(xdrift,14)*equal(state,1)*-0.000008
wave_2_per_point38=+ equal(xdrift,15)*equal(state,1)*-0.00001
wave_2_per_point39=+ equal(xdrift,16)*equal(state,1)*-0.000012
wave_2_per_point40=+ equal(xdrift,17)*equal(state,1)*-0.000014
wave_2_per_point41=+ equal(xdrift,18)*equal(state,1)*-0.000016
wave_2_per_point42=+ equal(xdrift,19)*equal(state,1)*-0.000018;
wave_2_per_point43=
wave_2_per_point44=burst = burst
wave_2_per_point45=+ equal(burstspeed,0)*equal(state,2)*0.000024
wave_2_per_point46=+ equal(burstspeed,1)*equal(state,2)*0.000022
wave_2_per_point47=+ equal(burstspeed,2)*equal(state,2)*0.00002
wave_2_per_point48=+ equal(burstspeed,3)*equal(state,2)*0.000018
wave_2_per_point49=+ equal(burstspeed,4)*equal(state,2)*0.000016
wave_2_per_point50=+ equal(burstspeed,5)*equal(state,2)*0.000014
wave_2_per_point51=+ equal(burstspeed,6)*equal(state,2)*0.000012
wave_2_per_point52=+ equal(burstspeed,7)*equal(state,2)*0.00001
wave_2_per_point53=+ equal(burstspeed,8)*equal(state,2)*0.000008
wave_2_per_point54=+ equal(burstspeed,9)*equal(state,2)*0.000008;
wave_2_per_point55=
wave_2_per_point56=alphax = alphax - 0.00004*equal(state,2);
wave_2_per_point57=state = if(below(alphax,0),0,state);
wave_2_per_point58=
wave_2_per_point59=
wave_2_per_point60=s = sample*3.14*100;
wave_2_per_point61=ss = sample*6.28*1000;
wave_2_per_point62=
wave_2_per_point63=//draw torus
wave_2_per_point64=xs = (burst*0.8 + 0.4*burst*cos(s))*cos(ss);
wave_2_per_point65=ys = (burst*0.8 + 0.4*burst*cos(s))*sin(ss);
wave_2_per_point66=zs = 0.4*burst*sin(s);
wave_2_per_point67=
wave_2_per_point68=
wave_2_per_point69=//rotate x axis
wave_2_per_point70=angle = sin(-q1*0.015)*6.28;
wave_2_per_point71=yx = ys*cos(angle) - zs*sin(angle);
wave_2_per_point72=zx = ys*sin(angle) + zs*cos(angle);
wave_2_per_point73=xx = xs;
wave_2_per_point74=
wave_2_per_point75=//rotate y axis
wave_2_per_point76=angle2 = sin(q1*0.01579)*6.28;
wave_2_per_point77=xd = xx*cos(angle2) - zx*sin(angle2);
wave_2_per_point78=zd = xx*sin(angle2) + zx*cos(angle2);
wave_2_per_point79=yd = yx;
wave_2_per_point80=
wave_2_per_point81=//rotaye z axis
wave_2_per_point82=angle3 = sin(q1*0.022)*6.28;
wave_2_per_point83=xn = xd*cos(angle3) - yd*sin(angle3);
wave_2_per_point84=yn = xd*sin(angle3) + yd*cos(angle3);
wave_2_per_point85=
wave_2_per_point86=zd = zd + 2;
wave_2_per_point87=
wave_2_per_point88=x = xn*zd*0.3 + 0.5;
wave_2_per_point89=y = yn*zd*0.3*1.2;
wave_2_per_point90=
wave_2_per_point91=
wave_2_per_point92=x = x + xdriftinc;
wave_2_per_point93=y = y + sin(yval*1.5) - 0.18;
wave_2_per_point94=
wave_2_per_point95=
wave_2_per_point96=r = 0.5 + 0.5*sin(q1*1.27 + x + x);
wave_2_per_point97=g = 0.5 + 0.5*sin(q1*1.5 + x + y);
wave_2_per_point98=b = 0.5 + 0.5*sin(q1*1.346 + y + y);
wavecode_3_enabled=1
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=1
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
wave_3_per_point1=//apply zoom burst on beat
wave_3_per_point2=flag = above(q3,2);
wave_3_per_point3=//state zero is ready state
wave_3_per_point4=state = state + flag*equal(state,0);
wave_3_per_point5=
wave_3_per_point6=//upwards flight
wave_3_per_point7=yval = if(equal(state,0),0, yval);
wave_3_per_point8=yval = yval + 0.00004*equal(state,1);
wave_3_per_point9=ymax = if(equal(state,0),rand(100)*0.004,ymax);
wave_3_per_point10=
wave_3_per_point11=//hit apogee
wave_3_per_point12=state = if(above(yval,0.5+ymax),2,state);
wave_3_per_point13=
wave_3_per_point14=//reset variable
wave_3_per_point15=yval = if(equal(state,0),0, yval);
wave_3_per_point16=burst = if(equal(state,0),0.001,burst);
wave_3_per_point17=alphax = if(equal(state,0),1,alphax);
wave_3_per_point18=xdriftinc = if(equal(state,0),0,xdriftinc);
wave_3_per_point19=
wave_3_per_point20=burstspeed = if(equal(state,0),rand(10),burstspeed);
wave_3_per_point21=xdrift = if(equal(state,0),rand(20),xdrift);
wave_3_per_point22=//to get the numbers small enough have to use constants
wave_3_per_point23=xdriftinc = xdriftinc
wave_3_per_point24=+ equal(xdrift,0)*equal(state,1)*0.00002
wave_3_per_point25=+ equal(xdrift,1)*equal(state,1)*0.000018
wave_3_per_point26=+ equal(xdrift,2)*equal(state,1)*0.000016
wave_3_per_point27=+ equal(xdrift,3)*equal(state,1)*0.000014
wave_3_per_point28=+ equal(xdrift,4)*equal(state,1)*0.000012
wave_3_per_point29=+ equal(xdrift,5)*equal(state,1)*0.00001
wave_3_per_point30=+ equal(xdrift,6)*equal(state,1)*0.000008
wave_3_per_point31=+ equal(xdrift,7)*equal(state,1)*0.000006
wave_3_per_point32=+ equal(xdrift,8)*equal(state,1)*0.000004
wave_3_per_point33=+ equal(xdrift,9)*equal(state,1)*0.000002
wave_3_per_point34=+ equal(xdrift,11)*equal(state,1)*-0.000002
wave_3_per_point35=+ equal(xdrift,12)*equal(state,1)*-0.000004
wave_3_per_point36=+ equal(xdrift,13)*equal(state,1)*-0.000006
wave_3_per_point37=+ equal(xdrift,14)*equal(state,1)*-0.000008
wave_3_per_point38=+ equal(xdrift,15)*equal(state,1)*-0.00001
wave_3_per_point39=+ equal(xdrift,16)*equal(state,1)*-0.000012
wave_3_per_point40=+ equal(xdrift,17)*equal(state,1)*-0.000014
wave_3_per_point41=+ equal(xdrift,18)*equal(state,1)*-0.000016
wave_3_per_point42=+ equal(xdrift,19)*equal(state,1)*-0.000018;
wave_3_per_point43=
wave_3_per_point44=burst = burst
wave_3_per_point45=+ equal(burstspeed,0)*equal(state,2)*0.000024
wave_3_per_point46=+ equal(burstspeed,1)*equal(state,2)*0.000022
wave_3_per_point47=+ equal(burstspeed,2)*equal(state,2)*0.00002
wave_3_per_point48=+ equal(burstspeed,3)*equal(state,2)*0.000018
wave_3_per_point49=+ equal(burstspeed,4)*equal(state,2)*0.000016
wave_3_per_point50=+ equal(burstspeed,5)*equal(state,2)*0.000014
wave_3_per_point51=+ equal(burstspeed,6)*equal(state,2)*0.000012
wave_3_per_point52=+ equal(burstspeed,7)*equal(state,2)*0.00001
wave_3_per_point53=+ equal(burstspeed,8)*equal(state,2)*0.000008
wave_3_per_point54=+ equal(burstspeed,9)*equal(state,2)*0.000008;
wave_3_per_point55=
wave_3_per_point56=alphax = alphax - 0.00004*equal(state,2);
wave_3_per_point57=state = if(below(alphax,0),0,state);
wave_3_per_point58=
wave_3_per_point59=
wave_3_per_point60=s = sample*3.14*100;
wave_3_per_point61=ss = sample*6.28*1000;
wave_3_per_point62=
wave_3_per_point63=//draw torus
wave_3_per_point64=xs = (burst + 0.0001*cos(s))*cos(ss);
wave_3_per_point65=ys = (burst + 0.0001*cos(s))*sin(ss);
wave_3_per_point66=zs = 0.1*burst*sin(s);
wave_3_per_point67=
wave_3_per_point68=
wave_3_per_point69=//rotate x axis
wave_3_per_point70=angle = sin(-q1*0.035)*6.28;
wave_3_per_point71=yx = ys*cos(angle) - zs*sin(angle);
wave_3_per_point72=zx = ys*sin(angle) + zs*cos(angle);
wave_3_per_point73=xx = xs;
wave_3_per_point74=
wave_3_per_point75=//rotate y axis
wave_3_per_point76=angle2 = sin(-q1*0.03)*6.28;
wave_3_per_point77=xd = xx*cos(angle2) - zx*sin(angle2);
wave_3_per_point78=zd = xx*sin(angle2) + zx*cos(angle2);
wave_3_per_point79=yd = yx;
wave_3_per_point80=
wave_3_per_point81=//rotaye z axis
wave_3_per_point82=angle3 = sin(-q1*0.022)*6.28;
wave_3_per_point83=xn = xd*cos(angle3) - yd*sin(angle3);
wave_3_per_point84=yn = xd*sin(angle3) + yd*cos(angle3);
wave_3_per_point85=
wave_3_per_point86=zd = zd + 2;
wave_3_per_point87=
wave_3_per_point88=x = xn*zd*0.3 + 0.5;
wave_3_per_point89=y = yn*zd*0.3*1.2;
wave_3_per_point90=
wave_3_per_point91=
wave_3_per_point92=x = x + xdriftinc;
wave_3_per_point93=y = y + sin(yval*1.5) - 0.18;
wave_3_per_point94=
wave_3_per_point95=
wave_3_per_point96=r = 0.5 + 0.5*sin(q1*1.3 + x + x);
wave_3_per_point97=g = 0.5 + 0.5*sin(q1*1.1 + x + y);
wave_3_per_point98=b = 0.5 + 0.5*sin(q1*1.66 + y + y);
shapecode_0_enabled=0
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=2.66718
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=0.45112
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=0.000
shapecode_0_a=0.200
shapecode_0_r2=0.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.200
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.100
shapecode_1_enabled=1
shapecode_1_sides=100
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=1
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=2.38096
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=0.42497
shapecode_1_r=0.000
shapecode_1_g=0.000
shapecode_1_b=1.000
shapecode_1_a=0.600
shapecode_1_r2=0.000
shapecode_1_g2=0.000
shapecode_1_b2=0.000
shapecode_1_a2=0.600
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=1.000
shape_1_per_frame1=r = 0.1 + 0.5*sin(q1);
shape_1_per_frame2=g = 0.1 + 0.5*sin(q1*0.9878);
shape_1_per_frame3=b = 0.1 + 0.5*sin(q1*0.897);
shapecode_2_enabled=0
shapecode_2_sides=4
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.10000
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=1.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=0.000
shapecode_2_g2=1.000
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.100
shapecode_3_enabled=0
shapecode_3_sides=4
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.10000
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=1.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=1.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.100
per_frame_1=warp=0;
per_frame_2=old_bass_flop=bass_flop;
per_frame_3=old_treb_flop=treb_flop;
per_frame_4=old_mid_flop=mid_flop;
per_frame_5=chaos=.9+.1*sin(pulse);
per_frame_6=entropy=if(equal(pulse,-20),1+bass_flop+treb_flop+mid_flop+rand(2),entropy);
per_frame_7=bass_thresh = above(bass_att,bass_thresh)*2 + (1-above(bass_att,bass_thresh))*((bass_thresh-1.6)*chaos+1.6);
per_frame_8=bass_flop=abs(bass_flop-equal(bass_thresh,2));
per_frame_9=treb_thresh=above(treb_att,treb_thresh)*2 + (1-above(treb_att,treb_thresh))*((treb_thresh-1.6)*chaos+1.6);
per_frame_10=treb_flop=abs(treb_flop-equal(treb_thresh,2));
per_frame_11=mid_thresh=above(mid_att,mid_thresh)*2 + (1-above(mid_att,mid_thresh))*((mid_thresh-1.6)*chaos+1.6);
per_frame_12=mid_flop=abs(mid_flop-equal(mid_thresh,2));
per_frame_13=bass_changed=bnot(equal(old_bass_flop,bass_flop));
per_frame_14=mid_changed=bnot(equal(old_mid_flop,mid_flop));
per_frame_15=treb_changed=bnot(equal(old_treb_flop,treb_flop));
per_frame_16=bass_residual = bass_changed*sin(pulse*3) + bnot(bass_changed)*bass_residual;
per_frame_17=treb_residual = treb_changed*sin(pulse*3) + bnot(treb_changed)*treb_residual;
per_frame_18=mid_residual = mid_changed*sin(pulse*3) + bnot(mid_changed)*mid_residual;
per_frame_19=pulse=if(above(abs(pulse),20),-20,pulse+(bass_thresh+mid_thresh+treb_thresh)*.018);
per_frame_20=q1=mid_residual;
per_frame_21=q2=bass_residual;
per_frame_22=q3=treb_residual;
per_frame_23=q4=sin(pulse);
per_frame_24=q5=cos(pulse*(.5+.1*entropy));
per_frame_25=q6=sin(pulse*(.5+pow(.25,entropy)));
per_frame_26=q7=above(q1,0)+above(q2,0)+above(q3,0)+above(q3,0)*treb_flop+above(q2,0)*bass_flop+above(q1,0)*mid_flop;
per_frame_27=q8=entropy;
per_frame_28=ob_r=.2+.1*sin(time*2.157+q6);
per_frame_29=ob_b=.2+.1*sin(time*1.689+q5);
per_frame_30=ob_g=.2+.1*sin(time*.413+q4);
per_frame_31=ib_r=.8+.2*cos(time*1.2+q1*.1);
per_frame_32=ib_b=.2+.2*cos(time*2.811+q2*.1);
per_frame_33=ib_g=.7+.3*cos(time*1.666+q3*.1);
per_frame_34=ib_size=.03+.02*q2;
per_frame_35=ob_size=.03+.02*sin(time*2.321+q2*.2);
per_frame_36=ob_a=.75+.25*q3;
per_frame_37=ib_a=.8+.2*sin(q2*.3+q4+q1*.5);
per_frame_38=mv_r=mv_r+.5*sin(q4+time*.678);
per_frame_39=mv_b=mv_b+.5*sin(q4+time*.789);
per_frame_40=mv_g=mv_g+.5*sin(q5+time*.456);
per_frame_41=mv_a=.2+.2*sin(time*1.178+q5*1.14);
per_frame_42=rot=0;
per_frame_43=wave_r=.6+.4*sin(q1+time*2.183);
per_frame_44=wave_b=.6+.4*sin(q2+time*1.211);
per_frame_45=wave_g=.6+.4*sin(q3+time*1.541);
per_frame_46=wave_mystery=wave_mystery+.3*sin(time*2.18+q6);
per_frame_47=wave_x=wave_x+.3*sin(time*.811)+.005*(frame%3);
per_frame_48=wave_y=wave_y+.3*sin(time*.788)+.005*(frame%3);
per_frame_49=wave_a=3+sin(time*1.414)+q3;
per_frame_50=zoom=zoom+.5*sin(time*1.69);
per_pixel_1=xx=(x-.5+.03*q5+.1*y*q6+.1*sin(time*.322))*2;
per_pixel_2=yy=(y-.5+.03*q6+.1*x*q5+.1*sin(time*.427))*2;
per_pixel_3=dx=sin(xx);
per_pixel_4=dy=sin(yy);
per_pixel_5=rot=sin(rad*(xx*q4+yy*q5+1.7*q6));
warp_1=`shader_body
warp_2=`{
warp_3=`    // sample previous frame, with some trails...
warp_4=`    float trail_decay = 0.95;
warp_5=`    ret = tex2D( sampler_fc_main, uv ).xyz;
warp_6=`    float3 s2 = tex2D( sampler_fc_main, lerp(uv,uv_orig,0.33) ).xyz*trail_decay;
warp_7=`    ret = max(ret, s2);
warp_8=`
warp_9=`    // a color-holding posterize effect:  
warp_10=`    float3 m = float3(7,6,8);
warp_11=`    ret = lerp(ret, floor(ret*m+0.25)/m, 0.1);
warp_12=`
warp_13=`  
warp_14=`    // darken over time
warp_15=`    float center = 1-saturate(length(uv-uv_orig)*40);
warp_16=`    ret = (ret*0.995 - 0.001 - center*0.002); 
warp_17=`    
warp_18=`}
comp_1=`
comp_2=`float2 rs, rs0, uv2, uv3,uv4;
comp_3=`float3 noise, ret1;
comp_4=`
comp_5=`shader_body {
comp_6=`uv.y = uv.y - .1;
comp_7=`float2 uv1 = (uv-.5 )*aspect.xy;
comp_8=`
comp_9=`
comp_10=`float z = .1/uv1.y/uv1.x;
comp_11=`z = .3/uv1.y;
comp_12=`rs0.x = uv1.x*z;
comp_13=`rs0.y = z;
comp_14=`rs.x = rs0.x + time/2;
comp_15=`rs.y = rs0.y + time/2;
comp_16=`
comp_17=`noise = lum(tex2D(sampler_noise_hq,rs/2));
comp_18=`
comp_19=`ret1 = noise-.55;
comp_20=`
comp_21=`float mask = saturate(24*(uv1.y));
comp_22=`
comp_23=`uv2 = 1.5*uv1 * (q28-abs(uv1.x)) ;
comp_24=`uv2 *= aspect.yx;
comp_25=`
comp_26=`uv3 =frac(uv2-q27/2-ret1*.04*mask);
comp_27=`float2 hor = float2 (texsize.z,0);
comp_28=`float2 ver = float2 (0, texsize.w);
comp_29=`float dx = lum(GetPixel(uv3+hor) - GetPixel(uv3-hor));
comp_30=`float dy = lum(GetPixel(uv3+ver) - GetPixel(uv3-ver));
comp_31=`float2 dz = .02*float2 (dx,dy);
comp_32=`uv3 += dz;
comp_33=`
comp_34=`uv4 = float2(.5,(uv1.y/uv1.x));
comp_35=`uv4 = frac(time/8+.1*bass_att*uv4);
comp_36=`float3 col = roam_cos;
comp_37=`float3 ret2 = (GetBlur1(uv4)) * col;
comp_38=`ret2 += (.008/(length(uv1)))*col;
comp_39=`ret2 *= q10;
comp_40=`
comp_41=`
comp_42=`ret1 =  GetPixel(uv3) + GetBlur1(uv3);
comp_43=`ret1 *= 1-mask/3;;
comp_44=`
comp_45=`//ret1 *= (.2+bass_att);
comp_46=`
comp_47=`ret = ret1 + ret2;    
comp_48=`}
