MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=4.000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.248
fWaveSmoothing=0.630
fWaveParam=0.000
fModWaveAlphaStart=0.000
fModWaveAlphaEnd=1.320
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=0.190
ib_size=0.500
ib_r=1.000
ib_g=1.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=25.600
nMotionVectorsY=9.600
mv_dx=0.000
mv_dy=0.000
mv_l=0.000
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.230
b2n=0.000
b3n=0.000
b1x=0.930
b2x=1.000
b3x=0.000
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=0
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=0.150
wavecode_0_a=1.000
wave_0_per_point1=n=sample*6.283;
wave_0_per_point2=phs=-sample * 0.2;
wave_0_per_point3=tm=treb_att + phs*4;
wave_0_per_point4=
wave_0_per_point5=flip=flip+1;
wave_0_per_point6=flip=flip*below(flip,2);
wave_0_per_point7=
wave_0_per_point8=xp=0;
wave_0_per_point9=yp=(flip*0.1-0.05)*(sample);
wave_0_per_point10=zp=0;
wave_0_per_point11=
wave_0_per_point12=//spin;
wave_0_per_point13=ang=tm*20 + sin(tm*76 + time*4)*0.01;
wave_0_per_point14=sa=sin(ang);ca=cos(ang);
wave_0_per_point15=xr=xp*sa + yp*ca;
wave_0_per_point16=yr=xp*ca - yp*sa;
wave_0_per_point17=zr=zp;
wave_0_per_point18=
wave_0_per_point19=xp=xr;
wave_0_per_point20=yp=yr + 0.05 + (sin(tm)*0.5 + 0.5)*0.2 + 0.05;
wave_0_per_point21=zp=zr;
wave_0_per_point22=
wave_0_per_point23=//wrist movement;
wave_0_per_point24=ang=sin(tm*2);
wave_0_per_point25=
wave_0_per_point26=xq=xp;
wave_0_per_point27=sa=sin(ang);ca=cos(ang);
wave_0_per_point28=yq=yp*sa + zp*ca;
wave_0_per_point29=zq=yp*ca - zp*sa;
wave_0_per_point30=
wave_0_per_point31=
wave_0_per_point32=ang=tm*8;
wave_0_per_point33=sa=sin(ang);ca=cos(ang);
wave_0_per_point34=xp=xq*sa + yq*ca;
wave_0_per_point35=yp=xq*ca - yq*sa;
wave_0_per_point36=zp=zq;
wave_0_per_point37=
wave_0_per_point38=//forearm movement;
wave_0_per_point39=zp=zp-0.3;
wave_0_per_point40=ang=3.14 + sin(tm*2 - 0.5)*2.5;
wave_0_per_point41=xq=xp;
wave_0_per_point42=sa=sin(ang);ca=cos(ang);
wave_0_per_point43=yq=yp*sa + zp*ca;
wave_0_per_point44=zq=yp*ca - zp*sa;
wave_0_per_point45=
wave_0_per_point46=//upper arm twist
wave_0_per_point47=ang=-1.0 + cos(tm*3 + 0.5);
wave_0_per_point48=xp=xq*sa + yq*ca;
wave_0_per_point49=yp=xq*ca - yq*sa;
wave_0_per_point50=zp=zq;
wave_0_per_point51=
wave_0_per_point52=//upper arm outward;
wave_0_per_point53=zp=zp-0.35;
wave_0_per_point54=ang=cos(tm*1)*1.75 - 1.05;
wave_0_per_point55=sa=sin(ang);ca=cos(ang);
wave_0_per_point56=xq=xp*sa + zp*ca;
wave_0_per_point57=yq=yp;
wave_0_per_point58=zq=xp*ca - zp*sa;
wave_0_per_point59=
wave_0_per_point60=//upper arm up down;
wave_0_per_point61=ang=cos(tm);
wave_0_per_point62=xp=xq;
wave_0_per_point63=sa=sin(ang);ca=cos(ang);
wave_0_per_point64=yp=yq*ca - zq*sa;
wave_0_per_point65=zp=yq*sa + zq*ca;
wave_0_per_point66=
wave_0_per_point67=//xp=xq;yp=yq;zp=zq;
wave_0_per_point68=
wave_0_per_point69=
wave_0_per_point70=//project into screenspace and draw on screen
wave_0_per_point71=zp=zp+1.2;
wave_0_per_point72=xs=xp/zp;
wave_0_per_point73=ys=yp/zp;
wave_0_per_point74=
wave_0_per_point75=x=xs+0.35;
wave_0_per_point76=y=ys*1.3+0.6;
wave_0_per_point77=
wave_0_per_point78=
wave_0_per_point79=a=(1-sample);
wave_0_per_point80=
wavecode_1_enabled=1
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=1
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=1
wavecode_1_scaling=0.36971
wavecode_1_smoothing=0.00000
wavecode_1_r=0.800
wavecode_1_g=0.500
wavecode_1_b=0.300
wavecode_1_a=1.000
wave_1_init1=chance = 0;
wave_1_per_frame1=t1 = asin(1);
wave_1_per_frame2=
wave_1_per_frame3=rot = rot + gmegabuf(9);
wave_1_per_frame4=t2 = rot;
wave_1_per_frame5=
wave_1_per_frame6=gmegabuf(7) = 0.5 + (gmegabuf(7)-0.5)*gmegabuf(15);
wave_1_per_frame7=gmegabuf(8) = 0.5 + (gmegabuf(8)-0.5)*gmegabuf(15);
wave_1_per_point1=w = 4*t1*sample + t2;
wave_1_per_point2=d = gmegabuf(3)*0.5*gmegabuf(15) + value1;
wave_1_per_point3=
wave_1_per_point4=x = gmegabuf(7) + sin(w)*d;
wave_1_per_point5=y = gmegabuf(8) + cos(w)*d;
wavecode_2_enabled=1
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=1
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=1
wavecode_2_scaling=0.36971
wavecode_2_smoothing=0.00000
wavecode_2_r=0.800
wavecode_2_g=1.000
wavecode_2_b=0.300
wavecode_2_a=1.000
wave_2_init1=chance = 0;
wave_2_per_frame1=t1 = asin(1);
wave_2_per_frame2=
wave_2_per_frame3=rot = rot + gmegabuf(6);
wave_2_per_frame4=t2 = rot;
wave_2_per_frame5=
wave_2_per_frame6=gmegabuf(4) = 0.5 + (gmegabuf(4)-0.5)*gmegabuf(15);
wave_2_per_frame7=gmegabuf(5) = 0.5 + (gmegabuf(5)-0.5)*gmegabuf(15);
wave_2_per_frame8=
wave_2_per_point1=w = 4*t1*sample + t2;
wave_2_per_point2=d = gmegabuf(3)*0.5*gmegabuf(15) + value1;
wave_2_per_point3=
wave_2_per_point4=x = gmegabuf(4) + sin(w)*d;
wave_2_per_point5=y = gmegabuf(5) + cos(w)*d;
wavecode_3_enabled=1
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=1
wavecode_3_scaling=0.36971
wavecode_3_smoothing=0.00000
wavecode_3_r=0.800
wavecode_3_g=1.000
wavecode_3_b=0.300
wavecode_3_a=1.000
wave_3_init1=chance = 0;
wave_3_per_frame1=t1 = asin(1);
wave_3_per_frame2=
wave_3_per_frame3=rot = rot + gmegabuf(12);
wave_3_per_frame4=t2 = rot;
wave_3_per_frame5=
wave_3_per_frame6=gmegabuf(10) = 0.5 + (gmegabuf(10)-0.5)*gmegabuf(15);
wave_3_per_frame7=gmegabuf(11) = 0.5 + (gmegabuf(11)-0.5)*gmegabuf(15);
wave_3_per_point1=w = 4*t1*sample + t2;
wave_3_per_point2=d = gmegabuf(3)*0.5*gmegabuf(15) + value1;
wave_3_per_point3=
wave_3_per_point4=x = gmegabuf(10) + sin(w)*d;
wave_3_per_point5=y = gmegabuf(11) + cos(w)*d;
shapecode_0_enabled=1
shapecode_0_sides=54
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.160
shapecode_0_y=0.450
shapecode_0_rad=0.28207
shapecode_0_ang=3.14159
shapecode_0_tex_ang=1.13097
shapecode_0_tex_zoom=1.00814
shapecode_0_r=0.990
shapecode_0_g=0.620
shapecode_0_b=0.820
shapecode_0_a=1.000
shapecode_0_r2=1.000
shapecode_0_g2=1.000
shapecode_0_b2=1.000
shapecode_0_a2=0.000
shapecode_0_border_r=0.000
shapecode_0_border_g=0.000
shapecode_0_border_b=0.000
shapecode_0_border_a=0.000
shape_0_per_frame1=rad=.026+(treb_att*0.05);
shapecode_1_enabled=1
shapecode_1_sides=100
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=1
shapecode_1_num_inst=1
shapecode_1_x=0.120
shapecode_1_y=0.530
shapecode_1_rad=0.39317
shapecode_1_ang=0.00000
shapecode_1_tex_ang=3.14159
shapecode_1_tex_zoom=1.43503
shapecode_1_r=0.710
shapecode_1_g=1.000
shapecode_1_b=1.000
shapecode_1_a=0.760
shapecode_1_r2=1.000
shapecode_1_g2=1.000
shapecode_1_b2=1.000
shapecode_1_a2=0.000
shapecode_1_border_r=0.300
shapecode_1_border_g=0.700
shapecode_1_border_b=0.800
shapecode_1_border_a=0.000
shape_1_per_frame1=rad=.16+(mid_att*0.06);
shapecode_2_enabled=1
shapecode_2_sides=44
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=1
shapecode_2_num_inst=1
shapecode_2_x=0.063
shapecode_2_y=0.440
shapecode_2_rad=0.10616
shapecode_2_ang=0.00000
shapecode_2_tex_ang=6.28319
shapecode_2_tex_zoom=1.18903
shapecode_2_r=1.000
shapecode_2_g=0.100
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=1.000
shapecode_2_a2=0.000
shapecode_2_border_r=0.000
shapecode_2_border_g=0.000
shapecode_2_border_b=0.000
shapecode_2_border_a=0.000
shape_2_per_frame1=
shape_2_per_frame2=rad=.016+(bass_att*0.05);
shapecode_3_enabled=1
shapecode_3_sides=100
shapecode_3_additive=1
shapecode_3_thickOutline=1
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.120
shapecode_3_y=0.410
shapecode_3_rad=0.18274
shapecode_3_ang=2.89027
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.49981
shapecode_3_r=0.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=1.000
shapecode_3_b2=0.700
shapecode_3_a2=0.000
shapecode_3_border_r=0.000
shapecode_3_border_g=0.000
shapecode_3_border_b=0.000
shapecode_3_border_a=0.000
shape_3_per_frame1=y=.49-(treb_att*0.03)
per_frame_init_1=
per_frame_init_2=//******** INITIALIZATION *********
per_frame_init_3=n = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); 
per_frame_init_4=n = 0; loop (10000,  megabuf(n)=0; n=n+1; ); 
per_frame_init_5=trelx = 0;  trely = 0; trelz = 0;
per_frame_init_6=reg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;
per_frame_init_7=
per_frame_init_8=//Find random starting point
per_frame_init_9=while (exec2(
per_frame_init_10=  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;
per_frame_init_11=  PosX = rand(10)-5;   PosY = rand(10)-5;   PosZ = rand(10)-5; 
per_frame_init_12=  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); 
per_frame_init_13=  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);
per_frame_init_14=
per_frame_init_15=  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;
per_frame_init_16=  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;
per_frame_init_17=  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;
per_frame_init_18=
per_frame_init_19=  //***********BOT*************
per_frame_init_20=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_init_21=  dist = 0.001;
per_frame_init_22=  while (exec2(
per_frame_init_23=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_init_24=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_init_25=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_init_26=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_init_27=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_init_28=    uvx0 = uvx; uvy0 = uvy; uvz0 = uvz;
per_frame_init_29=    loop (7+1,
per_frame_init_30=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_init_31=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_init_32=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_init_33=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_init_34=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_init_35=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_init_36=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_init_37=    );
per_frame_init_38=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_init_39=    dist *= 1.05;
per_frame_init_40=  ,(dist < 0.6)*(len > 30)));
per_frame_init_41=,(dist < .2))); //end while
per_frame_init_42=
per_frame_init_43=
per_frame_init_44=//---------- some global vars, do not change -------------
per_frame_init_45=q7 = .1; //MyZoom
per_frame_init_46=q30 = 1; //logarithmic Z-Dist storage; unused
per_frame_init_47=q3 = 1.0/q30; //store inverse so shaders don't need to do inverse for division
per_frame_init_48=q31 = 128;
per_frame_init_49=q29 = 1.0/q31;//store the inverse of q31 so the shaders don't need to do inverse for division
per_frame_init_50=start = 1; travel = 0; RotZ = 0; look = 0; slow = 0;
per_frame_init_51=cran0 = rand(1);
per_frame_init_52=cran1 = rand(1);
per_frame_init_53=
per_frame_init_54=
per_frame_init_55=// initialize Flexi's bouncer
per_frame_init_56=x1 = 0.3;
per_frame_init_57=y1 = 0.5;
per_frame_init_58=
per_frame_init_59=x2 = 0.7;
per_frame_init_60=y2 = 0.5;
per_frame_init_61=
per_frame_init_62=x3 = 0.5;
per_frame_init_63=y3 = 0.2;
per_frame_init_64=
per_frame_init_65=vr1 = 0.0001;
per_frame_init_66=vr2 = 0.0;
per_frame_init_67=vr3 = 0.0;
per_frame_init_68=
per_frame_init_69=vx1 = 0;
per_frame_init_70=vx2 = 0;
per_frame_init_71=vx3 = 0;
per_frame_1=fps_ = .9 * fps_ + .1*if(fps<=25,fps,25+.5*(fps-25)); 
per_frame_2=dec_s = 1-.03*30/fps_;
per_frame_3=
per_frame_4=beat = (time >  t0+2);
per_frame_5=t0 = if(beat, time, t0);
per_frame_6=
per_frame_7=speed = min(0.2,dist_-.0) * (1+avg) *(1-slow*.1);
per_frame_8=ds = ds * dec_s + (1-dec_s)*speed*.2/fps_ ; 
per_frame_9=
per_frame_10=RotZ = if (RotZ==0,beat*(rand(100)<10)*(rand(10)/10-.5),
per_frame_11=                   bnot(beat*(rand(100)<30))*RotZ);
per_frame_12=
per_frame_13=slow = if (bnot(slow), beat*(rand(1000*avg)<6), bnot(beat*(rand(100)<50)));
per_frame_14=look = if (bnot(look), beat*(rand(1000*speed)<5), bnot(beat));
per_frame_15=
per_frame_16=//Lamp View
per_frame_17=lx = if (beat,rand(150)/200+.15,lx);
per_frame_18=ly = if (beat,rand(150)/200+.15,ly);
per_frame_19=lampx = lampx * dec_s + (1-dec_s)*if (look,lx,0.5);
per_frame_20=lampy = lampy * dec_s + (1-dec_s)*if (look,ly,0.5);
per_frame_21=q1 = lampx; q2 = lampy;
per_frame_22=
per_frame_23=//Position 
per_frame_24=DirX= reg26; DirY= reg27; DirZ = reg28;
per_frame_25=PosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ; 
per_frame_26=q4 = PosX; q5 = PosY; q6 = PosZ;
per_frame_27=
per_frame_28=angchg = (.15-dist_)*(dist_ < .15)/2;
per_frame_29=travel = if (angchg > 0,0,travel+ds);
per_frame_30=va = va * dec_s + (1-dec_s)* RotZ * .05/fps_;
per_frame_31=vb = vb *dec_s + (1-dec_s)*angchg *xslope/fps_;
per_frame_32=vc = vc *dec_s + (1-dec_s)*(angchg *yslope/fps_ + va/2 * (travel>1));
per_frame_33=
per_frame_34=//push old RotMat
per_frame_35=reg30 =reg20; reg31 =reg21; reg32 =reg22; 
per_frame_36=reg33 =reg23; reg34 =reg24; reg35 =reg25; 
per_frame_37=reg36 =reg26; reg37 =reg27; reg38 =reg28; 
per_frame_38=
per_frame_39=n = 0; avg = 0;
per_frame_40=loop (5,
per_frame_41=  n = n+1;
per_frame_42=  //new Rot. Mat for infinitesimal angles
per_frame_43=  ran1 = rand(100)/100;
per_frame_44=  ran2 = rand(100)/200-.25;
per_frame_45=  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;
per_frame_46=  c1 = cos(va); c2 = cos(vb+ty); c3 = cos(vc+tx); 
per_frame_47=  s1 = sin(va); s2 = sin(vb+ty); s3 = sin(vc+tx);
per_frame_48=  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;
per_frame_49=  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;
per_frame_50=  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;
per_frame_51=
per_frame_52=  //pop old RotMat
per_frame_53=  reg20 =reg30; reg21 =reg31; reg22 =reg32; 
per_frame_54=  reg23 =reg33; reg24 =reg34; reg25 =reg35; 
per_frame_55=  reg26 =reg36; reg27 =reg37; reg28 =reg38; 
per_frame_56=
per_frame_57=  //Multiply new RotMat by old one
per_frame_58=  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;
per_frame_59=  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;
per_frame_60=  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;
per_frame_61=  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;
per_frame_62=  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;
per_frame_63=  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;
per_frame_64=  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;
per_frame_65=  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;
per_frame_66=  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;
per_frame_67=
per_frame_68=  reg20 =q20; reg21 =q21; reg22 =q22;
per_frame_69=  reg23 =q23; reg24 =q24; reg25 =q25;
per_frame_70=  reg26 =q26; reg27 =q27; reg28 =q28;
per_frame_71=
per_frame_72=  //***********BOT*************
per_frame_73=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_74=  dist = 0.002;
per_frame_75=  while (exec2(
per_frame_76=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_77=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_78=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_79=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_80=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_81=    uvx0 = uvx; uvy0 = uvy; uvz0 = uvz;
per_frame_82=    loop (7+1,
per_frame_83=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_84=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_85=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_86=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_87=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_88=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_89=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_90=    );
per_frame_91=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_92=    dist *= 1.1;
per_frame_93=  ,(dist < 0.6)*(len > 30)));
per_frame_94=  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points
per_frame_95=  avg = avg+abs(megabuf(n)/5);
per_frame_96=); //end loop 5
per_frame_97=
per_frame_98=n = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));
per_frame_99=
per_frame_100=xslope = 1/avg*(megabuf(1)-megabuf(3));
per_frame_101=yslope =  1/avg*(megabuf(4)-megabuf(2));
per_frame_102=//monitor = avg;
per_frame_103=dist_ = dist_*dec_s + (1-dec_s)*dist;
per_frame_104=
per_frame_105=//sustain
per_frame_106=q13 = 1-ds; //warp zoom uv 
per_frame_107=q14 = 4*abs(ds) + 6*(abs(va) + 2*abs(vb) + 2*abs(vc)) + 1.0/255 + start*.1; 
per_frame_108=q18 = cran1; //brightness balance back/front
per_frame_109=q19 = .5 + .5*sin(time*.02+cran0*6); //brightness backgd
per_frame_110=start = start * .9;
per_frame_111=
per_frame_112=
per_frame_113=
per_frame_114=// code by Flexi
per_frame_115=// impuls transmission with an angular momentum factor, 3 bodies
per_frame_116=// good luck with tuning these values to a fine dynamic behavior ;-)
per_frame_117=
per_frame_118=   r = 0.11+ (bass_att+treb_att)*0.005; // the object's radius
per_frame_119=
per_frame_120=   gravity = 0.01;
per_frame_121=
per_frame_122=   bouncedampening = 0.94;  // This is where kinetic energy is taken from the system.
per_frame_123=                            // Be careful with values close to 1.0
per_frame_124=
per_frame_125=   bounceimpact = 0.17;     // When an object hits one border, it slightly penetrates it.
per_frame_126=                            // The impact value determines how strong this depth is taken as resulting impuls.
per_frame_127=                            // This is where kinetic energy possibly is added to the system depent on the increase in size.
per_frame_128=
per_frame_129=// don't change below
per_frame_130=
per_frame_131=// bouncing off borders (the first rotating object)
per_frame_132=
per_frame_133=   y1  = y1+vy1; // adding velocity vector to position
per_frame_134=   x1  = x1+vx1;
per_frame_135=
per_frame_136=   vr  = sin(vr1)*r; // tangential velocity
per_frame_137=bounce = below(y1,r-(aspectx-1)*0.5); // hit floor?
per_frame_138=   vy1 = if(bounce, abs(vy1)*bouncedampening + (r-y1-(aspectx-1)*0.5)*bounceimpact, vy1-gravity/fps);
per_frame_139=   vx1 = if(bounce, vx1 + (vr-vx1)*bounceimpact, vx1);
per_frame_140=   vr  = if(bounce, vr + (vx1-vr)*0.85 , vr);
per_frame_141=bounce = above(x1,1-r+(aspecty-1)*0.5); // hit right border?
per_frame_142=   vx1 = if(bounce, - abs(vx1)*bouncedampening + (1-r-x1+(aspecty-1)*0.5)*bounceimpact, vx1);
per_frame_143=   vy1 = if(bounce, vy1 + (vr-vy1)*bounceimpact, vy1);
per_frame_144=   vr  = if(bounce, vr + (vy1-vr)*0.85 , vr);
per_frame_145=bounce = below(x1,r-(aspecty-1)*0.5); // hit left border?
per_frame_146=   vx1 = if(bounce, abs(vx1)*bouncedampening + (r-x1-(aspecty-1)*0.5)*bounceimpact, vx1);
per_frame_147=   vy1 = if(bounce, vy1 + (-vr-vy1)*bounceimpact, vy1);
per_frame_148=   vr  = if(bounce, vr - (vy1+vr)*0.85 , vr);
per_frame_149=   vr1 = asin(vr/r); // angular velocity of the surface
per_frame_150=
per_frame_151=// bouncing off borders (the second rotating object)
per_frame_152=vr=sin(vr2)*r;bounce=below(y2,r-(aspectx-1)*0.5);y2=y2+vy2;vy2=if(bounce,abs(vy2)*bouncedampening+(r-y2-(aspectx-1)*0.5)
per_frame_153=*bounceimpact,vy2-gravity/fps);vx2=if(bounce,vx2+(vr-vx2)*bounceimpact,vx2);vr=if(bounce,vr+(vx2-vr)*0.85,vr);
per_frame_154=bounce=above(x2,1-r+(aspecty-1)*0.5);vx2=if(bounce,-abs(vx2)*bouncedampening+(1-r-x2+(aspecty-1)*0.5)*bounceimpact,vx2);
per_frame_155=vy2=if(bounce,vy2+(vr-vy2)*bounceimpact,vy2);vr=if(bounce,vr+(vy2-vr)*0.85,vr);bounce=below(x2,r-(aspecty-1)*0.5);x2=x2+vx2;
per_frame_156=vx2=if(bounce,abs(vx2)*bouncedampening+(r-x2-(aspecty-1)*0.5)*bounceimpact,vx2);vy2=if(bounce,vy2+(-vr-vy2)*bounceimpact,vy2);
per_frame_157=vr=if(bounce,vr-(vy2+vr)*0.85,vr);vr2=asin(vr/r);
per_frame_158=
per_frame_159=// bouncing off borders (the third rotating object)
per_frame_160=vr=sin(vr3)*r;bounce=below(y3,r-(aspectx-1)*0.5);y3=y3+vy3;vy3=if(bounce,abs(vy3)*bouncedampening+(r-y3-(aspectx-1)*0.5)
per_frame_161=*bounceimpact,vy3-gravity/fps);vx3=if(bounce,vx3+(vr-vx3)*bounceimpact,vx3);vr=if(bounce,vr+(vx3-vr)*0.85,vr);
per_frame_162=bounce=above(x3,1-r+(aspecty-1)*0.5);vx3=if(bounce,-abs(vx3)*bouncedampening+(1-r-x3+(aspecty-1)*0.5)*bounceimpact,vx3);
per_frame_163=vy3=if(bounce,vy3+(vr-vy3)*bounceimpact,vy3);vr=if(bounce,vr+(vy3-vr)*0.85,vr);bounce=below(x3,r-(aspecty-1)*0.5);x3=x3+vx3;
per_frame_164=vx3=if(bounce,abs(vx3)*bouncedampening+(r-x3-(aspecty-1)*0.5)*bounceimpact,vx3);vy3=if(bounce,vy3+(-vr-vy3)*bounceimpact,vy3);
per_frame_165=vr=if(bounce,vr-(vy3+vr)*0.85,vr);vr3=asin(vr/r);
per_frame_166=
per_frame_167=// bouncing of object1 with object2
per_frame_168=
per_frame_169=bounce = below( sqrt( sqr(x1+vx1-x2-vx2) + sqr(y1+vy1-y2-vy2)), 2*r); // is distance < diameter ?
per_frame_170=bounce = bounce*below(sqrt( sqr(x1+vx1-x2-vx2) + sqr(y1+vy1-y2-vy2)),sqrt( sqr(x1-x2) + sqr(y1-y2))); // detect only if objects
per_frame_171=                                                                                                      // move towards each other
per_frame_172=ref_ang = atan2(x2-x1,y2-y1)+asin(1); // angle of the common tangent
per_frame_173=v1 = sqrt(vx1*vx1+vy1*vy1); // absolute velocity
per_frame_174=v2 = sqrt(vx2*vx2+vy2*vy2);
per_frame_175=w1 = atan2(vx1,vy1); // absolute motion angle
per_frame_176=w2 = atan2(vx2,vy2);
per_frame_177=vr = sin(vr1)*r; // angular velocity of the surface
per_frame_178=v2r= sin(vr2)*r;
per_frame_179=// in case of a bounce, the velocity is split into the horizontal and vertical part relative to the common tangent,
per_frame_180=// then the vertical aspects get swapped.
per_frame_181=// a bounce goes 90% into impuls transmission and 10% angular momentum transmission.
per_frame_182=// these values make quite a plausible impression, but in fact this has pretty little to do with physical correctness ;)
per_frame_183=vx1 = if(bounce,sin(ref_ang)*v1*cos(w1-ref_ang) + ((vr-v2r)-sin(ref_ang)*v1*cos(w1-ref_ang))*0.1
per_frame_184=              + sin(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)), vx1);
per_frame_185=vy1 = if(bounce,cos(ref_ang)*v1*cos(w1-ref_ang) + ((vr-v2r)-cos(ref_ang)*v1*cos(w1-ref_ang))*0.1
per_frame_186=              + cos(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)), vy1);
per_frame_187=vx2 = if(bounce,sin(ref_ang)*v2*cos(w2-ref_ang) + ((v2r-vr)-sin(ref_ang)*v2*cos(w2-ref_ang))*0.1
per_frame_188=              + sin(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)), vx2);
per_frame_189=vy2 = if(bounce,cos(ref_ang)*v2*cos(w2-ref_ang) + ((v2r-vr)-cos(ref_ang)*v2*cos(w2-ref_ang))*0.1
per_frame_190=              + cos(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)), vy2);
per_frame_191=vr = if(bounce, vr + (cos(w1-ref_ang)*(v1-v2)-vr)*0.9 , vr);
per_frame_192=vr1 = asin(vr/r);
per_frame_193=v2r = if(bounce, v2r + (cos(w2-ref_ang)*(v2-v1)-v2r)*0.9 , v2r);
per_frame_194=vr2 = asin(v2r/r);
per_frame_195=
per_frame_196=// bouncing of object1 with object3
per_frame_197=
per_frame_198=
per_frame_199=bounce=below(sqrt(sqr(x1+vx1-x3-vx3)+sqr(y1+vy1-y3-vy3)),2*r);bounce=bounce*below(sqrt(sqr(x1+vx1-x3-
per_frame_200=vx3)+sqr(y1+vy1-y3-vy3)),sqrt(sqr(x1-x3)+sqr(y1-y3)));ref_ang=atan2(x3-x1,y3-y1)+asin(1);v1=sqrt(vx1*vx1
per_frame_201=+vy1*vy1);v2=sqrt(vx3*vx3+vy3*vy3);w1=atan2(vx1,vy1);w2=atan2(vx3,vy3);vr=sin(vr1)*r;v2r=sin(vr3)*r;vx1
per_frame_202==if(bounce,sin(ref_ang)*v1*cos(w1-ref_ang)+((vr-v2r)-sin(ref_ang)*v1*cos(w1-ref_ang))*0.1+sin(ref_ang+
per_frame_203=asin(1))*v2*cos(w2-ref_ang-asin(1)),vx1);vy1=if(bounce,cos(ref_ang)*v1*cos(w1-ref_ang)+((vr-v2r)-cos
per_frame_204=(ref_ang)*v1*cos(w1-ref_ang))*0.1+cos(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)),vy1);vx3=if(bounce,sin
per_frame_205=(ref_ang)*v2*cos(w2-ref_ang)+((v2r-vr)-sin(ref_ang)*v2*cos(w2-ref_ang))*0.1+sin(ref_ang+asin(1))*v1*cos
per_frame_206=(w1-ref_ang-asin(1)),vx3);vy3=if(bounce,cos(ref_ang)*v2*cos(w2-ref_ang)+((v2r-vr)-cos(ref_ang)*v2*cos(w2
per_frame_207=-ref_ang))*0.1+cos(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)),vy3);vr=if(bounce,vr+(cos(w1-ref_ang)*(v1
per_frame_208=-v2)-vr)*0.9,vr);vr1=asin(vr/r);v2r=if(bounce,v2r+(cos(w2-ref_ang)*(v2-v1)-v2r)*0.9,v2r);vr3=asin(v2r/r);
per_frame_209=
per_frame_210=// bouncing of object3 with object2
per_frame_211=bounce=below(sqrt(sqr(x3+vx3-x2-vx2)+sqr(y3+vy3-y2-vy2)),2*r);bounce=bounce*below(sqrt(sqr(x2+vx2-x3-
per_frame_212=vx3)+sqr(y2+vy2-y3-vy3)),sqrt(sqr(x2-x3)+sqr(y2-y3)));ref_ang=atan2(x2-x3,y2-y3)+asin(1);v1=sqrt(vx3*vx3
per_frame_213=+vy3*vy3);v2=sqrt(vx2*vx2+vy2*vy2);w1=atan2(vx3,vy3);w2=atan2(vx2,vy2);vr=sin(vr3)*r;v2r=sin(vr2)*r;vx3
per_frame_214==if(bounce,sin(ref_ang)*v1*cos(w1-ref_ang)+((vr-v2r)-sin(ref_ang)*v1*cos(w1-ref_ang))*0.1+sin(ref_ang+
per_frame_215=asin(1))*v2*cos(w2-ref_ang-asin(1)),vx3);vy3=if(bounce,cos(ref_ang)*v1*cos(w1-ref_ang)+((vr-v2r)-cos
per_frame_216=(ref_ang)*v1*cos(w1-ref_ang))*0.1+cos(ref_ang+asin(1))*v2*cos(w2-ref_ang-asin(1)),vy3);vx2=if(bounce,sin
per_frame_217=(ref_ang)*v2*cos(w2-ref_ang)+((v2r-vr)-sin(ref_ang)*v2*cos(w2-ref_ang))*0.1+sin(ref_ang+asin(1))*v1*cos
per_frame_218=(w1-ref_ang-asin(1)),vx2);vy2=if(bounce,cos(ref_ang)*v2*cos(w2-ref_ang)+((v2r-vr)-cos(ref_ang)*v2*cos(w2
per_frame_219=-ref_ang))*0.1+cos(ref_ang+asin(1))*v1*cos(w1-ref_ang-asin(1)),vy2);vr=if(bounce,vr+(cos(w1-ref_ang)*(v1
per_frame_220=-v2)-vr)*0.9,vr);vr3=asin(vr/r);v2r=if(bounce,v2r+(cos(w2-ref_ang)*(v2-v1)-v2r)*0.9,v2r);vr2=asin(v2r/r);
per_frame_221=
per_frame_222=
per_frame_223=gmegabuf(1) = aspectx;
per_frame_224=gmegabuf(2) = aspecty;
per_frame_225=gmegabuf(3) = r*2;
per_frame_226=gmegabuf(4)  = x1;
per_frame_227=gmegabuf(5) = y1;
per_frame_228=gmegabuf(6) = vr1;
per_frame_229=gmegabuf(7)  = x2;
per_frame_230=gmegabuf(8) = y2;
per_frame_231=gmegabuf(9) = vr2;
per_frame_232=gmegabuf(10) = x3;
per_frame_233=gmegabuf(11) = y3;
per_frame_234=gmegabuf(12) = vr3;
per_frame_235=gmegabuf(13) = atan2( (x1+x2+x3)/3 - 0.5, (y1+y2+y3)/3-0.5);
per_frame_236=gmegabuf(14) = sigmoid(sqrt( sqr((x1+x2+x3)/3 - 0.5) + sqr((y1+y2+y3)/3-0.5) ),2)*0.2;
per_frame_237=gmegabuf(15) = 1/max(aspectx,aspecty);
per_frame_238=
per_frame_239=//monitor = gmegabuf(5);
per_pixel_1= warp = 0; dx = .00; zoom = 1; dy = 0;
per_pixel_2=
per_pixel_3=c = 42; // impacts the "sharpness" of the sigmoid filter function
per_pixel_4=s = 0.5; // strength of the rotation
per_pixel_5=d = gmegabuf(3)*0.6; // radius of the sigmoid filter function
per_pixel_6=
per_pixel_7=//
per_pixel_8=cx1 = 0.5 + (gmegabuf(4)-0.5)*gmegabuf(15);
per_pixel_9=cy1 = 0.5 - (gmegabuf(5)-0.5)*gmegabuf(15);
per_pixel_10=d1 = sqrt( sqr(x-cx1) + sqr(y-cy1));
per_pixel_11=s1 = sigmoid(d-d1,c)*s;
per_pixel_12=rx1 = -gmegabuf(6)*sin(y-cy1)*s1;
per_pixel_13=ry1 = gmegabuf(6)*sin(x-cx1)*s1;
per_pixel_14=
per_pixel_15=cx2 = 0.5 + (gmegabuf(7)-0.5)*gmegabuf(15);
per_pixel_16=cy2 = 0.5 - (gmegabuf(8)-0.5)*gmegabuf(15);
per_pixel_17=d2 = sqrt( sqr(x-cx2) + sqr(y-cy2));
per_pixel_18=s2 = sigmoid(d-d2,c)*s;
per_pixel_19=rx2 = -gmegabuf(9)*sin(y-cy2)*s2;
per_pixel_20=ry2 = gmegabuf(9)*sin(x-cx2)*s2;
per_pixel_21=
per_pixel_22=cx3 = 0.5 + (gmegabuf(10)-0.5)*gmegabuf(15);
per_pixel_23=cy3 = 0.5 - (gmegabuf(11)-0.5)*gmegabuf(15);
per_pixel_24=d3 = sqrt( sqr(x-cx3) + sqr(y-cy3));
per_pixel_25=s3 = sigmoid(0.12-d3,c)*s;
per_pixel_26=rx3 = -gmegabuf(12)*sin(y-cy3)*s3;
per_pixel_27=ry3 = gmegabuf(q12)*sin(x-cx3)*s3;
per_pixel_28=
per_pixel_29=
per_pixel_30=
per_pixel_31=dx = rx1 + rx2 + rx3;
per_pixel_32=dy = ry1 + ry2 + ry3;
per_pixel_33=
warp_1=`float dist, struc; float2 uv0, uv1; float3 box;
warp_2=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
warp_3=`static const float3 CamPos = float3(q4,q5,q6);
warp_4=`static const float myzoom = q7,  res = q31, resInv = q29, res2 = 64, res2Inv = 1.0/64.0, limit = 20;
warp_5=`static const float sustain = .95 - q14*2*0, change = q14;
warp_6=`
warp_7=`float2 fstep2(float2 xy) 
warp_8=`{
warp_9=`   //Eo.S. replaced 1.0/res with resInv so shader doesn't have to do division
warp_10=`   return resInv*round(res*xy);
warp_11=`   
warp_12=`}
warp_13=`
warp_14=`float GetDist(float2 uvi) 
warp_15=`{
warp_16=`   float2 tmp; 
warp_17=`   tmp = fstep2( tex2D(sampler_pw_main, uvi).gb ); 
warp_18=`   //return pow( 1.0-( res2Inv*(tmp.x-0.505) + tmp.y ), q3 );//Eo.S> replaced 1/q30 with q3
warp_19=`   return 1.0-( res2Inv*(tmp.x-0.505) + tmp.y );//Eo.S> q3 is always 1, so remove pow()
warp_20=`}
warp_21=`
warp_22=`float2 PutDist(float x) {
warp_23=`  float tmp; x = pow(x,q30);   
warp_24=`  tmp = fstep2(1-x);
warp_25=`  return (float2(res2*((1-x)-tmp)+.495,tmp));
warp_26=`}
warp_27=`
warp_28=`float MinDist (float2 uvi) 
warp_29=`{
warp_30=`   float tmp; float4 nb; float4 nb2; float2 pix;
warp_31=`   
warp_32=`   pix = texsize.zw*(1.0+length(uvi-0.5)*3.0);
warp_33=`   tmp = GetDist(uvi);
warp_34=`   nb.x = GetDist(uvi+pix*float2(-1,-1));  
warp_35=`   nb.y = GetDist(uvi+pix*float2(1,-1));
warp_36=`   nb.z = GetDist(uvi+pix*float2(1,1));   
warp_37=`   nb.w = GetDist(uvi+pix*float2(-1,1));
warp_38=`   //tmp = min(tmp,min(min(min(nb.x, nb.y),nb.z),nb.w)) ;
warp_39=`   nb2.x = GetDist(uvi+pix*float2(0,-1));  
warp_40=`   nb2.y = GetDist(uvi+pix*float2(1,0));
warp_41=`   nb2.z = GetDist(uvi+pix*float2(0,1));   
warp_42=`   nb2.w = GetDist(uvi+pix*float2(-1,0));
warp_43=`   //tmp = min(tmp,min(min(min(nb.x, nb.y),nb.z),nb.w)) ;
warp_44=`   
warp_45=`   //Eo.S. more efficient usage of min to get min value of all 8 GetDist() calls, removes 11ALU
warp_46=`   nb = min( nb, nb2 );
warp_47=`   nb.xy = min( nb.xy, nb.zw );
warp_48=`   tmp = min( nb.x, nb.y );
warp_49=`   return tmp;
warp_50=`}
warp_51=`
warp_52=`float3 Get1 (float2 uvi) 
warp_53=`{
warp_54=`   float3 tmp; float2 pix;
warp_55=`   tmp = GetBlur1(uvi)*3;
warp_56=`   return lerp (GetPixel(uvi),tmp/3,change*4);
warp_57=`}
warp_58=`
warp_59=`float3 mbox (float3 uvi) 
warp_60=`{
warp_61=`   float3 zz, zz0; float tmp, li;
warp_62=`   zz = uvi; zz0 = zz;
warp_63=`   for (int n = 0; n <= 7; n++) 
warp_64=`   {
warp_65=`      zz = 2.0*clamp(zz,-1,1)-zz;  tmp = dot(zz,zz);
warp_66=`      if (tmp <= 0.25) {zz *= 4;} else if (tmp <= 1) {zz /= pow(tmp,1);}
warp_67=`      zz = 2.6*zz + zz0;
warp_68=`   }
warp_69=`   return zz;
warp_70=`}
warp_71=`
warp_72=`shader_body {
warp_73=`
warp_74=`   uv = (uv-.5)*q13 + .5;
warp_75=`   uv1 = (uv-.5)*aspect.xy;
warp_76=`   float3 noise = frac(8*tex2D(sampler_noise_lq,uv+rand_frame.yz)); 
warp_77=`
warp_78=`   dist = noise.r;
warp_79=`   if (noise.g > 0.2) 
warp_80=`   {
warp_81=`       //dist = MinDist( (noise.zy-0.5) * 0.003 +uv ) +  0.005 * (noise.x-0.4) * abs(noise.y-0.5);
warp_82=`       float3 noiseBiased = noise - float3( 0.4, 0.5, 0.5 );//Eo.S. combine the subtraction on noise to a single float3 to ensure compiler does the subtraction in a single ALU
warp_83=`       dist = MinDist( (noiseBiased.zy) * 0.003 +uv ) +  0.005 * (noiseBiased.x) * abs(noiseBiased.y);
warp_84=`   }
warp_85=`   dist = min(dist,GetDist(uv));
warp_86=`
warp_87=`   float3 uv2 = mul(float3(uv1*dist,dist-.02)/myzoom,RotMat)+CamPos;
warp_88=`   uv2 = (frac(uv2/8.0+.5)-.5)*8.0;
warp_89=`   box = mbox (uv2);
warp_90=`   float len = (length(box));
warp_91=`   struc = length(box.zy) /limit;
warp_92=`
warp_93=`   if ((dist <= GetDist(uv)) && (len < limit) && (dist > 0.005))
warp_94=`   {
warp_95=`      ret.r = (1-sustain)*struc+sustain*(Get1(uv).r); ret.gb=  PutDist(dist); 
warp_96=`   } 
warp_97=`   else 
warp_98=`   {
warp_99=`      ret = tex2D(sampler_fc_main,uv) * float3(sustain, 1.0, 1.0)-float3(0.0, 0.0, change);
warp_100=`   } 
warp_101=`   //ret = noise;
warp_102=`}
comp_1=`#define sat saturate
comp_2=`static const float2 pix = texsize.zw;
comp_3=`float glow, tmp, lamp, dist, bdist, b2dist, dist_c;
comp_4=`float2 dz, uv1, uv3;
comp_5=`static const float3 CamPos = float3(q4,q5,q6);
comp_6=`static const float myzoom = q7;
comp_7=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
comp_8=`static const float3 col_back = lerp(float3(0,0.4,1), float3(1,0.4,0),rand_preset.x>=0.8);
comp_9=`static const float3 col_struc =  float3(1,.7,.3) + .2*slow_roam_sin;
comp_10=`static float2 center = float2 (q1,q2);
comp_11=`
comp_12=`float3 GetBlurX (float2 uvi, float x) {return lerp (GetPixel(uvi), GetBlur1(uvi), x);}
comp_13=`float GetDist(float2 uvi)   {return 1-GetPixel(uvi).b;}
comp_14=`float GetDistB(float2 uvi)  {return 1-GetBlur1(uvi).b;}
comp_15=`float GetDistB2(float2 uvi) {return 1-GetBlur2(uvi).b;}
comp_16=`
comp_17=`float MinDistB (float2 uvi) {float tmp; float4 nb; //##nicht ideal
comp_18=`  tmp = GetDist(uvi);
comp_19=`  tmp = min(tmp,GetDistB2(uvi)) ;
comp_20=`  return tmp;}
comp_21=`
comp_22=`shader_body { uv1 = (uv-center)*aspect.xy;
comp_23=`//Glow
comp_24=`float3 uv2 = mul(float3((uv-.5)*MinDistB(uv),MinDistB(uv))/myzoom,RotMat)+CamPos;
comp_25=`//glow = pow (sat(tex2D (sampler_noise_hq,.02*uv2).r-.5)*1,1);
comp_26=`uv += .002*glow*tex2D (sampler_noise_mq,uv/2+float2(0,time/4));
comp_27=`
comp_28=`dist = MinDistB(uv);
comp_29=`bdist = lerp(dist,GetDistB(uv),.2);
comp_30=`b2dist= lerp(dist,GetDistB(uv),1);;
comp_31=`dist_c = clamp(GetDistB2 (center),.1,0); //center distance
comp_32=`
comp_33=`float focus = sat(abs(b2dist-dist_c)*.003);
comp_34=`float struc = GetBlurX(uv,focus).r;
comp_35=`
comp_36=`ret = pow(struc,1.5)* (.1+pow(1-focus,.8) *lerp(dist,1-dist,q18)) / (treb+col_struc);
comp_37=`
comp_38=`//Glow
comp_39=`glow *=  (.8+ .1/tex3D (sampler_noisevol_lq,(uv2*2)));
comp_40=`ret += saturate(exp(-4*max(struc,bdist))) * float3(glow,glow,glow);
comp_41=`
comp_42=`//distant light
comp_43=`ret += bdist*bdist*col_back *q19*mid;
comp_44=`
comp_45=`//Lamp
comp_46=`uv3 = uv1; 
comp_47=`lamp = saturate(1-4*length(uv3))*struc*saturate(1-2*bdist)*1.6;
comp_48=`ret += (1-lum(ret))*lamp*float3(.15,.15,1) ;
comp_49=`
comp_50=`ret = 1-exp((-1.6)*ret);
comp_51=`}
comp_52=`
comp_53=`//-------------------------------------------
comp_54=`//Written by martin
comp_55=`
