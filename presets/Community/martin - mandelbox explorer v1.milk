MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=4.000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.958
fWaveSmoothing=0.450
fWaveParam=0.000
fModWaveAlphaStart=0.000
fModWaveAlphaEnd=1.320
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=25.600
nMotionVectorsY=9.600
mv_dx=0.000
mv_dy=0.000
mv_l=0.000
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=0
wavecode_0_samples=282
wavecode_0_sep=20
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=3.91581
wavecode_0_smoothing=0.10000
wavecode_0_r=0.200
wavecode_0_g=0.300
wavecode_0_b=1.000
wavecode_0_a=0.600
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=0
wavecode_1_scaling=0.89152
wavecode_1_smoothing=0.82000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=0.100
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=0
wavecode_2_scaling=0.89152
wavecode_2_smoothing=0.82000
wavecode_2_r=0.000
wavecode_2_g=0.200
wavecode_2_b=0.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=0
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.090
shapecode_0_y=0.900
shapecode_0_rad=0.22437
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.76002
shapecode_0_r=1.000
shapecode_0_g=0.000
shapecode_0_b=0.000
shapecode_0_a=1.000
shapecode_0_r2=1.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.600
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shapecode_1_enabled=0
shapecode_1_sides=100
shapecode_1_additive=1
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.260
shapecode_1_y=0.200
shapecode_1_rad=0.39317
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=6.19589
shapecode_1_r=0.000
shapecode_1_g=0.550
shapecode_1_b=0.500
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.400
shapecode_1_b2=0.400
shapecode_1_a2=0.070
shapecode_1_border_r=0.300
shapecode_1_border_g=0.700
shapecode_1_border_b=0.800
shapecode_1_border_a=0.000
shapecode_2_enabled=0
shapecode_2_sides=44
shapecode_2_additive=1
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.503
shapecode_2_y=0.500
shapecode_2_rad=0.03886
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.60986
shapecode_2_r=1.000
shapecode_2_g=0.100
shapecode_2_b=0.000
shapecode_2_a=0.900
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=1.000
shapecode_2_a2=0.000
shapecode_2_border_r=0.500
shapecode_2_border_g=0.500
shapecode_2_border_b=0.500
shapecode_2_border_a=0.000
shapecode_3_enabled=0
shapecode_3_sides=100
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.01000
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.49981
shapecode_3_r=0.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=0.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=0.200
shapecode_3_border_g=0.700
shapecode_3_border_b=0.500
shapecode_3_border_a=0.000
per_frame_init_1=
per_frame_init_2=//******** INITIALIZATION *********
per_frame_init_3=n = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); 
per_frame_init_4=n = 0; loop (10000,  megabuf(n)=0; n=n+1; ); 
per_frame_init_5=trelx = 0;  trely = 0; trelz = 0;
per_frame_init_6=reg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;
per_frame_init_7=
per_frame_init_8=//Find random starting point
per_frame_init_9=while (exec2(
per_frame_init_10=  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;
per_frame_init_11=  PosX = rand(10)-5;   PosY = rand(10)-5;   PosZ = rand(10)-5; 
per_frame_init_12=  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); 
per_frame_init_13=  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);
per_frame_init_14=
per_frame_init_15=  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;
per_frame_init_16=  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;
per_frame_init_17=  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;
per_frame_init_18=
per_frame_init_19=  //***********BOT*************
per_frame_init_20=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_init_21=  dist = 0.001;
per_frame_init_22=  while (exec2(
per_frame_init_23=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_init_24=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_init_25=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_init_26=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_init_27=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_init_28=    uvx0 = uvx; uvy0 = uvy; uvz0 = uvz;
per_frame_init_29=    loop (7+1,
per_frame_init_30=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_init_31=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_init_32=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_init_33=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_init_34=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_init_35=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_init_36=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_init_37=    );
per_frame_init_38=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_init_39=    dist *= 1.05;
per_frame_init_40=  ,(dist < 0.6)*(len > 30)));
per_frame_init_41=,(dist < .2))); //end while
per_frame_init_42=
per_frame_init_43=
per_frame_init_44=//---------- some global vars, do not change -------------
per_frame_init_45=q7 = .1; //MyZoom
per_frame_init_46=q30 = 1; //logarithmic Z-Dist storage; unused
per_frame_init_47=q31 = 128;
per_frame_init_48=start = 1; travel = 0; RotZ = 0; look = 0; slow = 0;
per_frame_init_49=cran0 = rand(1);
per_frame_init_50=cran1 = rand(1);
per_frame_1=fps_ = .9 * fps_ + .1*if(fps<=25,fps,25+.5*(fps-25)); 
per_frame_2=dec_s = 1-.03*30/fps_;
per_frame_3=
per_frame_4=beat = (time >  t0+2);
per_frame_5=t0 = if(beat, time, t0);
per_frame_6=
per_frame_7=speed = min(0.2,dist_-.0) * (1+avg) *(1-slow*.7);
per_frame_8=ds = ds * dec_s + (1-dec_s)*speed*.2/fps_ ; 
per_frame_9=
per_frame_10=RotZ = if (RotZ==0,beat*(rand(100)<10)*(rand(10)/10-.5),
per_frame_11=                   bnot(beat*(rand(100)<30))*RotZ);
per_frame_12=
per_frame_13=slow = if (bnot(slow), beat*(rand(1000*avg)<6), bnot(beat*(rand(100)<50)));
per_frame_14=look = if (bnot(look), beat*(rand(1000*speed)<5), bnot(beat));
per_frame_15=
per_frame_16=//Lamp View
per_frame_17=lx = if (beat,rand(150)/200+.15,lx);
per_frame_18=ly = if (beat,rand(150)/200+.15,ly);
per_frame_19=lampx = lampx * dec_s + (1-dec_s)*if (look,lx,0.5);
per_frame_20=lampy = lampy * dec_s + (1-dec_s)*if (look,ly,0.5);
per_frame_21=q1 = lampx; q2 = lampy;
per_frame_22=
per_frame_23=//Position 
per_frame_24=DirX= reg26; DirY= reg27; DirZ = reg28;
per_frame_25=PosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ; 
per_frame_26=q4 = PosX; q5 = PosY; q6 = PosZ;
per_frame_27=
per_frame_28=angchg = (.15-dist_)*(dist_ < .15)/2;
per_frame_29=travel = if (angchg > 0,0,travel+ds);
per_frame_30=v1 = v1 * dec_s + (1-dec_s)* RotZ * .05/fps_;
per_frame_31=v2 = v2 *dec_s + (1-dec_s)*angchg *xslope/fps_;
per_frame_32=v3 = v3 *dec_s + (1-dec_s)*(angchg *yslope/fps_ + v1/2 * (travel>1));
per_frame_33=
per_frame_34=//push old RotMat
per_frame_35=reg30 =reg20; reg31 =reg21; reg32 =reg22; 
per_frame_36=reg33 =reg23; reg34 =reg24; reg35 =reg25; 
per_frame_37=reg36 =reg26; reg37 =reg27; reg38 =reg28; 
per_frame_38=
per_frame_39=n = 0; avg = 0;
per_frame_40=loop (5,
per_frame_41=  n = n+1;
per_frame_42=  //new Rot. Mat for infinitesimal angles
per_frame_43=  ran1 = rand(100)/100;
per_frame_44=  ran2 = rand(100)/200-.25;
per_frame_45=  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;
per_frame_46=  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); 
per_frame_47=  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);
per_frame_48=  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;
per_frame_49=  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;
per_frame_50=  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;
per_frame_51=
per_frame_52=  //pop old RotMat
per_frame_53=  reg20 =reg30; reg21 =reg31; reg22 =reg32; 
per_frame_54=  reg23 =reg33; reg24 =reg34; reg25 =reg35; 
per_frame_55=  reg26 =reg36; reg27 =reg37; reg28 =reg38; 
per_frame_56=
per_frame_57=  //Multiply new RotMat by old one
per_frame_58=  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;
per_frame_59=  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;
per_frame_60=  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;
per_frame_61=  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;
per_frame_62=  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;
per_frame_63=  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;
per_frame_64=  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;
per_frame_65=  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;
per_frame_66=  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;
per_frame_67=
per_frame_68=  reg20 =q20; reg21 =q21; reg22 =q22;
per_frame_69=  reg23 =q23; reg24 =q24; reg25 =q25;
per_frame_70=  reg26 =q26; reg27 =q27; reg28 =q28;
per_frame_71=
per_frame_72=  //***********BOT*************
per_frame_73=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_74=  dist = 0.002;
per_frame_75=  while (exec2(
per_frame_76=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_77=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_78=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_79=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_80=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_81=    uvx0 = uvx; uvy0 = uvy; uvz0 = uvz;
per_frame_82=    loop (7+1,
per_frame_83=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_84=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_85=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_86=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_87=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_88=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_89=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_90=    );
per_frame_91=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_92=    dist *= 1.1;
per_frame_93=  ,(dist < 0.6)*(len > 30)));
per_frame_94=  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points
per_frame_95=  avg = avg+abs(megabuf(n)/5);
per_frame_96=); //end loop 5
per_frame_97=
per_frame_98=n = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));
per_frame_99=
per_frame_100=xslope = 1/avg*(megabuf(1)-megabuf(3));
per_frame_101=yslope =  1/avg*(megabuf(4)-megabuf(2));
per_frame_102=monitor = avg;
per_frame_103=dist_ = dist_*dec_s + (1-dec_s)*dist;
per_frame_104=
per_frame_105=//sustain
per_frame_106=q13 = 1-ds; //warp zoom uv 
per_frame_107=q14 = 4*abs(ds) + 6*(abs(v1) + 2*abs(v2) + 2*abs(v3)) + 1.0/255 + start*.1; 
per_frame_108=q18 = cran1; //brightness balance back/front
per_frame_109=q19 = .5 + .5*sin(time*.02+cran0*6); //brightness backgd
per_frame_110=start = start * .9;
per_pixel_1= warp = 0; dx = .00; zoom = 1; dy = 0;
warp_1=`float dist, struc; float2 uv0, uv1; float3 box;
warp_2=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
warp_3=`static const float3 CamPos = float3(q4,q5,q6);
warp_4=`static const float myzoom = q7,  res = q31, res2 = 64, limit = 20;
warp_5=`static const float sustain = .98 - q14*2, change = q14;
warp_6=`
warp_7=`float2 fstep2 (float2 xy) {return 1.0/res*round(res*xy);}
warp_8=`
warp_9=`float GetDist(float2 uvi) {float2 tmp; tmp = fstep2(tex2D (sampler_pw_main, uvi).gb); 
warp_10=`  return pow(1-(tmp.y + 1.0/res2*(tmp.x-.505)),1/q30);}
warp_11=`
warp_12=`float2 PutDist(float x) {float tmp; x = pow(x,q30);   tmp = fstep2(1-x);
warp_13=`  return (float2(res2*((1-x)-tmp)+.495,tmp));}
warp_14=`
warp_15=`float MinDist (float2 uvi) {float tmp; float4 nb; float2 pix;
warp_16=`  pix = texsize.zw*(1+length(uvi-.5)*3);
warp_17=`  tmp = GetDist(uvi);
warp_18=`  nb.x = GetDist(uvi+pix*float2(-1,-1));  nb.y = GetDist(uvi+pix*float2(1,-1));
warp_19=`  nb.z = GetDist(uvi+pix*float2(1,1));   nb.w = GetDist(uvi+pix*float2(-1,1));
warp_20=`  tmp = min(tmp,min(min(min(nb.x, nb.y),nb.z),nb.w)) ;
warp_21=`  nb.x = GetDist(uvi+pix*float2(0,-1));  nb.y = GetDist(uvi+pix*float2(1,0));
warp_22=`  nb.z = GetDist(uvi+pix*float2(0,1));   nb.w = GetDist(uvi+pix*float2(-1,0));
warp_23=`  tmp = min(tmp,min(min(min(nb.x, nb.y),nb.z),nb.w)) ;
warp_24=`  return tmp;}
warp_25=`
warp_26=`float3 Get1 (float2 uvi) {float3 tmp; float2 pix;
warp_27=`  tmp = GetBlur1(uvi)*3;
warp_28=`  return lerp (GetPixel(uvi),tmp/3,change*4);}
warp_29=`
warp_30=`float3 mbox (float3 uvi) {float3 zz, zz0; float tmp, li;
warp_31=`  zz = uvi; zz0 = zz;
warp_32=`  for (int n = 0; n <= 7; n++) {
warp_33=`    zz = 2.0*clamp(zz,-1,1)-zz;  tmp = dot(zz,zz);
warp_34=`    if (tmp <= 0.25) {zz *= 4;} else if (tmp <= 1) {zz /= pow(tmp,1);}
warp_35=`    zz = 2.6*zz + zz0;}
warp_36=`  return zz;}
warp_37=`
warp_38=`shader_body {
warp_39=`uv = (uv-.5)*q13 + .5;
warp_40=`uv1 = (uv-.5)*aspect.xy;
warp_41=`float3 noise = frac(8*tex2D (sampler_noise_lq,uv+rand_frame.yz)); 
warp_42=`
warp_43=`dist = noise.r;
warp_44=`if (noise.g > 0.2) {dist = MinDist(uv+.003*(noise.zy-.5)) + .005*(noise.r-.4)*abs(noise.b-.5);}
warp_45=`dist = min(dist,GetDist(uv));
warp_46=`
warp_47=`float3 uv2 = mul(float3(uv1*dist,dist-.02)/myzoom,RotMat)+CamPos;
warp_48=`uv2 = (frac(uv2/8.0+.5)-.5)*8.0;
warp_49=`box = mbox (uv2);
warp_50=`float len = (length(box));
warp_51=`struc = length(box.zy) /limit;
warp_52=`
warp_53=`if ((dist <= GetDist(uv)) && (len < limit) && (dist > 0.005)){
warp_54=` ret.r = (1-sustain)*struc+sustain*(Get1(uv).r); ret.gb=  PutDist(dist); } 
warp_55=` else {ret = tex2D(sampler_pc_main,uv_orig)*float3(sustain,1,1)-float3(0,0,change);} 
warp_56=`}
comp_1=`#define sat saturate
comp_2=`static const float2 pix = texsize.zw;
comp_3=`float glow, tmp, lamp, dist, bdist, b2dist, dist_c;
comp_4=`float2 dz, uv1, uv3;
comp_5=`static const float3 CamPos = float3(q4,q5,q6);
comp_6=`static const float myzoom = q7;
comp_7=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
comp_8=`static const float3 col_back = lerp(float3(0,0.4,1), float3(1,0.4,0),rand_preset.x>=0.8);
comp_9=`static const float3 col_struc =  float3(1,.7,.3) + .2*slow_roam_sin;
comp_10=`static float2 center = float2 (q1,q2);
comp_11=`
comp_12=`float3 GetBlurX (float2 uvi, float x) {return lerp (GetPixel(uvi), GetBlur1(uvi), x);}
comp_13=`float GetDist(float2 uvi)   {return 1-GetPixel(uvi).b;}
comp_14=`float GetDistB(float2 uvi)  {return 1-GetBlur1(uvi).b;}
comp_15=`float GetDistB2(float2 uvi) {return 1-GetBlur2(uvi).b;}
comp_16=`
comp_17=`float MinDistB (float2 uvi) {float tmp; float4 nb; //##nicht ideal
comp_18=`  tmp = GetDist(uvi);
comp_19=`  tmp = min(tmp,GetDistB2(uvi)) ;
comp_20=`  return tmp;}
comp_21=`
comp_22=`shader_body {uv1 = (uv-center)*aspect.xy;
comp_23=`//Glow
comp_24=`float3 uv2 = mul(float3((uv-.5)*MinDistB(uv),MinDistB(uv))/myzoom,RotMat)+CamPos;
comp_25=`glow = pow (sat(tex2D (sampler_noise_hq,.02*uv2).r-.5)*2,2);
comp_26=`uv += .002*glow*tex2D (sampler_noise_mq,uv/2+float2(0,time/4));
comp_27=`
comp_28=`dist = MinDistB(uv);
comp_29=`bdist = lerp(dist,GetDistB(uv),.2);
comp_30=`b2dist= lerp(dist,GetDistB(uv),1);;
comp_31=`dist_c = clamp(GetDistB2 (center),.02,.5); //center distance
comp_32=`
comp_33=`float focus = sat(abs(b2dist-dist_c)*3);
comp_34=`float struc = GetBlurX(uv,focus).r;
comp_35=`
comp_36=`ret = pow(struc,1.5)* (.1+pow(1-focus,.8) *lerp(dist,1-dist,q18)) * col_struc;
comp_37=`
comp_38=`//Glow
comp_39=`glow *=  (.8+ .1/tex3D (sampler_noisevol_lq,(uv2*2)));
comp_40=`ret += saturate(exp(-4*max(struc,bdist))) * float3(glow,0,0);
comp_41=`
comp_42=`//distant light
comp_43=`ret += bdist*bdist*col_back *q19;
comp_44=`
comp_45=`//Lamp
comp_46=`uv3 = uv1; 
comp_47=`lamp = saturate(1-4*length(uv3))*struc*saturate(1-2*bdist)*1.6;
comp_48=`ret += (1-lum(ret))*lamp*float3(.65,.75,1) ;
comp_49=`
comp_50=`ret = 1-exp((-1.6)*ret);
comp_51=`}
comp_52=`
comp_53=`//-------------------------------------------
comp_54=`//Written by martin
comp_55=`
