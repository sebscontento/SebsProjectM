MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=1.000000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=0
bAdditiveWaves=0
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=0
bMaximizeWaveColor=1
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.004
fWaveScale=9.731
fWaveSmoothing=0.000
fWaveParam=1.000
fModWaveAlphaStart=1.000
fModWaveAlphaEnd=1.000
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=1.000
wave_g=1.000
wave_b=1.000
wave_x=0.500
wave_y=0.040
ob_size=0.000
ob_r=0.000
ob_g=0.100
ob_b=1.000
ob_a=1.000
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.000
mv_r=1.000
mv_g=1.000
mv_b=0.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=452
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=2.44415
wavecode_0_smoothing=0.00000
wavecode_0_r=0.150
wavecode_0_g=0.000
wavecode_0_b=0.050
wavecode_0_a=0.250
wave_0_init1=t2 = 0;
wave_0_init2=t3 = 0;
wave_0_init3=t4 = 0;
wave_0_init4=cl = 0;
wave_0_per_frame1=t1 = 0;
wave_0_per_frame2=t2 = 0;
wave_0_per_point1=ppo = 9;
wave_0_per_point2=index = t2*q32;
wave_0_per_point3=sample = t1 % ppo;
wave_0_per_point4=
wave_0_per_point5=nindex = gmegabuf(index + q30); // the next neighbor's index
wave_0_per_point6=nnindex = gmegabuf(index + q30+1); // the next neighbor's index
wave_0_per_point7=nnnindex = gmegabuf(index + q30+2); // the next neighbor's index
wave_0_per_point8=
wave_0_per_point9=x = gmegabuf(index);
wave_0_per_point10=y = gmegabuf(index+1);
wave_0_per_point11=//r = 0;//0.5 + gmegabuf(index+5)*0.5;
wave_0_per_point12=//g = 0;//0.5 + gmegabuf(index+6)*0.5;
wave_0_per_point13=//b = 1;//.5 + gmegabuf(index+7)*0.5;
wave_0_per_point14=
wave_0_per_point15=nx = gmegabuf(nindex);
wave_0_per_point16=ny = gmegabuf(nindex+1);
wave_0_per_point17=nnx = gmegabuf(nnindex);
wave_0_per_point18=nny = gmegabuf(nnindex+1);
wave_0_per_point19=nnnx = gmegabuf(nnnindex);
wave_0_per_point20=nnny = gmegabuf(nnnindex+1);
wave_0_per_point21=
wave_0_per_point22=x = 0.5 + (x-0.5)*q1;
wave_0_per_point23=y = 0.5 + (y-0.5)*q1;
wave_0_per_point24=nx = 0.5 + (nx-0.5)*q1;
wave_0_per_point25=ny = 0.5 + (ny-0.5)*q1;
wave_0_per_point26=nnx = 0.5 + (nnx-0.5)*q1;
wave_0_per_point27=nny = 0.5 + (nny-0.5)*q1;
wave_0_per_point28=nnnx = 0.5 + (nnnx-0.5)*q1;
wave_0_per_point29=nnny = 0.5 + (nnny-0.5)*q1;
wave_0_per_point30=
wave_0_per_point31=x = if( equal(sample,2), nx, x);
wave_0_per_point32=y = if( equal(sample,2), ny, y);
wave_0_per_point33=x = if( equal(sample,4), nnx, x);
wave_0_per_point34=y = if( equal(sample,4), nny, y);
wave_0_per_point35=x = if( equal(sample,6), nnnx, x);
wave_0_per_point36=y = if( equal(sample,6), nnny, y);
wave_0_per_point37=
wave_0_per_point38=a = above(sample,1)*below(sample,ppo-1)*a;
wave_0_per_point39=
wave_0_per_point40=t1 = t1 + 1;
wave_0_per_point41=t2 = if( equal(t1%ppo,0), t2 +1, t2);
wavecode_1_enabled=1
wavecode_1_samples=65
wavecode_1_sep=0
wavecode_1_bSpectrum=1
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=0.33408
wavecode_1_smoothing=0.00000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wave_1_init1=t2 = 0;
wave_1_init2=t3 = 0;
wave_1_init3=t4 = 0;
wave_1_init4=cl = 0;
wave_1_per_frame1=t8 = 1;
wave_1_per_frame2=
wave_1_per_frame3=t1 = 0.5;
wave_1_per_frame4=t2 = 0.9;
wave_1_per_point1=d = 0;//d*0.85 + (value1)*1;
wave_1_per_point2=
wave_1_per_point3=y = 0.2 + (value1+value2)*0.5;
wave_1_per_point4=x = 0.9 - sample*0.8;
wave_1_per_point5=
wave_1_per_point6=gmegabuf((sample*128-1)*q32 + 14) = value1 + value2;
wavecode_2_enabled=0
wavecode_2_samples=350
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=1
wavecode_2_scaling=5.92556
wavecode_2_smoothing=0.00000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wave_2_per_frame1=t1 = 0;
wave_2_per_frame2=t2 = 0;
wave_2_per_frame3=
wave_2_per_frame4=
wave_2_per_point1=// q32 number of attributes
wave_2_per_point2=// q31 number of objects
wave_2_per_point3=
wave_2_per_point4=ppo = 7; // number of points used for each object
wave_2_per_point5=index = t2*q32; // object's index
wave_2_per_point6=
wave_2_per_point7=x = 0.5 +(gmegabuf(index)-0.5)/q2;
wave_2_per_point8=y = 0.5 + (gmegabuf(index+1)-0.5)/q2;
wave_2_per_point9=
wave_2_per_point10=// collecting pairs of index and distance to the current object in a local buffer
wave_2_per_point11=i = 0;
wave_2_per_point12=j = 0; 
wave_2_per_point13=loop(q31,
wave_2_per_point14=     d = sqrt( sqr(gmegabuf(index)-gmegabuf(i)) + sqr(gmegabuf(index+1)-gmegabuf(i+1)));
wave_2_per_point15=     d = if( equal(d,0), 1, d);
wave_2_per_point16=     megabuf(j)   = i; // store index/distance pairs
wave_2_per_point17=     megabuf(j+1) = d; 
wave_2_per_point18=     j = j+2;
wave_2_per_point19=     i = i+q32;
wave_2_per_point20=    );
wave_2_per_point21=
wave_2_per_point22=// sort that buffer, but only 5 cycles for the 5 nearest objects
wave_2_per_point23=i = 0;
wave_2_per_point24=loop( 5,
wave_2_per_point25=      j = i;
wave_2_per_point26=      smallestfind = 100;
wave_2_per_point27=      findindex = 0;
wave_2_per_point28=      loop( q31-j,
wave_2_per_point29=            distance =megabuf(j*2+1);
wave_2_per_point30=            smaller = above( smallestfind, distance);
wave_2_per_point31=            smallestfind = if(smaller, distance, smallestfind);
wave_2_per_point32=            findindex = if( smaller, j*2, findindex);
wave_2_per_point33=            j = j + 1;
wave_2_per_point34=          );
wave_2_per_point35=
wave_2_per_point36=      // now that the nearest object was found, swap it to the buffer's top
wave_2_per_point37=
wave_2_per_point38=      j = megabuf(i);
wave_2_per_point39=      d = megabuf(i+1);
wave_2_per_point40=
wave_2_per_point41=      megabuf(i)   = megabuf(findindex);
wave_2_per_point42=      megabuf(i+1) = megabuf(findindex+1);
wave_2_per_point43=      megabuf(findindex)   = j;
wave_2_per_point44=      megabuf(findindex+1) = d;
wave_2_per_point45=
wave_2_per_point46=      i = i+1;
wave_2_per_point47=    );
wave_2_per_point48=
wave_2_per_point49=
wave_2_per_point50=index2 = (t1)%ppo;
wave_2_per_point51=i = megabuf(index2-2);
wave_2_per_point52=xx = 0.5 + (gmegabuf(i)-0.5)/q2;
wave_2_per_point53=yy = 0.5 + (gmegabuf(i+1)-0.5)/q2;
wave_2_per_point54=w = asin(1)*index2/4;
wave_2_per_point55=//xx = x + sin(w)*0.1;
wave_2_per_point56=//yy = y + cos(w)*0.1;
wave_2_per_point57=x = if( equal(index2%2,0), x, xx);
wave_2_per_point58=y = if( equal(index2%2,0), y, yy);
wave_2_per_point59=
wave_2_per_point60=
wave_2_per_point61=a = below(index2,ppo-1)*above(index2,1)*a;
wave_2_per_point62=r = 0;//.5 + gmegabuf(index + 5)*0.5;
wave_2_per_point63=g = 0;//.5 + gmegabuf(index + 6)*0.5;
wave_2_per_point64=b = 1;//0.5 + gmegabuf(index + 7)*0.5;
wave_2_per_point65=
wave_2_per_point66=
wave_2_per_point67=t2 = t2 + equal(t1%ppo,ppo-1);
wave_2_per_point68=t1 = t1 + 1;
wave_2_per_point69=
wave_2_per_point70=//a = above(t1,128);
wavecode_3_enabled=0
wavecode_3_samples=15
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=1
wavecode_3_scaling=5.92556
wavecode_3_smoothing=0.00000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=0.400
wave_3_init1=t2 = 0
wave_3_per_frame1=t1 = 0;
wave_3_per_frame2=t2 = 0;
wave_3_per_frame3=t3 = 0;
wave_3_per_frame4=t4 = 0.5;
wave_3_per_point1=ppo = 5;
wave_3_per_point2=
wave_3_per_point3=index = t2*q32;
wave_3_per_point4=neighbor = 1;
wave_3_per_point5=neighbor = gmegabuf(index+10+neighbor);
wave_3_per_point6=x = 0.5 + (gmegabuf(index)-0.5)/q2;
wave_3_per_point7=y = 0.5 + (gmegabuf(index+1)-0.5)/q2;
wave_3_per_point8=xx = 0.5 + ( gmegabuf(neighbor) - 0.5)/q2;
wave_3_per_point9=yy = 0.5 + ( gmegabuf(neighbor+1) - 0.5)/q2;
wave_3_per_point10=
wave_3_per_point11=x = if( equal(t1 % 2, 0), x, xx);
wave_3_per_point12=y = if( equal(t1 % 2, 0), y, yx);
wave_3_per_point13=
wave_3_per_point14=
wave_3_per_point15=t2 = t2 + equal(t1,ppo);
wave_3_per_point16=t1 = if(above(t1,ppo),t1-ppo,t1) + 1;
wave_3_per_point17=
shapecode_0_enabled=0
shapecode_0_sides=3
shapecode_0_additive=1
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=392
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.16283
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=0.73458
shapecode_0_r=1.000
shapecode_0_g=0.000
shapecode_0_b=0.000
shapecode_0_a=0.500
shapecode_0_r2=0.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shape_0_init1=i3 = 0;
shape_0_init2=i4 = 0;
shape_0_per_frame1=i3 = if(equal(instance,0),0,i3);
shape_0_per_frame2=i4 = if(equal(instance,0),0,i4);
shape_0_per_frame3=ppo = 8;
shape_0_per_frame4=index = i4*q32;
shape_0_per_frame5=sample = i3 % ppo;
shape_0_per_frame6=
shape_0_per_frame7=size = gmegabuf(index+4)*40;
shape_0_per_frame8=
shape_0_per_frame9=x = gmegabuf(index);
shape_0_per_frame10=y = gmegabuf(index+1);
shape_0_per_frame11=
shape_0_per_frame12=ang = gmegabuf(index+9);
shape_0_per_frame13=rad = size*0.05;
shape_0_per_frame14=
shape_0_per_frame15=//r = gmegabuf(index+5);
shape_0_per_frame16=//g = gmegabuf(index+6);
shape_0_per_frame17=//b = gmegabuf(index+7);
shape_0_per_frame18=
shape_0_per_frame19=
shape_0_per_frame20=sample = sample/ppo;
shape_0_per_frame21=bending = gmegabuf(index + 12)*5 + gmegabuf(index + 10)*5;
shape_0_per_frame22=dir = -ang + (sample-0.4)*bending;
shape_0_per_frame23=
shape_0_per_frame24= ang =  asin(1)*1.5 - dir + bending*0.05;
shape_0_per_frame25=
shape_0_per_frame26=x = x + ((sample-0.3)*0.06*cos(dir)*size + sin(dir)*size*bending*0.01);
shape_0_per_frame27=y = y + ((sample-0.3)*0.06*sin(dir)*size - cos(dir)*size*bending*0.01);
shape_0_per_frame28=
shape_0_per_frame29=x = 0.5 + (x-0.5)*q1;
shape_0_per_frame30=
shape_0_per_frame31=rad = rad*1.5 - sample*0.05*size;
shape_0_per_frame32=
shape_0_per_frame33=i3 = i3 + 1;
shape_0_per_frame34=i4 = if( equal(i3%ppo,0), i4 +1, i4);
shapecode_1_enabled=0
shapecode_1_sides=32
shapecode_1_additive=1
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.05236
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=1.000
shapecode_1_g=0.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=1.000
shapecode_1_g2=0.000
shapecode_1_b2=0.000
shapecode_1_a2=0.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.000
shape_1_per_frame1=x = q3;
shape_1_per_frame2=y = q4;
shape_1_per_frame3=
shape_1_per_frame4=x = 0.5 + (x-0.5)/q2;
shape_1_per_frame5=y = 0.5 + (y-0.5)/q1;
shapecode_2_enabled=1
shapecode_2_sides=3
shapecode_2_additive=1
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=50
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.16283
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.73458
shapecode_2_r=1.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=0.000
shapecode_2_r2=0.200
shapecode_2_g2=0.000
shapecode_2_b2=1.000
shapecode_2_a2=0.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=1.000
shape_2_init1=i3 = 0;
shape_2_init2=i4 = 0;
shape_2_per_frame1=i3 = if(equal(instance,0),0,i3);
shape_2_per_frame2=i4 = if(equal(instance,0),0,i4);
shape_2_per_frame3=ppo = 1;
shape_2_per_frame4=index = i4*q32;
shape_2_per_frame5=sample = i3 % ppo;
shape_2_per_frame6=
shape_2_per_frame7=size = gmegabuf(index+4);
shape_2_per_frame8=
shape_2_per_frame9=x = gmegabuf(index);
shape_2_per_frame10=y = gmegabuf(index+1);
shape_2_per_frame11=
shape_2_per_frame12=ang = gmegabuf(index+9);
shape_2_per_frame13=rad = size*0.05;
shape_2_per_frame14=
shape_2_per_frame15=//r = gmegabuf(index+5);
shape_2_per_frame16=//g = gmegabuf(index+6);
shape_2_per_frame17=//b = gmegabuf(index+7);
shape_2_per_frame18=
shape_2_per_frame19=
shape_2_per_frame20=sample = sample/ppo;
shape_2_per_frame21=bending = gmegabuf(index + 12)*5 + gmegabuf(index + 10)*5;
shape_2_per_frame22=dir = -ang + (sample-0.4)*bending;
shape_2_per_frame23=
shape_2_per_frame24= ang =  asin(1)*1.5 - dir + bending*0.05;
shape_2_per_frame25=
shape_2_per_frame26=x = x + ((sample-0.3)*0.06*cos(dir)*size + sin(dir)*size*bending*0.01);
shape_2_per_frame27=y = y + ((sample-0.3)*0.06*sin(dir)*size - cos(dir)*size*bending*0.01);
shape_2_per_frame28=
shape_2_per_frame29=x = 0.5 + (x-0.5)*q1;
shape_2_per_frame30=
shape_2_per_frame31=rad = size*3;
shape_2_per_frame32=
shape_2_per_frame33=i3 = i3 + 1;
shape_2_per_frame34=i4 = if( equal(i3%ppo,0), i4 +1, i4);
shapecode_3_enabled=0
shapecode_3_sides=3
shapecode_3_additive=1
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=392
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.16283
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.73458
shapecode_3_r=0.000
shapecode_3_g=1.000
shapecode_3_b=1.000
shapecode_3_a=0.500
shapecode_3_r2=0.000
shapecode_3_g2=0.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.000
shape_3_init1=i3 = 0;
shape_3_init2=i4 = 0;
shape_3_per_frame1=i3 = if(equal(instance,0),0,i3);
shape_3_per_frame2=i4 = if(equal(instance,0),0,i4);
shape_3_per_frame3=ppo = 8;
shape_3_per_frame4=index = i4*q32;
shape_3_per_frame5=sample = i3 % ppo;
shape_3_per_frame6=
shape_3_per_frame7=size = gmegabuf(index+4)*40;
shape_3_per_frame8=
shape_3_per_frame9=x = gmegabuf(index);
shape_3_per_frame10=y = gmegabuf(index+1);
shape_3_per_frame11=
shape_3_per_frame12=ang = gmegabuf(index+9);
shape_3_per_frame13=rad = size*0.05;
shape_3_per_frame14=
shape_3_per_frame15=r = gmegabuf(index+5);
shape_3_per_frame16=g = gmegabuf(index+6);
shape_3_per_frame17=b = gmegabuf(index+7);
shape_3_per_frame18=
shape_3_per_frame19=
shape_3_per_frame20=sample = sample/ppo;
shape_3_per_frame21=bending = gmegabuf(index + 12)*5 + gmegabuf(index + 10)*5;
shape_3_per_frame22=dir = -ang + (sample-0.4)*bending;
shape_3_per_frame23=
shape_3_per_frame24= ang =  asin(1)*1.5 - dir + bending*0.05;
shape_3_per_frame25=
shape_3_per_frame26=x = x + ((sample-0.3)*0.06*cos(dir)*size + sin(dir)*size*bending*0.01);
shape_3_per_frame27=y = y + ((sample-0.3)*0.06*sin(dir)*size - cos(dir)*size*bending*0.01);
shape_3_per_frame28=
shape_3_per_frame29=x = 0.5 + (x-0.5)/q2;
shape_3_per_frame30=
shape_3_per_frame31=rad = rad*1.5 - sample*0.05*size;
shape_3_per_frame32=
shape_3_per_frame33=i3 = i3 + 1;
shape_3_per_frame34=i4 = if( equal(i3%ppo,0), i4 +1, i4);
per_frame_init_1=
per_frame_init_2=//******** INITIALIZATION *********
per_frame_init_3=//---------- some global vars, do not change -------------
per_frame_init_4=avg = 0.01;
per_frame_init_5=q7 = .4; //MyZoom
per_frame_init_6=q8 =  rand(2.0)-1.0; //fractal modifier
per_frame_init_7=q16 = 1; //Tele ; rather fish eye
per_frame_init_8=q18 = rand(0.8)+.1; //brightness balance back/front
per_frame_init_9=q31 =128;
per_frame_init_10=start = 1; travel = 0; RotZ = 0; look = 0; slow = 0; t0 = time+3; lampx = .5; lampy = .5;
per_frame_init_11=cran0 = rand(1);
per_frame_init_12=n = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); 
per_frame_init_13=n = 0; loop (10000,  megabuf(n)=0; n=n+1; ); 
per_frame_init_14=trelx = 0;  trely = 0; trelz = 0;
per_frame_init_15=reg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;
per_frame_init_16=
per_frame_init_17=//Find random starting point
per_frame_init_18=  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;
per_frame_init_19=  PosX = rand(5)-2;   PosY = rand(5)-2;   PosZ = rand(5)-2; 
per_frame_init_20=
per_frame_init_21=  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); 
per_frame_init_22=  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);
per_frame_init_23=
per_frame_init_24=  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;
per_frame_init_25=  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;
per_frame_init_26=  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;
per_frame_init_27=
per_frame_init_28=rota = 0;
per_frame_init_29=count = 0;
per_frame_init_30=
per_frame_init_31=// clear buffer
per_frame_init_32=i = 0; loop(1024*1024, gmegabuf(i) = 0; i = i+1);
per_frame_init_33=
per_frame_init_34=count = 50;
per_frame_init_35=attributes = 32;
per_frame_init_36=nListStart = 24; // starting index of neighbor list
per_frame_init_37=
per_frame_init_38=minradius = 0.01;
per_frame_init_39=maxradius = 0.05;
per_frame_init_40=v = 0.0;
per_frame_init_41=
per_frame_init_42=// below: Flexis social matrix initialization block
per_frame_init_43=// the megabuf array is used as a list 'count' of objects with each having some 'attributes'
per_frame_init_44=
per_frame_init_45=// randomize initial coordinates
per_frame_init_46=index = 0;
per_frame_init_47=loop(100, 
per_frame_init_48=     gmegabuf(index*attributes) = rand(1000)/1000;
per_frame_init_49=     gmegabuf(index*attributes+1) = rand(1000)/1000;
per_frame_init_50=     gmegabuf(index*attributes+2) = v*(rand(1000)/1000-0.5);
per_frame_init_51=     gmegabuf(index*attributes+3) = v*(rand(1000)/1000-0.5);
per_frame_init_52=     gmegabuf(index*attributes+4) = minradius + (maxradius-minradius)*(index+1)/count;
per_frame_init_53=     gmegabuf(index*attributes+5) = 0;
per_frame_init_54=     gmegabuf(index*attributes+6) = 1;
per_frame_init_55=     gmegabuf(index*attributes+7) = 0;
per_frame_init_56=     gmegabuf(index*attributes+8) = pow(gmegabuf(index*attributes+4),3) ;
per_frame_init_57=     gmegabuf(index*attributes+9) = 4*asin(1)*rand(1000)/1000;
per_frame_init_58=     gmegabuf(index*attributes+10) = 0;
per_frame_init_59=     gmegabuf(index*attributes+13) = index/(count-1);
per_frame_init_60=     gmegabuf(index*attributes+14) = 0;
per_frame_init_61=     index = index+1;
per_frame_init_62=    );
per_frame_init_63=
per_frame_init_64=q30 = nListStart;
per_frame_init_65=q31 = count;
per_frame_init_66=q32 = attributes;
per_frame_init_67=
per_frame_init_68=q29 = (count-1)*attributes; // last index
per_frame_init_69=q28 = asin(1);
per_frame_init_70=// 0, x (position of the particle)
per_frame_init_71=// 1, y
per_frame_init_72=// 2, vx (velocity of the particle)
per_frame_init_73=// 3, vy
per_frame_init_74=// 4, radius
per_frame_init_75=// 5, red
per_frame_init_76=// 6, green
per_frame_init_77=// 7, blue
per_frame_init_78=// 8, mass
per_frame_init_79=// 9, angle
per_frame_init_80=// 10, rotation
per_frame_init_81=// 11, bend force
per_frame_init_82=// 12, bending
per_frame_init_83=// 13, sample
per_frame_init_84=// 14, spectrum
per_frame_1=wave_a = 0;
per_frame_2=warp = 0;
per_frame_3=zoom = 1;
per_frame_4=fps_ = .0 * fps_ + 1*if(fps<=25,fps,25+.5*(fps-25)); 
per_frame_5=fps_= fps;
per_frame_6=
per_frame_7=dec_m = pow (0.7, 30/fps);
per_frame_8=dec_s = pow (0.9, 30/fps);
per_frame_9=beat = max (max (bass, mid), treb); 
per_frame_10=avg = avg*dec_s + beat*(1-dec_s);
per_frame_11=is_beat = above(beat, 2*avg+2*peak) * above (time, t0+-.3);
per_frame_12=t0 = is_beat*time + (1-is_beat)*t0;
per_frame_13=peak = is_beat * beat + (1-is_beat)*peak*dec_m;
per_frame_14=index = (index + is_beat) %4;
per_frame_15=index2 = (index2 + is_beat*bnot(index)) %8;
per_frame_16=wave_a = (index2<5);
per_frame_17=rota = rota*dec_m + (1-dec_m)*index2*3.14;
per_frame_18=q9 = 0;
per_frame_19=
per_frame_20=vol = bass+mid+treb;
per_frame_21=//vol = is_beat;
per_frame_22=vol *= vol*vol;
per_frame_23=dec_m = .3;
per_frame_24=vol_ = dec_m * vol_ + (1-dec_m)*vol;
per_frame_25=
per_frame_26=ds = (above(vol,vol_*1.35))/8*pow(vol,.25);
per_frame_27=//ds = is_beat/8*beat;
per_frame_28=
per_frame_29=//Position 
per_frame_30=DirX= reg26; DirY= reg27; DirZ = reg28;
per_frame_31=PosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ; 
per_frame_32=q4 = PosX; q5 = PosY; q6 = PosZ;
per_frame_33=
per_frame_34=angchg = (.3-dist_)*(dist_ < .3);
per_frame_35=travel = if (angchg > 0,0,travel+ds);
per_frame_36=v1 = v1 * dec_s + (1-dec_s)* RotZ * ds/4;
per_frame_37=v2 = v2 *dec_s + (1-dec_s)*angchg *xslope/fps_/3;
per_frame_38=v3 = v3 *dec_s + (1-dec_s)*(angchg *yslope/fps_/3);
per_frame_39=v1 = 0; v2 = 0; v3 = 0; v1 = 0;
per_frame_40=//push old RotMat
per_frame_41=reg30 =reg20; reg31 =reg21; reg32 =reg22; 
per_frame_42=reg33 =reg23; reg34 =reg24; reg35 =reg25; 
per_frame_43=reg36 =reg26; reg37 =reg27; reg38 =reg28; 
per_frame_44=
per_frame_45=n = 4; avg = 0;
per_frame_46=loop (1,
per_frame_47=  n = n+1;
per_frame_48=  //new Rot. Mat for infinitesimal angles
per_frame_49=  ran1 = rand(100)/100;
per_frame_50=  ran2 = rand(100)/200-.25;
per_frame_51=  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;
per_frame_52=  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); 
per_frame_53=  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);
per_frame_54=  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;
per_frame_55=  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;
per_frame_56=  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;
per_frame_57=
per_frame_58=  //pop old RotMat
per_frame_59=  reg20 =reg30; reg21 =reg31; reg22 =reg32; 
per_frame_60=  reg23 =reg33; reg24 =reg34; reg25 =reg35; 
per_frame_61=  reg26 =reg36; reg27 =reg37; reg28 =reg38; 
per_frame_62=
per_frame_63=  //Multiply new RotMat by old one
per_frame_64=  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;
per_frame_65=  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;
per_frame_66=  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;
per_frame_67=  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;
per_frame_68=  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;
per_frame_69=  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;
per_frame_70=  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;
per_frame_71=  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;
per_frame_72=  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;
per_frame_73=
per_frame_74=  reg20 =q20; reg21 =q21; reg22 =q22;
per_frame_75=  reg23 =q23; reg24 =q24; reg25 =q25;
per_frame_76=  reg26 =q26; reg27 =q27; reg28 =q28;
per_frame_77=
per_frame_78=  //***********BOT*************
per_frame_79=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_80=  dist = 0.002;
per_frame_81=  while (exec2(
per_frame_82=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_83=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_84=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_85=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_86=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_87=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_88=    loop (7+1,
per_frame_89=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_90=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_91=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_92=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_93=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_94=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_95=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_96=    );
per_frame_97=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_98=    dist *= 1.5;
per_frame_99=  ,(dist < 0.6)*(len > 30)));
per_frame_100=  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points
per_frame_101=  avg = avg+abs(megabuf(n)/5);
per_frame_102=); //end loop 5
per_frame_103=
per_frame_104=n = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));
per_frame_105=
per_frame_106=dist_ = dist_*dec_s + (1-dec_s)*dist;
per_frame_107=
per_frame_108=q10 = ds*q7; //compensation of lin. movement in GetDist and zoom uv
per_frame_109=q14 = 1*abs(ds) + 2*(abs(v1) + abs(v2) + abs(v3)) + 1.0/255 + start*.05; 
per_frame_110=start = start * .9;
per_frame_111=vz1 = vz1 + v1;
per_frame_112=q11 = vz1; q12 = v2; q13 = v3;
per_frame_113=//forward comp. of Rotation
per_frame_114= warp = 0.0; zoom = 1; dx = -v2/q16; dy = v3/q16; rot =v1;
per_frame_115=q1 = 1/aspecty;
per_frame_116=dt = 1.5/fps;
per_frame_117=
per_frame_118=warp = 0;
per_frame_119=zoom = 1;
per_frame_120=wave_a = 0;
per_frame_121=
per_frame_122=gravity = 0.001*dt;
per_frame_123=dampening = 0.;
per_frame_124=friction = 512*dt;
per_frame_125=shock = 0.01;
per_frame_126=pi2 = asin(1);
per_frame_127=
per_frame_128=nn = 3; // number of nearest neighbors to search, reduce if not needed
per_frame_129=        // provide enough attributes, otherwise the next object's coordinate will be overwritten
per_frame_130=        // collision detection is based on nearest neighbors, so keep it at least at 1.
per_frame_131=
per_frame_132=check = 2; // how many neighbors will be checked for a possible collision. may not be above nn.
per_frame_133=           // raise to avoid odd behavior in clusters of touching objects.
per_frame_134=
per_frame_135=bouncefactor = 0.1;
per_frame_136=rotatefactor = 0; // relation between angular and translative momentum, when object hits a border. this is an empirical value for a convincing impression
per_frame_137=
per_frame_138=// physical distraction factors
per_frame_139=social1 = 0.0; // force factor to the nearest neighbor
per_frame_140=social2 = 0.0; // force factor to the second nearest neighbor
per_frame_141=social3 = 0.0; // force factor to the third nearest neighbor
per_frame_142=
per_frame_143=h = (aspecty-1)*0.5; w = (aspectx-1)*0.5;
per_frame_144=index = 0; index2 = 0;
per_frame_145=loop(50, 
per_frame_146=
per_frame_147=     random = rand(1000)/1000;
per_frame_148=     sample = gmegabuf(index+13);
per_frame_149=
per_frame_150=     // bend force
per_frame_151=     gmegabuf(index + 11) = gmegabuf(index + 11)*0.92 - 4*gmegabuf(index+12)*dt + 2*(random-0.5)*dt*gmegabuf(index+14);
per_frame_152=
per_frame_153=     // bend
per_frame_154=     gmegabuf(index + 12) += 60*gmegabuf(index + 11)*dt;
per_frame_155=     
per_frame_156=     v = sqrt( sqr( gmegabuf(index + 2) ) + sqr( gmegabuf(index + 3) ) );
per_frame_157=
per_frame_158=     // apply friction
per_frame_159=     fric = max(0,1 - sqr(v*friction) - v*2);
per_frame_160=     gmegabuf(index + 2) *= fric;
per_frame_161=     gmegabuf(index + 3) *= fric;
per_frame_162=
per_frame_163=     // apply direction change
per_frame_164=     gmegabuf(index + 10) = gmegabuf(index + 10)*fric +  v*gmegabuf(index +12);
per_frame_165=
per_frame_166=     // apply acceleration force
per_frame_167=     acceleration = random*0.000 + abs(gmegabuf(index+11))*0.003;
per_frame_168=     direction = gmegabuf(index + 9) - pi2;
per_frame_169=     gmegabuf(index + 2) += sin(direction)*acceleration;
per_frame_170=     gmegabuf(index + 3) += cos(direction)*acceleration;
per_frame_171=
per_frame_172=     // adding velocity vectors
per_frame_173=     gmegabuf(index) = gmegabuf(index) + gmegabuf(index+2)*60*dt;
per_frame_174=     gmegabuf(index+1) = gmegabuf(index+1) + gmegabuf(index+3)*60*dt;
per_frame_175=     gmegabuf(index+9) = gmegabuf(index+9) + gmegabuf(index+10)*0.5;
per_frame_176=
per_frame_177=     // applying gravity
per_frame_178=     gmegabuf(index+3) = gmegabuf(index+3) - gravity;
per_frame_179=
per_frame_180=     vr = sin(gmegabuf(index+10))*gmegabuf(index+4); // rotation speed at the surface
per_frame_181=
per_frame_182=     // bounce off ceiling
per_frame_183=     bounce = above( gmegabuf(index+1), 1 - gmegabuf(index+4) + w);
per_frame_184=     gmegabuf(index+2) = if( bounce, gmegabuf(index+2) + (vr+gmegabuf(index+2))*rotatefactor, gmegabuf(index+2));
per_frame_185=     gmegabuf(index+3) = if( bounce, -abs(gmegabuf(index+3))*dampening - shock, gmegabuf(index+3));
per_frame_186=     vr = if( bounce, vr - (gmegabuf(index+2) + vr)*(1-rotatefactor), vr);
per_frame_187=
per_frame_188=     // bounce off floor
per_frame_189=     bounce = below( gmegabuf(index+1), gmegabuf(index+4) - w);
per_frame_190=     gmegabuf(index+2) = if( bounce, gmegabuf(index+2) + (vr-gmegabuf(index+2))*rotatefactor, gmegabuf(index+2));
per_frame_191=     gmegabuf(index+3) = if( bounce, abs(gmegabuf(index+3))*dampening + shock, gmegabuf(index+3));
per_frame_192=     vr = if( bounce, vr + (gmegabuf(index+2) - vr)*(1-rotatefactor), vr);
per_frame_193=
per_frame_194=     // bounce off right border
per_frame_195=     bounce = above( gmegabuf(index), 1 - gmegabuf(index+4) + h);
per_frame_196=     gmegabuf(index+2) = if( bounce, -abs(gmegabuf(index+2))*dampening - shock, gmegabuf(index+2));
per_frame_197=     gmegabuf(index+3) = if( bounce, gmegabuf(index+3) + (vr-gmegabuf(index+3))*rotatefactor, gmegabuf(index+3));
per_frame_198=     vr = if( bounce, vr + (gmegabuf(index+3) - vr)*(1-rotatefactor), vr);
per_frame_199=
per_frame_200=     // bounce off left border
per_frame_201=     bounce = below( gmegabuf(index), gmegabuf(index+4) - h);
per_frame_202=     gmegabuf(index+2) = if( bounce, abs(gmegabuf(index+2))*dampening + shock, gmegabuf(index+2));
per_frame_203=     gmegabuf(index+3) = if( bounce, gmegabuf(index+3) - (vr+gmegabuf(index+3))*rotatefactor, gmegabuf(index+3));
per_frame_204=     vr = if( bounce, vr - (gmegabuf(index+3) + vr)*(1-rotatefactor), vr);
per_frame_205=
per_frame_206=     gmegabuf(index+10) = asin(vr/gmegabuf(index+4));
per_frame_207=
per_frame_208=     i = 0; j = 0; // collecting pairs of index and distance to the current object in a local buffer
per_frame_209=     loop( 50,
per_frame_210=           d = sqrt( sqr(gmegabuf(index)-gmegabuf(i)) + sqr(gmegabuf(index+1)-gmegabuf(i+1)));
per_frame_211=           d = if( equal(d,0), 10, d); // leave out comparison with itself (where d == 0, set d to a high value)
per_frame_212=           d = d - (gmegabuf(index+4)+gmegabuf(i+4))*0.5; // subtract radius (surface to surface distance)
per_frame_213=           megabuf(j)   = i; // store index/distance pairs
per_frame_214=           megabuf(j+1) = d; 
per_frame_215=           j = j+2;
per_frame_216=           i = i+attributes; );
per_frame_217=     i = 0; // sort that buffer, but only as many cycles as needed for the _nn_ nearest neighbors
per_frame_218=     loop( nn,
per_frame_219=           j = i; smallestfind = 100; findindex = -1;
per_frame_220=           loop( count-j,
per_frame_221=                 distance =megabuf(j*2+1);
per_frame_222=                 smaller = above( smallestfind, distance);
per_frame_223=                 smallestfind = if(smaller, distance, smallestfind);
per_frame_224=                 findindex = if( smaller, j*2, findindex);
per_frame_225=                 j = j + 1; );
per_frame_226=           j = megabuf(i*2); d = megabuf(i*2+1);
per_frame_227=           megabuf(i*2)   = megabuf(findindex);
per_frame_228=           megabuf(i*2+1) = megabuf(findindex+1);
per_frame_229=           megabuf(findindex)   = j;
per_frame_230=           megabuf(findindex+1) = d;
per_frame_231=           i = i+1;
per_frame_232=         );
per_frame_233=     i = 0; // storing the indexes of the nearest neighbors in the list
per_frame_234=     loop( nn,
per_frame_235=           gmegabuf(index + nListStart + i) = megabuf(i*2);
per_frame_236=           i = i +1;
per_frame_237=         );
per_frame_238=
per_frame_239=     nearest1 = gmegabuf(index + nListStart+0); // index of the nearest neighbor
per_frame_240=     nearest2 = gmegabuf(index + nListStart+1); // index of the second nearest neighbor
per_frame_241=     nearest3 = gmegabuf(index + nListStart+2); // index of the third nearest neighbor
per_frame_242=
per_frame_243=     awayX1 = gmegabuf(index) - gmegabuf(nearest+1); // vector to nearest neighbor
per_frame_244=     awayY1 = gmegabuf(index+1) - gmegabuf(nearest+1);
per_frame_245=
per_frame_246=     awayX2 = gmegabuf(index) - gmegabuf(nearest2); // vector to nearest neighbor
per_frame_247=     awayY2 = gmegabuf(index+1) - gmegabuf(nearest2+1);
per_frame_248=
per_frame_249=     awayX3 = gmegabuf(index) - gmegabuf(nearest3); // vector to third nearest neighbor
per_frame_250=     awayY3 = gmegabuf(index+1) - gmegabuf(nearest3+1);
per_frame_251=
per_frame_252=     gmegabuf(index+2) = gmegabuf(index+2) - dt*(awayX1*social1 + awayX2*social2 + awayX3*social3);
per_frame_253=     gmegabuf(index+3) = gmegabuf(index+3) - dt*(awayY1*social1 + awayY2*social2 + awayY3*social3);
per_frame_254=     
per_frame_255=
per_frame_256=     i = 0; // collision detection and impulse transmission below
per_frame_257=     loop( check,
per_frame_258=           index2 = megabuf(i);
per_frame_259=           hit = below( sqrt( sqr( gmegabuf(index) - gmegabuf(index2)) +
per_frame_260=                              sqr( gmegabuf(index+1) - gmegabuf(index2+1))),
per_frame_261=                        gmegabuf(index + 4) + gmegabuf(index2 + 4)
per_frame_262=                      )
per_frame_263=                 *
per_frame_264=                 above( sqrt( sqr( gmegabuf(index)   - gmegabuf(index2))+
per_frame_265=                        sqr( gmegabuf(index+1) - gmegabuf(index2+1))),
per_frame_266=                        sqrt( sqr( gmegabuf(index+0) - gmegabuf(index2+0)+ 
per_frame_267=                                   gmegabuf(index+2) - gmegabuf(index2+2))+
per_frame_268=                              sqr( gmegabuf(index+1) - gmegabuf(index2+1)+
per_frame_269=                                   gmegabuf(index+3) - gmegabuf(index2+3)) ) );
per_frame_270=           ref_ang = atan2( gmegabuf(index2)-gmegabuf(index), // calculating the angle of the common tangent
per_frame_271=                            gmegabuf(index2 + 1)-gmegabuf(index + 1)) + pi2;
per_frame_272=           v1 = sqrt(sqr( gmegabuf(index + 2)) + sqr( gmegabuf(index + 3))); // velocity of object1
per_frame_273=           v2 = sqrt(sqr( gmegabuf(index2 + 2)) + sqr( gmegabuf(index2 + 3)));  // velocity of object2
per_frame_274=           w1 = atan2( gmegabuf(index + 2), gmegabuf(index + 3));   // object1 motion angle
per_frame_275=           w2 = atan2( gmegabuf(index2 + 2), gmegabuf(index2 + 3)); // object2 motion angle
per_frame_276=           vr2 = sin(gmegabuf(index2 + 10))*gmegabuf(index2+4); // the other object's surface velocity
per_frame_277=           m1 = gmegabuf(index + 8); m2 = gmegabuf(index2 + 8);
per_frame_278=           vv1 = ((m1-m2)*v1 + 2*m2*v2)/(m1+m2); vv2 = ((m2-m1)*v2 + 2*m1*v1)/(m1+m2);
per_frame_279=           vrr = ((m1-m2)*vr + 2*m2*vr2)/(m1+m2); vrr2 = ((m2-m1)*vr2 + 2*m1*vr)/(m1+m2);
per_frame_280=
per_frame_281=           gmegabuf( index + 2) = if( hit, sin(ref_ang)*v1*cos(w1-ref_ang) + ((vr-vr2)-sin(ref_ang)*v1*cos(w1-ref_ang))*0.1
per_frame_282=                                         + cos(ref_ang)*vv1*sin(w2-ref_ang),
per_frame_283=                                                  gmegabuf( index + 2) );
per_frame_284=
per_frame_285=           gmegabuf( index + 3) = if( hit, cos(ref_ang)*v1*cos(w1-ref_ang) + ((vr-vr2)-cos(ref_ang)*v1*cos(w1-ref_ang))*0.1
per_frame_286=                                         - sin(ref_ang)*vv1*sin(w2-ref_ang),
per_frame_287=                                                 gmegabuf( index + 3) );
per_frame_288=
per_frame_289=           gmegabuf( index2 + 2) = if( hit, sin(ref_ang)*v2*cos(w2-ref_ang) + ((vr2-vr)-sin(ref_ang)*v2*cos(w2-ref_ang))*0.1
per_frame_290=                                          + cos(ref_ang)*vv2*sin(w1-ref_ang),
per_frame_291=                                                  gmegabuf( index2 + 2) );
per_frame_292=
per_frame_293=           gmegabuf( index2 + 3) = if( hit, cos(ref_ang)*v2*cos(w2-ref_ang) + ((vr2-vr)-cos(ref_ang)*v2*cos(w2-ref_ang))*0.1
per_frame_294=                                          - sin(ref_ang)*vv2*sin(w1-ref_ang),
per_frame_295=                                                  gmegabuf( index2 + 3) );
per_frame_296=
per_frame_297=           vr = if( hit, vr + (cos(w1-ref_ang)*(v1-v2)-vr) , vr);
per_frame_298=           gmegabuf( index + 10) = asin( vr / gmegabuf(index+4) );
per_frame_299=
per_frame_300=           vr2 = if( hit, vr2 + (cos(w2-ref_ang)*(v2-v1)-vr2) , vr2);
per_frame_301=           gmegabuf( index2 + 10) = asin( vr2 / gmegabuf(index2+4) );
per_frame_302=
per_frame_303=           i=i+2;
per_frame_304=         );
per_frame_305=     index = index+attributes;
per_frame_306=    );
per_frame_307=
per_frame_308=wave_a = 0;
warp_1=`float dist, struc, len; float2 uv0, uv1; float3 uv2; float4 box;
warp_2=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
warp_3=`
warp_4=`static const float3 CamPos = float3(q4,q5,q6);
warp_5=`static const float  ds = q10, sustain = .96-ds, change = q14;
warp_6=`static const float myzoom = q7, limit = 34, tele=q16;
warp_7=`
warp_8=`float GetDist(float2 uvi) {float2 tmp; tmp = tex2D (sampler_pc_main, uvi).gb; 
warp_9=`  return 1-(tmp.y + 1.0/255*tmp.x);}
warp_10=`
warp_11=`float2 PutDist(float x) {float fg, fb; fg = modf((1-x)*255.0,fb);
warp_12=`  return (float2(fg,fb/255.0));}
warp_13=`
warp_14=`float MinDist (float2 uvi) 
warp_15=`{
warp_16=`   float tmp; float4 nb; float4 nb2; float2 pix;
warp_17=`   pix = texsize.zw*(1.0+length(uvi-0.5)*2);
warp_18=`   tmp = GetDist(uvi);
warp_19=`   nb.x = GetDist(uvi+pix*float2(-1,-1));  
warp_20=`   nb.y = GetDist(uvi+pix*float2(1,-1));
warp_21=`   nb.z = GetDist(uvi+pix*float2(1,1));   
warp_22=`   nb.w = GetDist(uvi+pix*float2(-1,1));
warp_23=`   nb2.x = GetDist(uvi+pix*float2(0,-1));  
warp_24=`   nb2.y = GetDist(uvi+pix*float2(1,0));
warp_25=`   nb2.z = GetDist(uvi+pix*float2(0,1));   
warp_26=`   nb2.w = GetDist(uvi+pix*float2(-1,0));
warp_27=`   //Eo.S. more efficient usage of min to get min value of all 8 GetDist() calls, removes 11ALU
warp_28=`   nb = min( nb, nb2 );
warp_29=`   nb.xy = min( nb.xy, nb.zw );
warp_30=`   tmp = min( nb.x, nb.y );
warp_31=`   return tmp;
warp_32=`}
warp_33=`
warp_34=`float3 Get1 (float2 uvi) {float3 tmp; float2 pix;
warp_35=`   return GetPixel(uvi);} //#
warp_36=`
warp_37=`float4 mbox (float3 uvi) {float3 zz, zz0; float tmp, li;
warp_38=`  zz = uvi; zz0 = zz+q8; li=0;
warp_39=`  for (int n = 0; n <= 7; n++) {
warp_40=`    zz = 2.0*clamp(zz,-1,1)-zz;  tmp = dot(zz,zz);
warp_41=`    zz *= clamp(max(.25/tmp, .25), 0.0, 1.0)*4;
warp_42=`    zz = 2.8*zz + zz0;}
warp_43=`  return float4(zz,li);}
warp_44=`
warp_45=`shader_body {
warp_46=`uv1 = (uv-.5)*aspect.xy*tele;
warp_47=`uv = (uv-.5)*(1-ds/(GetDist(uv))) + .5;
warp_48=`
warp_49=`float3 noise = frac(8*tex2D (sampler_noise_lq,uv+rand_frame.yz)); 
warp_50=`
warp_51=`dist = noise.r;
warp_52=`   if (noise.g > .2) 
warp_53=`   {
warp_54=`       float3 noiseBiased = noise - float3( 0.5, 0.5, 0.5 );
warp_55=`//Eo.S. combine the subtraction on noise to a single float3 to ensure compiler does the subtraction in a single ALU
warp_56=`       dist = MinDist( uv) +  .01 * (noiseBiased.x) * abs(noiseBiased.y);
warp_57=`   }
warp_58=`dist = min(dist,GetDist(uv))- ds*1;
warp_59=`
warp_60=`uv2 = mul(float3(uv1*dist,dist-.0)/myzoom,RotMat)+CamPos;
warp_61=`uv2 = (frac(uv2/8.0+.5)-.5)*8.0;
warp_62=`box = mbox (uv2);
warp_63=`len = (length(box.xyz))*2;
warp_64=`struc = length(box.xy)/limit*2;
warp_65=`
warp_66=`if ((dist <= GetDist(uv)) && (len < limit) && (dist > 0.04/(.0+rad))){
warp_67=` ret.r = (1-sustain)*struc+sustain*(Get1(uv).r); ret.gb=  PutDist(dist); } 
warp_68=` else {ret = Get1(uv)*sustain -.002;} 
warp_69=`
warp_70=`}
comp_1=`#define sat saturate
comp_2=`static const float2 pix = texsize.zw;
comp_3=`float glow, tmp, lamp, dist, bdist, b2dist, dist_c;
comp_4=`float2 dz, uv1, uv3;
comp_5=`static const float3 CamPos = float3(q4,q5,q6);
comp_6=`static const float myzoom = q7;
comp_7=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
comp_8=`static const float3 col_struc =  float3(1,.7,.3) + .2*(rand_preset.xyz-.5);
comp_9=`static float2 center = float2 (q1,q2);
comp_10=`
comp_11=`float3 GetBlurX (float2 uvi, float x) {return lerp (GetPixel(uvi), GetBlur1(uvi), x);}
comp_12=`float GetDist(float2 uvi)   {return 1-GetPixel(uvi).b;}
comp_13=`float GetDistB(float2 uvi)  {return 1-GetBlur1(uvi).b;}
comp_14=`float GetDistB2(float2 uvi) {return 1-GetBlur2(uvi).b;}
comp_15=`
comp_16=`float MinDistB (float2 uvi) {float tmp; float4 nb; //##nicht ideal
comp_17=`  tmp = GetDist(uvi);
comp_18=`  tmp = min(tmp,GetDistB2(uvi)*1) ;
comp_19=`  return tmp;}
comp_20=`
comp_21=`shader_body {
comp_22=`//uv = (uv-.5)*.9 + .5;
comp_23=`uv1 = (uv-center)*aspect.xy;
comp_24=`
comp_25=`dist = MinDistB(uv);
comp_26=`bdist = lerp(dist,GetDistB(uv),.2);
comp_27=`dist_c = clamp(GetDistB2 (center),.1,.4); //center distance
comp_28=`
comp_29=`float3 uv2 = mul(float3((uv-.5)*MinDistB(uv),MinDistB(uv))/myzoom,RotMat)+CamPos;
comp_30=`glow = pow (sat(tex2D (sampler_noise_hq,.02*uv2).r-.6)*2,2);
comp_31=`//uv += .003*glow*(tex2D (sampler_noise_mq,uv*2+float2(0,time/4).xy-.5));
comp_32=`
comp_33=`float focus = sat(abs(GetDistB2(uv)-dist_c)*1+.2);
comp_34=`float struc = GetBlurX(uv,focus).r;
comp_35=`
comp_36=`glow = sat(1-exp(-(GetBlur1(uv).r))-.2);
comp_37=`q18 = 1;
comp_38=`ret = pow(struc,1) * (.2+(1-focus) *lerp(dist,1-dist,q18)) * (1+.5*sin(uv2));
comp_39=`ret = lerp(ret, float3(0,1,glow*3), glow);
comp_40=`
comp_41=`//distant light
comp_42=`ret += pow(1-GetBlurX(uv,.8).b,3)*(.5+.5*slow_roam_cos) *q19;
comp_43=`
comp_44=`//Lamp
comp_45=`uv3 = uv1; 
comp_46=`lamp = saturate(1-4*length(uv3))*(struc)*saturate(1-2*bdist)*1.8;
comp_47=`//ret += (1-lum(ret))*lamp;
comp_48=`ret = 1-exp((-2)*ret);
comp_49=`//ret = GetPixel(uv).r;
comp_50=`}
comp_51=`
comp_52=`//-------------------------------------------
comp_53=`//Written by martin
comp_54=`
