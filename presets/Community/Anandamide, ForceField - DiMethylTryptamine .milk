MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=0.000
fGammaAdj=1.280
fDecay=0.960
fVideoEchoZoom=0.997
fVideoEchoAlpha=0.000
nVideoEchoOrientation=1
nWaveMode=2
bAdditiveWaves=0
bWaveDots=1
bWaveThick=0
bModWaveAlphaByVolume=0
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.012
fWaveSmoothing=0.900
fWaveParam=0.000
fModWaveAlphaStart=0.750
fModWaveAlphaEnd=0.950
fWarpAnimSpeed=0.037
fWarpScale=0.015
fZoomExponent=1.00000
fShader=0.000
zoom=1.00000
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=1.00000
sy=1.00000
wave_r=0.500
wave_g=0.400
wave_b=0.300
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.110
ob_g=0.000
ob_b=1.000
ob_a=0.000
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=19.640
nMotionVectorsY=11.600
mv_dx=0.020
mv_dy=-0.020
mv_l=4.400
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
wavecode_0_enabled=0
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=0
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=0.280
wavecode_0_g=0.000
wavecode_0_b=0.000
wavecode_0_a=1.000
wave_0_per_point1=sample = 1- sample;
wave_0_per_point2=n=sample*6.283;
wave_0_per_point3=phs=-sample * 0.2;
wave_0_per_point4=tm=q1 + phs*4;
wave_0_per_point5=
wave_0_per_point6=flip=flip+1;
wave_0_per_point7=flip=flip*below(flip,2);
wave_0_per_point8=
wave_0_per_point9=xp=0;
wave_0_per_point10=yp=(flip*0.1-0.05)*(sample);
wave_0_per_point11=zp=0;
wave_0_per_point12=
wave_0_per_point13=//spin;
wave_0_per_point14=ang=tm*20 + sin(tm*76 + time*4)*0.4;
wave_0_per_point15=sa=sin(ang);ca=cos(ang);
wave_0_per_point16=xr=xp*sa + yp*ca;
wave_0_per_point17=yr=xp*ca - yp*sa;
wave_0_per_point18=zr=zp;
wave_0_per_point19=
wave_0_per_point20=xp=xr;
wave_0_per_point21=yp=yr + 0.05 + (sin(tm)*0.5 + 0.5)*0.2 + 0.05;
wave_0_per_point22=zp=zr;
wave_0_per_point23=
wave_0_per_point24=//wrist movement;
wave_0_per_point25=ang=sin(tm*2)*0.5 +0.5;
wave_0_per_point26=
wave_0_per_point27=xq=xp;
wave_0_per_point28=sa=sin(ang);ca=cos(ang);
wave_0_per_point29=yq=yp*sa + zp*ca;
wave_0_per_point30=zq=yp*ca - zp*sa;
wave_0_per_point31=
wave_0_per_point32=
wave_0_per_point33=ang=tm*8;
wave_0_per_point34=sa=sin(ang);ca=cos(ang);
wave_0_per_point35=xp=xq*sa + yq*ca;
wave_0_per_point36=yp=xq*ca - yq*sa;
wave_0_per_point37=zp=zq;
wave_0_per_point38=
wave_0_per_point39=//forearm movement;
wave_0_per_point40=zp=zp-0.3;
wave_0_per_point41=ang=3.14 + sin(tm*2 - 0.5)*1.5;
wave_0_per_point42=xq=xp;
wave_0_per_point43=sa=sin(ang);ca=cos(ang);
wave_0_per_point44=yq=yp*sa + zp*ca;
wave_0_per_point45=zq=yp*ca - zp*sa;
wave_0_per_point46=
wave_0_per_point47=//upper arm twist
wave_0_per_point48=ang=-1.0 + cos(tm*3 + 0.5);
wave_0_per_point49=xp=xq*sa + yq*ca;
wave_0_per_point50=yp=xq*ca - yq*sa;
wave_0_per_point51=zp=zq;
wave_0_per_point52=
wave_0_per_point53=//upper arm outward;
wave_0_per_point54=zp=zp-0.35;
wave_0_per_point55=ang=cos(tm*2)*0.75 - 1.05;
wave_0_per_point56=sa=sin(ang);ca=cos(ang);
wave_0_per_point57=xq=xp*sa + zp*ca;
wave_0_per_point58=yq=yp;
wave_0_per_point59=zq=xp*ca - zp*sa;
wave_0_per_point60=
wave_0_per_point61=//upper arm up down;
wave_0_per_point62=ang=cos(tm)*0.5 - 0.5;
wave_0_per_point63=xp=xq;
wave_0_per_point64=sa=sin(ang);ca=cos(ang);
wave_0_per_point65=yp=yq*ca - zq*sa;
wave_0_per_point66=zp=yq*sa + zq*ca;
wave_0_per_point67=
wave_0_per_point68=//xp=xq;yp=yq;zp=zq;
wave_0_per_point69=
wave_0_per_point70=
wave_0_per_point71=//project into screenspace and draw on screen
wave_0_per_point72=zp=zp+3;
wave_0_per_point73=xs=xp/zp;
wave_0_per_point74=ys=yp/zp;
wave_0_per_point75=
wave_0_per_point76=x=xs+0.2;
wave_0_per_point77=y=ys*1.3+0.55;
wave_0_per_point78=
wave_0_per_point79=
wave_0_per_point80=//a=(1-sample);
wave_0_per_point81=
wave_0_per_point82=
wave_0_per_point83=r = 1 - sample;
wave_0_per_point84=g = pow(1-sample,2.0);
wave_0_per_point85=b = pow(1-sample,1.0);
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=0.240
wavecode_1_g=0.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wave_1_per_point1=n=sample*6.283;
wave_1_per_point2=phs=-sample * 0.4 ;
wave_1_per_point3=tm=q1 + phs*2 - 0.01;
wave_1_per_point4=
wave_1_per_point5=flip=flip+1;
wave_1_per_point6=flip=flip*below(flip,2);
wave_1_per_point7=
wave_1_per_point8=xp=0;
wave_1_per_point9=yp=(flip*0.2-0.1)*(sample);
wave_1_per_point10=zp=0;
wave_1_per_point11=
wave_1_per_point12=//spin;
wave_1_per_point13=ang=-tm*29 + sin(tm*76 + time*4)*0.4;;
wave_1_per_point14=sa=sin(ang);ca=cos(ang);
wave_1_per_point15=xr=xp*sa + yp*ca;
wave_1_per_point16=yr=xp*ca - yp*sa;
wave_1_per_point17=zr=zp;
wave_1_per_point18=
wave_1_per_point19=xp=xr;
wave_1_per_point20=yp=yr + 0.05 + (sin(tm)*0.5 + 0.5)*0.2 + 0.05;
wave_1_per_point21=zp=zr;
wave_1_per_point22=
wave_1_per_point23=//wrist movement;
wave_1_per_point24=ang=sin(tm*2)*0.5 +0.5;
wave_1_per_point25=
wave_1_per_point26=xq=xp;
wave_1_per_point27=sa=sin(ang);ca=cos(ang);
wave_1_per_point28=yq=yp*sa + zp*ca;
wave_1_per_point29=zq=yp*ca - zp*sa;
wave_1_per_point30=
wave_1_per_point31=
wave_1_per_point32=ang=tm*8;
wave_1_per_point33=sa=sin(ang);ca=cos(ang);
wave_1_per_point34=xp=xq*sa + yq*ca;
wave_1_per_point35=yp=xq*ca - yq*sa;
wave_1_per_point36=zp=zq;
wave_1_per_point37=
wave_1_per_point38=//forearm movement;
wave_1_per_point39=zp=zp-0.3;
wave_1_per_point40=ang=3.14 + sin(tm*2 - 0.5)*1.5;
wave_1_per_point41=xq=xp;
wave_1_per_point42=sa=sin(ang);ca=cos(ang);
wave_1_per_point43=yq=yp*sa + zp*ca;
wave_1_per_point44=zq=yp*ca - zp*sa;
wave_1_per_point45=
wave_1_per_point46=//upper arm twist
wave_1_per_point47=ang=-1.0 + cos(tm*3 + 0.5);
wave_1_per_point48=xp=xq*sa + yq*ca;
wave_1_per_point49=yp=xq*ca - yq*sa;
wave_1_per_point50=zp=zq;
wave_1_per_point51=
wave_1_per_point52=//upper arm outward;
wave_1_per_point53=zp=zp-0.35;
wave_1_per_point54=ang=cos(tm*2)*0.75 - 1.05;
wave_1_per_point55=sa=sin(ang);ca=cos(ang);
wave_1_per_point56=xq=xp*sa + zp*ca;
wave_1_per_point57=yq=yp;
wave_1_per_point58=zq=xp*ca - zp*sa;
wave_1_per_point59=
wave_1_per_point60=//upper arm up down;
wave_1_per_point61=ang=cos(tm)*0.5 - 0.5;
wave_1_per_point62=xp=xq;
wave_1_per_point63=sa=sin(ang);ca=cos(ang);
wave_1_per_point64=yp=yq*ca - zq*sa;
wave_1_per_point65=zp=yq*sa + zq*ca;
wave_1_per_point66=
wave_1_per_point67=//xp=xq;yp=yq;zp=zq;
wave_1_per_point68=
wave_1_per_point69=
wave_1_per_point70=//project into screenspace and draw on screen
wave_1_per_point71=zp=zp+3;
wave_1_per_point72=xs=xp/zp;
wave_1_per_point73=ys=yp/zp;
wave_1_per_point74=
wave_1_per_point75=x=xs+0.3;
wave_1_per_point76=y=ys*1.3+0.55;
wave_1_per_point77=
wave_1_per_point78=
wave_1_per_point79=//a=(1-sample);
wave_1_per_point80=
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=0.720
wavecode_2_b=0.100
wavecode_2_a=0.050
wave_2_per_point1=n=sample*6.283;
wave_2_per_point2=phs=-sample * 0.4 ;
wave_2_per_point3=tm=q1 + phs*2 - 0.02;
wave_2_per_point4=
wave_2_per_point5=flip=flip+1;
wave_2_per_point6=flip=flip*below(flip,2);
wave_2_per_point7=
wave_2_per_point8=xp=0;
wave_2_per_point9=yp=(flip*0.4-0.2)*(sample);
wave_2_per_point10=zp=0;
wave_2_per_point11=
wave_2_per_point12=//spin;
wave_2_per_point13=ang=tm*23 + sin(tm*76 + time*4)*0.3;;
wave_2_per_point14=sa=sin(ang);ca=cos(ang);
wave_2_per_point15=xr=xp*sa + yp*ca;
wave_2_per_point16=yr=xp*ca - yp*sa;
wave_2_per_point17=zr=zp;
wave_2_per_point18=
wave_2_per_point19=xp=xr;
wave_2_per_point20=yp=yr + 0.05 + (sin(tm)*0.5 + 0.5)*0.2 + 0.05;
wave_2_per_point21=zp=zr;
wave_2_per_point22=
wave_2_per_point23=//wrist movement;
wave_2_per_point24=ang=sin(tm*2)*0.5 +0.5;
wave_2_per_point25=
wave_2_per_point26=xq=xp;
wave_2_per_point27=sa=sin(ang);ca=cos(ang);
wave_2_per_point28=yq=yp*sa + zp*ca;
wave_2_per_point29=zq=yp*ca - zp*sa;
wave_2_per_point30=
wave_2_per_point31=
wave_2_per_point32=ang=tm*8;
wave_2_per_point33=sa=sin(ang);ca=cos(ang);
wave_2_per_point34=xp=xq*sa + yq*ca;
wave_2_per_point35=yp=xq*ca - yq*sa;
wave_2_per_point36=zp=zq;
wave_2_per_point37=
wave_2_per_point38=//forearm movement;
wave_2_per_point39=zp=zp-0.3;
wave_2_per_point40=ang=3.14 + sin(tm*2 - 0.5)*1.5;
wave_2_per_point41=xq=xp;
wave_2_per_point42=sa=sin(ang);ca=cos(ang);
wave_2_per_point43=yq=yp*sa + zp*ca;
wave_2_per_point44=zq=yp*ca - zp*sa;
wave_2_per_point45=
wave_2_per_point46=//upper arm twist
wave_2_per_point47=ang=-1.0 + cos(tm*3 + 0.5);
wave_2_per_point48=xp=xq*sa + yq*ca;
wave_2_per_point49=yp=xq*ca - yq*sa;
wave_2_per_point50=zp=zq;
wave_2_per_point51=
wave_2_per_point52=//upper arm outward;
wave_2_per_point53=zp=zp-0.35;
wave_2_per_point54=ang=cos(tm*2)*0.75 - 1.05;
wave_2_per_point55=sa=sin(ang);ca=cos(ang);
wave_2_per_point56=xq=xp*sa + zp*ca;
wave_2_per_point57=yq=yp;
wave_2_per_point58=zq=xp*ca - zp*sa;
wave_2_per_point59=
wave_2_per_point60=//upper arm up down;
wave_2_per_point61=ang=cos(tm)*0.5 - 0.5;
wave_2_per_point62=xp=xq;
wave_2_per_point63=sa=sin(ang);ca=cos(ang);
wave_2_per_point64=yp=yq*ca - zq*sa;
wave_2_per_point65=zp=yq*sa + zq*ca;
wave_2_per_point66=
wave_2_per_point67=//xp=xq;yp=yq;zp=zq;
wave_2_per_point68=
wave_2_per_point69=
wave_2_per_point70=//project into screenspace and draw on screen
wave_2_per_point71=zp=zp+3;
wave_2_per_point72=xs=xp/zp;
wave_2_per_point73=ys=yp/zp;
wave_2_per_point74=
wave_2_per_point75=x=xs+0.35;
wave_2_per_point76=y=ys*.3+0.55;
wave_2_per_point77=
wave_2_per_point78=
wave_2_per_point79=//a=(1-sample);
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=0.700
wavecode_3_b=0.500
wavecode_3_a=1.000
wave_3_per_point1=n=sample*6.283;
wave_3_per_point2=phs=-sample * 0.4 ;
wave_3_per_point3=tm=q1 + phs*2 - 0.03;
wave_3_per_point4=
wave_3_per_point5=flip=flip+1;
wave_3_per_point6=flip=flip*below(flip,2);
wave_3_per_point7=
wave_3_per_point8=xp=0;
wave_3_per_point9=yp=(flip*0.6-0.3)*(sample);
wave_3_per_point10=zp=0;
wave_3_per_point11=
wave_3_per_point12=//spin;
wave_3_per_point13=ang=-tm*4 + sin(tm*76 + time*4)*0.2;;
wave_3_per_point14=sa=sin(ang);ca=cos(ang);
wave_3_per_point15=xr=xp*sa + yp*ca;
wave_3_per_point16=yr=xp*ca - yp*sa;
wave_3_per_point17=zr=zp;
wave_3_per_point18=
wave_3_per_point19=xp=xr;
wave_3_per_point20=yp=yr + 0.05 + (sin(tm)*0.5 + 0.5)*0.2 + 0.05;
wave_3_per_point21=zp=zr;
wave_3_per_point22=
wave_3_per_point23=//wrist movement;
wave_3_per_point24=ang=sin(tm*2)*0.5 +0.5;
wave_3_per_point25=
wave_3_per_point26=xq=xp;
wave_3_per_point27=sa=sin(ang);ca=cos(ang);
wave_3_per_point28=yq=yp*sa + zp*ca;
wave_3_per_point29=zq=yp*ca - zp*sa;
wave_3_per_point30=
wave_3_per_point31=
wave_3_per_point32=ang=tm*8;
wave_3_per_point33=sa=sin(ang);ca=cos(ang);
wave_3_per_point34=xp=xq*sa + yq*ca;
wave_3_per_point35=yp=xq*ca - yq*sa;
wave_3_per_point36=zp=zq;
wave_3_per_point37=
wave_3_per_point38=//forearm movement;
wave_3_per_point39=zp=zp-0.3;
wave_3_per_point40=ang=3.14 + sin(tm*2 - 0.5)*1.5;
wave_3_per_point41=xq=xp;
wave_3_per_point42=sa=sin(ang);ca=cos(ang);
wave_3_per_point43=yq=yp*sa + zp*ca;
wave_3_per_point44=zq=yp*ca - zp*sa;
wave_3_per_point45=
wave_3_per_point46=//upper arm twist
wave_3_per_point47=ang=-1.0 + cos(tm*3 + 0.5);
wave_3_per_point48=xp=xq*sa + yq*ca;
wave_3_per_point49=yp=xq*ca - yq*sa;
wave_3_per_point50=zp=zq;
wave_3_per_point51=
wave_3_per_point52=//upper arm outward;
wave_3_per_point53=zp=zp-0.35;
wave_3_per_point54=ang=cos(tm*2)*0.75 - 1.05;
wave_3_per_point55=sa=sin(ang);ca=cos(ang);
wave_3_per_point56=xq=xp*sa + zp*ca;
wave_3_per_point57=yq=yp;
wave_3_per_point58=zq=xp*ca - zp*sa;
wave_3_per_point59=
wave_3_per_point60=//upper arm up down;
wave_3_per_point61=ang=cos(tm)*0.5 - 0.5;
wave_3_per_point62=xp=xq;
wave_3_per_point63=sa=sin(ang);ca=cos(ang);
wave_3_per_point64=yp=yq*ca - zq*sa;
wave_3_per_point65=zp=yq*sa + zq*ca;
wave_3_per_point66=
wave_3_per_point67=//xp=xq;yp=yq;zp=zq;
wave_3_per_point68=
wave_3_per_point69=
wave_3_per_point70=//project into screenspace and draw on screen
wave_3_per_point71=zp=zp+2;
wave_3_per_point72=xs=xp/zp;
wave_3_per_point73=ys=yp/zp;
wave_3_per_point74=
wave_3_per_point75=x=xs+0.5;
wave_3_per_point76=y=ys*1.3+0.5;
wave_3_per_point77=
wave_3_per_point78=
wave_3_per_point79=a=(1-sample);
shapecode_0_enabled=0
shapecode_0_sides=6
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=200
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.37561
shapecode_0_ang=0.81681
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=0.30299
shapecode_0_r=0.000
shapecode_0_g=0.000
shapecode_0_b=1.000
shapecode_0_a=1.000
shapecode_0_r2=0.000
shapecode_0_g2=0.000
shapecode_0_b2=1.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shape_0_per_frame1=
shape_0_per_frame2=n = instance / 100.0;
shape_0_per_frame3=
shape_0_per_frame4=x = sin( n * 666.0 )*0.5+0.5;
shape_0_per_frame5=y = sin( n * 402.3 );
shape_0_per_frame6=z = sin( n * 167.0 ) + 1;
shape_0_per_frame7=
shape_0_per_frame8=cycle = (time/1.0) - int(time/1.0);
shape_0_per_frame9=cycle2 = (time/3.0) - int(time/3.0);
shape_0_per_frame10=x = ((x+cycle2) - int(x+cycle2)) * 4.0 - 2.0;
shape_0_per_frame11=z = z - cycle * 2.0;
shape_0_per_frame12=z = if( below(z,0), z + 2.0, z );
shape_0_per_frame13=
shape_0_per_frame14=depth = z/2;
shape_0_per_frame15=
shape_0_per_frame16=z = z * 3 + 1;
shape_0_per_frame17=
shape_0_per_frame18=x = x / z + 0.5;
shape_0_per_frame19=y = y / z * gmegabuf(0) + 0.5;
shape_0_per_frame20=
shape_0_per_frame21=rad = 0.3 / z;
shape_0_per_frame22=
shape_0_per_frame23=a = a * min( z - 1, 1 );
shape_0_per_frame24=a2 = a2 * min( z - 1, 1 );
shape_0_per_frame25=
shape_0_per_frame26=r = 0;//depth;
shape_0_per_frame27=g = 0;//depth;
shape_0_per_frame28=b = depth;
shape_0_per_frame29=r2 = 0;//depth;
shape_0_per_frame30=g2 = 0;//depth;
shape_0_per_frame31=b2 = depth;
shape_0_per_frame32=b = 1; b2 = 1;
shape_0_per_frame33= 
shape_0_per_frame34=rad = rad * (sin( n * 767.0 )*0.4+0.6)*0.5;
shapecode_1_enabled=1
shapecode_1_sides=6
shapecode_1_additive=1
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=200
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.10000
shapecode_1_ang=1.82212
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=1.000
shapecode_1_g=0.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=1.000
shapecode_1_b2=0.000
shapecode_1_a2=0.000
shapecode_1_border_r=0.400
shapecode_1_border_g=0.000
shapecode_1_border_b=0.000
shapecode_1_border_a=0.140
shape_1_per_frame1=/*2010 Anandamide Logistics 
shape_1_per_frame2=Anandamide is Phat and Eo.S.
shape_1_per_frame3=Concept by Phat
shape_1_per_frame4=Graffiti font created in Context Free by ForceField
shape_1_per_frame5=Spraypaint can concept by Phat
shape_1_per_frame6=Spraypaint can 3d modeling created in 3d Studio Max by Eo.S.
shape_1_per_frame7=Graffiti created by Phat with character and graffiti illustrations from Phat Eo.S. and ForceField
shape_1_per_frame8=Graffiti created in Structure Synth by Phat
shape_1_per_frame9=Milkdrop code created by Eo.S.
shape_1_per_frame10=
shape_1_per_frame11=Special thanks to Phong who masked out the electromagnetic spectrum used in the graffiti 
shape_1_per_frame12=If your going to remix this please do it right.*/
shape_1_per_frame13=
shape_1_per_frame14=r = 1; g = 0; b = 0;
shape_1_per_frame15=r2 =1; g2= 0; b2= 0;
shape_1_per_frame16=a = 0; a2= 0.05*treb;
shape_1_per_frame17=rad=0.100+(mid*0.01);
shape_1_per_frame18=
shape_1_per_frame19=n = instance;
shape_1_per_frame20=
shape_1_per_frame21=xCount = 10;
shape_1_per_frame22=
shape_1_per_frame23=instanceCount = 200;
shape_1_per_frame24=musicTime = q24 * 5.0 + time * 2.0;
shape_1_per_frame25=
shape_1_per_frame26=blink = ((musicTime+n)/instanceCount * 6) - int((musicTime+n)/instanceCount * 6);
shape_1_per_frame27=blink = max( (1.0-blink) * 12.0 - 11.0, 0.0 );
shape_1_per_frame28=blink = blink * blink;
shape_1_per_frame29=
shape_1_per_frame30=phase = sin( time * 30.0 + n / instanceCount * 2.0 ) * 0.5 + 0.5;
shape_1_per_frame31=
shape_1_per_frame32=
shape_1_per_frame33=a = blink*0.3;
shape_1_per_frame34=a2 = a2 + blink*0.3 + blink*blink;
shape_1_per_frame35=r = 1.0 - blink*0.5;
shape_1_per_frame36=r2 = 1.0-blink*0.5;
shape_1_per_frame37=g = 0;
shape_1_per_frame38=g2 = 0;
shape_1_per_frame39=
shape_1_per_frame40=rad = rad * (blink*0.5+1.0);
shape_1_per_frame41=
shape_1_per_frame42=//rad = rad * phase;
shape_1_per_frame43=
shape_1_per_frame44=//gmegabuf(0) is aspecty
shape_1_per_frame45=x = int(n / xCount) / xCount - 1.0;
shape_1_per_frame46=x = (x-0.5) / gmegabuf(0) * 0.88 + 0.78;
shape_1_per_frame47=y = (n/xCount)-int(n/xCount);
shape_1_per_frame48=y = if( above( int(n/xCount)%2, 0 ), y + 0.5/xCount, y );
shape_1_per_frame49=
shape_1_per_frame50=rad = rad / (q18*0.5+0.5);
shape_1_per_frame51=x = (x-0.5) / (q18*0.5+0.5) + 0.5;
shape_1_per_frame52=y = (y-0.5) / (q18*0.5+0.5) + 0.5;
shapecode_2_enabled=0
shapecode_2_sides=6
shapecode_2_additive=1
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=200
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.01201
shapecode_2_ang=1.82212
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=1.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=0.000
shapecode_2_g2=1.000
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=0.400
shapecode_2_border_g=0.000
shapecode_2_border_b=0.430
shapecode_2_border_a=0.140
shape_2_per_frame1=
shape_2_per_frame2=
shape_2_per_frame3=r = 0.0; g = 1; b = 0;
shape_2_per_frame4=r2 =0.0; g2= 1; b2= 0;
shape_2_per_frame5=a = 1; a2= 1;
shape_2_per_frame6=rad=0.02+(mid*0.01);
shape_2_per_frame7=
shape_2_per_frame8=n = instance;
shape_2_per_frame9=
shape_2_per_frame10=xCount = 30;
shape_2_per_frame11=
shape_2_per_frame12=instanceCount = 200;
shape_2_per_frame13=musicTime = q24 * 5.0 + time * 2.0;
shape_2_per_frame14=
shape_2_per_frame15=blink = ((musicTime+n)/instanceCount * 6) - int((musicTime+n)/instanceCount * 6);
shape_2_per_frame16=blink = max( (1.0-blink) * 12.0 - 11.0, 0.0 );
shape_2_per_frame17=blink = blink * blink;
shape_2_per_frame18=
shape_2_per_frame19=phase = sin( time * 30.0 + n / instanceCount * 2.0 ) * 0.5 + 0.5;
shape_2_per_frame20=
shape_2_per_frame21=
shape_2_per_frame22=rad = rad * (blink*0.5+1.0);
shape_2_per_frame23=
shape_2_per_frame24=//rad = rad * phase;
shape_2_per_frame25=
shape_2_per_frame26=//gmegabuf(0) is aspecty
shape_2_per_frame27=x = int(n / xCount) / xCount - 1.0;
shape_2_per_frame28=x = (x-0.5) / gmegabuf(0) * 0.88 + 0.78;
shape_2_per_frame29=y = (n/xCount)-int(n/xCount);
shape_2_per_frame30=y = if( above( int(n/xCount)%2, 0 ), y + 0.5/xCount, y );
shapecode_3_enabled=1
shapecode_3_sides=4
shapecode_3_additive=1
shapecode_3_thickOutline=0
shapecode_3_textured=1
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=9.62733
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.69892
shapecode_3_r=1.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=0.500
shapecode_3_r2=1.000
shapecode_3_g2=0.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=0.000
shapecode_3_border_b=0.000
shapecode_3_border_a=0.420
shape_3_per_frame1=/*2010 Anandamide Logistics 
shape_3_per_frame2=Anandamide is Phat and Eo.S.
shape_3_per_frame3=Concept by Phat
shape_3_per_frame4=Graffiti font created in Context Free by ForceField
shape_3_per_frame5=Spraypaint can concept by Phat
shape_3_per_frame6=Spraypaint can 3d modeling created in 3d Studio Max by Eo.S.
shape_3_per_frame7=Graffiti created by Phat with character and graffiti illustrations from Phat Eo.S. and ForceField
shape_3_per_frame8=Graffiti created in Structure Synth by Phat
shape_3_per_frame9=Milkdrop code created by Eo.S.
shape_3_per_frame10=
shape_3_per_frame11=Special thanks to Phong who masked out the electromagnetic spectrum used in the graffiti 
shape_3_per_frame12=If your going to remix this please do it right.*/
shape_3_per_frame13=
shape_3_per_frame14=ang=sin( time * 0.2 ) * 5.0;
shape_3_per_frame15=tex_zoom=.1;//((treb+mid)*0.1);
shape_3_per_frame16=
shape_3_per_frame17=g = 0;
shape_3_per_frame18=g2 = 0;
shape_3_per_frame19=border_g = 0;
per_frame_init_1=/*2010 Anandamide Logistics 
per_frame_init_2=Anandamide is Phat and Eo.S.
per_frame_init_3=Concept by Phat
per_frame_init_4=Graffiti font created in Context Free by ForceField
per_frame_init_5=Spraypaint can concept by Phat
per_frame_init_6=Spraypaint can 3d modeling created in 3d Studio Max by Eo.S.
per_frame_init_7=Graffiti created by Phat with character and graffiti illustrations from Phat Eo.S. and ForceField
per_frame_init_8=Graffiti created in Structure Synth by Phat
per_frame_init_9=Milkdrop code created by Eo.S.
per_frame_init_10=
per_frame_init_11=Special thanks to Phong who masked out the electromagnetic spectrum used in the graffiti 
per_frame_init_12=If your going to remix this please do it right.*/
per_frame_init_13=
per_frame_init_14=mv_x=64;mv_y=48;
per_frame_init_15=nut=0;
per_frame_init_16=stp=0;stq=0;
per_frame_init_17=rtp=0;rtq=0;
per_frame_init_18=wvr=0;
per_frame_init_19=decay=0;
per_frame_init_20=dcsp=0;
per_frame_init_21=
per_frame_init_22=avgVol = 1.0;
per_frame_init_23=avgMidTreb = 1.0;
per_frame_init_24=bassAvg = 1.0;
per_frame_init_25=bassAvg3 = 1.0;
per_frame_1=/*2010 Anandamide Logistics 
per_frame_2=Anandamide is Phat and Eo.S.
per_frame_3=Concept by Phat
per_frame_4=Graffiti font created in Context Free by ForceField
per_frame_5=Spraypaint can concept by Phat
per_frame_6=Spraypaint can 3d modeling created in 3d Studio Max by Eo.S.
per_frame_7=Graffiti created by Phat with character and graffiti illustrations from Phat Eo.S. and ForceField
per_frame_8=Graffiti created in Structure Synth by Phat
per_frame_9=Milkdrop code created by Eo.S.
per_frame_10=
per_frame_11=Special thanks to Phong who masked out the electromagnetic spectrum used in the graffiti 
per_frame_12=If your going to remix this please do it right.*/
per_frame_13=
per_frame_14=decay=0.975;
per_frame_15=
per_frame_16=vol=(bass+mid+treb)*0.25;
per_frame_17=vol=vol*vol*vol;
per_frame_18=
per_frame_19=mtime=mtime+vol*0.01;
per_frame_20=q24 = mtime * 0.5;
per_frame_21=
per_frame_22=ttime = ttime + treb*treb*treb*0.01;
per_frame_23=
per_frame_24=//replicated from composite shader
per_frame_25=beamCurveBase = sin( q24 ) * 0.5 + 0.5;
per_frame_26=beamCurveBase = beamCurveBase * beamCurveBase * (3.0-2.0*beamCurveBase);//smoothstep
per_frame_27=beamCurveBase = pow( beamCurveBase, 2.0 );
per_frame_28=
per_frame_29=bcLo = min( beamCurveBase*2.0, 0.5 );
per_frame_30=bcHi = max( beamCurveBase*2.0-1.0, 0.5 );
per_frame_31=bcLo = bcLo * bcLo * (3.0-2.0*bcLo);
per_frame_32=bcHi = bcHi * bcHi * (3.0-2.0*bcHi);
per_frame_33=beamCurve = ( sqrt(bcLo) + pow(bcHi,2.0) * 0.6 ) / 2.0;
per_frame_34=q31 = beamCurve; 
per_frame_35=//beamCurve = 0.6;
per_frame_36=//original - beamCurve = pow( smoothstep( -1.0, 1.0, sin( q24 / 1.0 ) ), 2.0 ) * 1.0;
per_frame_37=
per_frame_38=
per_frame_39=//static const float BeamCurveBase = pow( smoothstep( -1.0, 1.0, sin( q24 / 1.0 ) ), 2.0 ) * 1.0;
per_frame_40=//static const float BeamCurve = (sqrt(smoothstep(0.0,0.5,BeamCurveBase)) + pow(smoothstep(0.5,1.0,BeamCurveBase),2.0)*0.6)/2.0;
per_frame_41=
per_frame_42=
per_frame_43=
per_frame_44=//calc xtime first, cause at certain xtimes, if beam is curved more than 0.5, z has to be changed
per_frame_45=xTime = xTime + (1.0-xSeed)*0.1 * treb;
per_frame_46=xAng = sin( xTime )*0.4 * (1.0-xSeed);
per_frame_47=xAng *= abs(xAng);
per_frame_48=xAng = sin( time / 4.0 ) * 0.15;
per_frame_49=//xAng = -0.05;
per_frame_50=
per_frame_51=fixZforCurve = above( beamCurve, 0.5 ) * above( abs(xAng), 0.01 );
per_frame_52=monitor = xAng;
per_frame_53=
per_frame_54=
per_frame_55=zAng = ( sin(mtime/4.0)*0.5+0.5 );
per_frame_56=xSeed = zAng;
per_frame_57=zAng = pow( zAng, 4.0 ) * 5.0;
per_frame_58=zAng = zAng * 2;
per_frame_59=
per_frame_60=zAngFixHigh = if( above( zAng, 5.0 ), -( zAng - 4 ) * 0.8, 0.0 );
per_frame_61=zAngFixLow = if( below( zAng, 5.0 ), zAng * 3.0/5.0 + 2.5, 0.0 ); 
per_frame_62=zAng = if( fixZforCurve, zAngFixHigh + zAngFixLow, zAng );
per_frame_63=//zAng = -0.5;
per_frame_64=q32 = zAng;
per_frame_65=monitor = beamCurve;
per_frame_66=zAngS = sin( zAng ); zAngC = cos( zAng );
per_frame_67=
per_frame_68=//inverse view matrix
per_frame_69=q1 = 1.0/*cos(time+0.5)+((treb+mid)*0.2)*/; q2 = 0.0; q3 = 0.0; q4 = 0.0;
per_frame_70=q5 = 0.0; q6 = 1.0; q7 = 0.0; q8 = 0.0;
per_frame_71=q9 = 0.0; q10= 0.0; q11= 1.0; q12= -100.0;
per_frame_72=q13= 0.0; q14= 0.0; q15= 0.0; q16= 1.0;
per_frame_73=
per_frame_74=x1a = q1 * zAngC - q2 * zAngS;
per_frame_75=y1a = q1 * zAngS + q2 * zAngC;
per_frame_76=z1a = q3;
per_frame_77=
per_frame_78=x2a = q5 * zAngC - q6 * zAngS;
per_frame_79=y2a = q5 * zAngS + q6 * zAngC;
per_frame_80=z2a = q7;
per_frame_81=
per_frame_82=w1a = q4 * zAngC - q8 * zAngS;
per_frame_83=w2a = q4 * zAngC - q8 * zAngS;
per_frame_84=w3a = q12;
per_frame_85=
per_frame_86=q1 = x1a; q2 = y1a; q3 = z1a;
per_frame_87=q5 = x2a; q6 = y2a; q7 = z2a;
per_frame_88=//q9 = x3a; q10= y3a; q11= z3a;
per_frame_89=
per_frame_90=q4 = w1a;
per_frame_91=q8 = w2a;
per_frame_92=q12= w3a;
per_frame_93=
per_frame_94=
per_frame_95=gmegabuf(0) = aspecty;
per_frame_96=
per_frame_97=
per_frame_98=
per_frame_99=
per_frame_100=xAngS = sin( xAng ); xAngC = cos( xAng );
per_frame_101=q30 = xAng;
per_frame_102=//x1a = q1;
per_frame_103=//y1a = q2 * xAngC - q3 * xAngS;
per_frame_104=//z1a = q2 * xAngS + q3 * xAngC;
per_frame_105=
per_frame_106=x2a = q5;
per_frame_107=y2a = q6 * xAngC - q7 * xAngS;
per_frame_108=z2a = q6 * xAngS + q7 * xAngC;
per_frame_109=
per_frame_110=x3a = q9;
per_frame_111=y3a = q10 * xAngC - q11 * xAngS;
per_frame_112=z3a = q10 * xAngS + q11 * xAngC;
per_frame_113=
per_frame_114=w1a = q4;
per_frame_115=w2a = q8 * xAngC - q12 * xAngS;
per_frame_116=w3a = q8 * xAngS + q12 * xAngC;
per_frame_117=
per_frame_118=//q1 = x1a; q2 = y1a; q3 = z1a;
per_frame_119=q5 = x2a; q6 = y2a; q7 = z2a;
per_frame_120=q9 = x3a; q10= y3a; q11= z3a;
per_frame_121=
per_frame_122=q4 = w1a;
per_frame_123=q8 = w2a;
per_frame_124=q12= w3a;
per_frame_125=
per_frame_126=
per_frame_127=
per_frame_128=
per_frame_129=//q17 = w1a; q18 = w2a; q19 = w3a;//view pos - redundate, get from q4/8/12
per_frame_130=
per_frame_131=avgVol = avgVol * 0.999 + vol * 0.001;
per_frame_132=avgMidTreb = avgMidTreb * 0.999 + (mid+treb)*0.001;
per_frame_133=volAdj = 0.55 / avgVol;
per_frame_134=
per_frame_135=btimeAdd = 1.0/fps;
per_frame_136=swipeRange = (btime/8.0 - int(btime/8.0)) * 8.0;
per_frame_137=swipeRange = above( swipeRange, 0.95 ) * below( (swipeRange-0.95)*1.5, 1.0 ); 
per_frame_138=volAddDampered = volAddDampered * 0.25 + vol * 0.75;
per_frame_139=btimeAdd = if( swipeRange, 1.0/fps * volAddDampered * 0.3 * volAdj, btimeAdd );
per_frame_140=xformRange = (btime/8.0 - int(btime/8.0)) * 8.0;
per_frame_141=xformRange = max( min( xformRange, 1.0 ), 0.0 );
per_frame_142=xformRange = above( xformRange, 0.0 ) * below( xformRange, 1.0 );
per_frame_143=
per_frame_144=canThrowRange = (btime/8.0 - int(btime/8.0)) * 8.0 - 1.85;
per_frame_145=canThrowRange = above( canThrowRange, 0.0 ) * below( canThrowRange, 1.0 );
per_frame_146=freeze = if( above( mid+treb, avgMidTreb * 3.0 ) * below( freeze, 0.05 ), 1.0, freeze );
per_frame_147=freeze = max( freeze - 2.0/fps, 0.0 );
per_frame_148=
per_frame_149=btimeAdd = if( xformRange, 0.8/fps * pow(1.0-freeze,4.0), btimeAdd );
per_frame_150=btimeAdd = if( canThrowRange, 1.0/fps * pow(1.0-freeze,4.0), btimeAdd );
per_frame_151=monitor = freeze;
per_frame_152=
per_frame_153=btime = btime + btimeAdd ;
per_frame_154=
per_frame_155=botBaseTime = btime/8.0 - int(btime/8.0);
per_frame_156=botBaseLevel= int(  (btime/32.0 - int(btime/32.0)) * 4.0  ) ;
per_frame_157=botTime = min( botBaseTime * 8.0, 15.0/16.0 * 0.9999 );
per_frame_158=q20 = botTime; 
per_frame_159=
per_frame_160=botMove = max( min( (botBaseTime * 8.0 - 0.95)*1.5, 1.0 ), 0.0 );
per_frame_161=//swipe = swipe * 0.97 + botMove * 0.03; 
per_frame_162=q22 = botMove;//swipe;
per_frame_163=botMove = pow( botMove, 0.7 );
per_frame_164=q21 = botMove; q23 = max( min( botBaseTime * 8.0 - 6.0, 1.0), 0.0 );
per_frame_165=
per_frame_166=
per_frame_167=midTrebVol = (mid+treb)/2.0;
per_frame_168=midTrebVol = midTrebVol * midTrebVol;
per_frame_169=canAnimTime = min( max( botBaseTime*8.0 - 1.95, 0.0 ), 1.0 );
per_frame_170=canThrowTime = min( max( botBaseTime*8.0 - 1.85, 0.0 ), 1.0 );
per_frame_171=q20 = min( q20 + canThrowTime/2.0, 0.9999 ) + botBaseLevel;
per_frame_172=canGrowTime = min( max( (botBaseTime*8.0 - 2.95)/(8.0-2.95) + midTrebVol*0.01, 0.0 ), 1.0 );
per_frame_173=botExitTime = min( max( (botBaseTime*8.0 - 2.95) / 2.0, 0.0 ), 1.0 );
per_frame_174=q25 = canAnimTime;
per_frame_175=q26 = canGrowTime;
per_frame_176=q27 = botExitTime;
per_frame_177=q29 = time/4.0;
per_frame_178=botChannel = time/4.0;
per_frame_179=
per_frame_180=
per_frame_181=btimeDampered = btimeDampered * 0.99 + btime * 0.01;
per_frame_182=graffGrow = (btimeDampered/8.0) - int(btimeDampered/8.0);
per_frame_183=reset = ((btime/8.0) - int(btime/8.0))*8.0;
per_frame_184=resetGraff = above( reset, 1.0 );
per_frame_185=
per_frame_186=graffTimer = (graffTimer + 1.0/fps)*resetGraff;
per_frame_187=graffScale = 1.0/(graffTimer*0.03+1.0);
per_frame_188=q17 = graffTimer;
per_frame_189=
per_frame_190=vshift = 1.31 - pow((aspecty-1)*5.0+1, 0.2);
per_frame_191=
per_frame_192=bassAvg = bassAvg * 0.999 + bass_att * 0.001;
per_frame_193=bassAvg2 =max( bass_att - bassAvg, 0.0 );;
per_frame_194=bassAvg3 = bassAvg3 * 0.99 + above(bass,bassAvg) * 0.01;
per_frame_195=bassAmt = max( min( bassAvg3 / 0.25, 1.0), 0.0 );
per_frame_196=q18 = bassAmt;
per_frame_197=
per_frame_198=
per_frame_199=monitor = bassAmt;//pow( (avgMidTreb-bassAvg)/avgMidTreb, 4.0 );
per_pixel_1=/*2010 Anandamide Logistics 
per_pixel_2=Anandamide is Phat and Eo.S.
per_pixel_3=Concept by Phat
per_pixel_4=Graffiti font created in Context Free by ForceField
per_pixel_5=Spraypaint can concept by Phat
per_pixel_6=Spraypaint can 3d modeling created in 3d Studio Max by Eo.S.
per_pixel_7=Graffiti created by Phat with character and graffiti illustrations from Phat Eo.S. and ForceField
per_pixel_8=Graffiti created in Structure Synth by Phat
per_pixel_9=Milkdrop code created by Eo.S.
per_pixel_10=
per_pixel_11=Special thanks to Phong who masked out the electromagnetic spectrum used in the graffiti 
per_pixel_12=If your going to remix this please do it right.*/
per_pixel_13=zm=1.00;
per_pixel_14=
per_pixel_15=sx=zm;
per_pixel_16=sy=zm;
per_pixel_17=dx = 0;
per_pixel_18=dy = 0;
warp_1=`/*2010 Anandamide Logistics 
warp_2=`Anandamide is Phat and Eo.S.
warp_3=`Concept by Phat
warp_4=`Graffiti font created in Context Free by ForceField
warp_5=`Spraypaint can concept by Phat
warp_6=`Spraypaint can 3d modeling created in 3d Studio Max by Eo.S.
warp_7=`Graffiti created by Phat with character and graffiti illustrations from Phat Eo.S. and ForceField
warp_8=`Graffiti created in Structure Synth by Phat
warp_9=`Milkdrop code created by Eo.S.
warp_10=`
warp_11=`Special thanks to Phong who masked out the electromagnetic spectrum used in the graffiti 
warp_12=`If your going to remix this please do it right.*/
warp_13=`
warp_14=`static const float4x4 MatViewI = float4x4( q1, q2, q3, q4,  q5, q6, q7, q8,  q9, q10, q11, q12,  q13, q14, q15, q16 );
warp_15=`static const float3 ViewPos = float3( q17, q18, q19 );
warp_16=`
warp_17=`static const float BeamTop = 0.4;//sin( time * 0.4 ) * 30.0;
warp_18=`static const float BeamBtm = BeamTop - 0.8;
warp_19=`static const float BeamDensity = 1.0 / 10.0;
warp_20=`
warp_21=`static const float2 ScanMod = float2( sin( time ) * 0.2 + 0.2, sin( time * 0.5 ) * 14.0 + 4.0 );
warp_22=`
warp_23=`//DUPLICATE can/bot vars from composite shader to do shadowing for the laser
warp_24=`sampler sampler_graffBotAnim01;
warp_25=`sampler sampler_graffBotGraff00;
warp_26=`
warp_27=`static const float2 GraffScale = float2( 1.0 - q17*0.01, 1.0 - q17*0.01 );
warp_28=`static const float VertShift = (1.31-pow( (1.0/aspect.y-1)*1.19+1.0, 0.5 )) * 1.03 + 0.115;
warp_29=`
warp_30=`static const float AnimTime = frac( q20 );//is +1 for 2nd graff tex
warp_31=`static const float2 AnimOffset = float2( floor( frac( frac(q20) * 4.0 ) * 4.0 ) / 4.0, floor( frac(q20) * 4.0 ) / 4.0 );
warp_32=`static const float4 AnimChannel = (frac( frac(q20) * 16.0 ) >= float4( 0.0, 0.25, 0.5, 0.75 )) * (frac( frac(q20) * 16.0 ) < float4( 0.25, 0.5, 0.75, 1.0 )); 
warp_33=`
warp_34=`static const float2 AnimMove = float2( q21 * -0.35, 0.0 );
warp_35=`static const float4 Swipe = float4( 1.0-q21*1.3, 1.0-q22*1.3, 1.0-(q21*1.3-0.3), 1.0-(q22*1.3-0.3) );
warp_36=`//1.0-Swipe*1.3, 1.0-(Swipe*1.3-0.3)
warp_37=`
warp_38=`//static const float4x4 MatViewI = float4x4( q1, q2, q3, q4,  q5, q6, q7, q8,  q9, q10, q11, q12,  q13, q14, q15, q16 );
warp_39=`//static const float3 ViewPos = float3( q17, q18, q19 );
warp_40=`
warp_41=`//static const float BeamTop = 0.4;//sin( time * 0.4 ) * 30.0;
warp_42=`//static const float BeamBtm = BeamTop - 0.8;
warp_43=`//static const float BeamDensity = 1.0 / 10.0;
warp_44=`
warp_45=`//static const float2 ScanMod = float2( sin( q24 * 1.1 ) * 0.2 + 0.2, sin( q24 * 0.5 ) * 14.0 + 4.0 );
warp_46=`
warp_47=`//static const float2 BeamCurveBase = pow( smoothstep( -1.0, 1.0, float2( sin( q24 / 1.0 ), sin( time / 2.3 ) * 1.5 - 0.5 ) ), 2.0 ) * 1.0;
warp_48=`static const float2 BeamCurve = q31;//(sqrt(smoothstep(0.0,0.5,BeamCurveBase)) + pow(smoothstep(0.5,1.0,BeamCurveBase),2.0)*0.6)/2.0;
warp_49=`static const float2 StripeBounds = ( sin( time.xx / 1.1 ) * abs(sin(time.xx/1.1)) * 0.5 + 0.5 ) * 0.93 + float2( 0.0, 0.07 );
warp_50=`static const float3 Col = lerp( float3( 4.0, 1.5, 1.0 ), float3( 6.0, 1.0, 0.5 ), smoothstep( 0.5, 1.5, mid ) );
warp_51=`
warp_52=`static const float CanAnimTime = pow(q25,0.5);
warp_53=`static const float4 CanStart = float4( 1.0, 1.0, 0.27, 0.2 - (pow(q25,2.0)*(1.0-pow(q25,0.5)))*3.0 ) * 3.0 + //tiling, offset
warp_54=`             float4( 0.0, 0.0, (q25 == 0 ? (1.0-q21) * 1.75 : 0.0)+0.02, 0.03 ) + //this line moves the can to stay in bot's hand during spray
warp_55=`             float4( 0.0, 0.0,  frac(q20) < 0.9374 ? 100.0 : 0.0, 0.0 );//remove can during transform by pushing off screen
warp_56=`
warp_57=`//it seems in some cases, that basing preshader variables on other preshader variables causes them to instead be calculated in the
warp_58=`//shader. But not always...
warp_59=`static const float2x2 CanRotMat = float2x2( cos(sqrt(q25)*12.57), -sin(sqrt(q25)*12.57), sin(sqrt(q25)*12.57), cos(sqrt(q25)*12.57) );
warp_60=`
warp_61=`static const float CanGrowTime = smoothstep( 0.0, 1.0, q26 );
warp_62=`static const float BotExitTime = q27;
warp_63=`
warp_64=`static const float2 BeamPan = lerp( float2( 37.5 + ( frac( (sin(time*1.0)*0.5+0.5)*8.0 ) * 30.0 - 15.0 ) * saturate(1.0-frac(time*0.11)*4.0) 
warp_65=`                                        + pow( saturate( frac(time*0.11) * 5.0 ), 2.0 ) * float2( -20.0, 20.0 )  ), 
warp_66=`                                    float2(-10000.0,10000.0), 1.0 - saturate( q30 / 0.004 ) ); 
warp_67=`
warp_68=`shader_body
warp_69=`{
warp_70=`float2 uvStart = uv;
warp_71=`
warp_72=`float4 trigWork = sin( uv.yxyx * aspect.yxyx * float2( 6.0, 26.0 ).xxyy + time * 1.9 );
warp_73=`float4 uvWork = uv.xyxy + (trigWork.xyxy - trigWork.zwzw) * float2( 0.003, 0.04 ).xxyy;
warp_74=`uv = uvWork.xy;
warp_75=`
warp_76=`
warp_77=`float3 last = GetPixel( uv );// - float3( 1.0/255.0, 1.0/255.0, 0.0 );
warp_78=`last.b -= 1.0/255.0;
warp_79=`float4 dots = tex3D( sampler_noisevol_lq, float3( uvWork.zw * aspect * 3.0, + time*0.05 ) );// frac( (uv.xyyx) * float4( 3.0, 3.0, 4.0, 4.0 ) );
warp_80=`dots = dots*dots*1.1;//frac( dots.x ) > 0.8;
warp_81=`last.b = max( last.b, dots.x );
warp_82=`last.rg = 0.0;
warp_83=`
warp_84=`ret = last;
warp_85=`
warp_86=`//zw of botcoords is can coords
warp_87=`//note: aspect.y is 1.0/aspecty from per frame - widescreen is < 1.0
warp_88=`float2 uvS = float2( uvStart.x, uvStart.y - VertShift) * aspect.xy;
warp_89=`uvS.y = uvS.y;
warp_90=`
warp_91=`
warp_92=`float2 graffCoords = uvS * 1.8 * float2( 1.0, 4.0 * 256.0/275.0 ) + float2( -0.6, -1.2 );
warp_93=`graffCoords.xy = (graffCoords.xy-float2(0.25,0.5))*GraffScale+float2(0.25,0.5);
warp_94=`graffCoords.xy += dot( last.rrb, float3(2.0,2.0,1.0) ) * q23 * 0.15;
warp_95=`
warp_96=`float2 graffMask2 = abs( graffCoords - 0.5 ) < 0.5;
warp_97=`float graffMask = min( graffMask2.x, graffMask2.y );
warp_98=`float4 graff = 0.5;
warp_99=`float2 graffSwipe = smoothstep( Swipe.xy, Swipe.zw, graffCoords.xx );// smoothstep( 1.0-Swipe*1.3, 1.0-(Swipe*1.3-0.3), graffCoords.xx ) ;
warp_100=`if( graffMask > 0.5 )
warp_101=`{
warp_102=`   graffCoords.y = graffCoords.y * 0.25 + floor(q20) * 0.25;
warp_103=`   graff = tex2Dlod( sampler_graffBotGraff00, float4(graffCoords,0.0, (1.0-graffSwipe.y)*5.0 + q23*5.0 ) );
warp_104=`}
warp_105=`graff.a *= graffMask;
warp_106=`graff = lerp( float4( 0.5,0.5,0.5,0.0 ), graff, graffSwipe.x * (1.0-q23) );
warp_107=`
warp_108=`
warp_109=`
warp_110=`
warp_111=`
warp_112=`
warp_113=`//zw of botcoords is can coords
warp_114=`float4 botCoords = uvS.xyxy * float4( 0.6, 0.6, CanStart.xy ) - float4( 0.35, 0.08, CanStart.zw );
warp_115=`float2 botCoordsStart = botCoords; botCoords.xy +=  - float4( AnimMove, 0.0, 0.0 );
warp_116=`botCoords.zw = lerp( botCoords.zw, (botCoordsStart-float2(0.18,0.25))*CanStart.xy+float2(0.27,0.25), CanAnimTime );
warp_117=`
warp_118=`botCoords.zw = lerp( botCoords.zw, botCoordsStart, CanGrowTime );
warp_119=`botCoords.zw = mul( botCoords.zw-1.0/8.0, CanRotMat ) + 1.0/8.0;
warp_120=`
warp_121=`botCoords.xy += dot( last, float3(2.0,2.0,1.0)) * BotExitTime * 0.05;
warp_122=`float4 botMask2 = abs( botCoords * 4.0 - 0.5 ) < 0.5;
warp_123=`float2 botMask = botMask2.xz * botMask2.yw;
warp_124=`
warp_125=`float4 bot = 0;
warp_126=`float4 can = 0;
warp_127=`if( botMask.x > 0.5 )
warp_128=`{
warp_129=`  bot = tex2Dbias( sampler_graffBotAnim01, float4( botCoords.xy + AnimOffset, 0.0, -2.0 ) );
warp_130=`  bot = dot( bot, AnimChannel );
warp_131=`  bot -= BotExitTime*BotExitTime;
warp_132=`}
warp_133=`if( botMask.y > 0.5 )
warp_134=`{
warp_135=`  can = tex2D( sampler_graffBotAnim01, botCoords.zw );
warp_136=`}
warp_137=`bot = smoothstep( float4( 0.015, 0.45, 0.7, 0.95 ), float4( 0.27, 0.55, 0.8, 1.0 ), bot.r );
warp_138=`
warp_139=`bot = float4( dot( bot.gba, 1.0/3.0 ).xxx, bot.x );
warp_140=`bot.a *= 1.0 - BotExitTime;
warp_141=`
warp_142=`can = smoothstep( float4( 0.015, 0.45, 0.7, 0.95 ), float4( 0.3, 0.55, 0.8, 1.0 ), can.r );
warp_143=`can = float4( dot( can.gba, 1.0/3.0 ).xxx, can.x );
warp_144=`
warp_145=`
warp_146=`float2 uvZoom = (uvStart-0.5)*0.985 + 0.5;
warp_147=`float shadowLast = GetPixel(uvZoom).g * 1.01;//- 10.0/256.0;
warp_148=`
warp_149=`ret.g = max(bot.a,can.a);//lerp( bot.a*0.5, shadowLast, saturate( shadowLast * 2.0 ) );
warp_150=`ret.g = max( ret.g, sqrt(graff.a)*0.97 );
warp_151=`
warp_152=`//ret = bot.a;
warp_153=`}
comp_1=`/*2010 Anandamide Logistics 
comp_2=`Anandamide is Phat and Eo.S.
comp_3=`Concept by Phat
comp_4=`Graffiti font created in Context Free by ForceField
comp_5=`Spraypaint can concept by Phat
comp_6=`Spraypaint can 3d modeling created in 3d Studio Max by Eo.S.
comp_7=`Graffiti created by Phat with character and graffiti illustrations from Phat Eo.S. and ForceField
comp_8=`Graffiti created in Structure Synth by Phat
comp_9=`Milkdrop code created by Eo.S.
comp_10=`
comp_11=`Special thanks to Phong who masked out the electromagnetic spectrum used in the graffiti 
comp_12=`If your going to remix this please do it right.*/
comp_13=`
comp_14=`sampler sampler_graffBotAnim01;
comp_15=`sampler sampler_graffBotGraff00;
comp_16=`
comp_17=`static const float AnimTime = frac( q20 );//is +1 for 2nd graff tex
comp_18=`static const float2 AnimOffset = float2( floor( frac( frac(q20) * 4.0 ) * 4.0 ) / 4.0, floor( frac(q20) * 4.0 ) / 4.0 );
comp_19=`static const float4 AnimChannel = (frac( frac(q20) * 16.0 ) >= float4( 0.0, 0.25, 0.5, 0.75 )) * (frac( frac(q20) * 16.0 ) < float4( 0.25, 0.5, 0.75, 1.0 )); 
comp_20=`static const float2 GraffScale = float2( 1.0 - q17*0.01, 1.0 - q17*0.01 );
comp_21=`static const float Vol = pow( (bass+mid+treb)*0.25, 2.0 );
comp_22=`
comp_23=`static const float2 AnimMove = float2( q21 * -0.35, 0.0 );
comp_24=`static const float4 Swipe = float4( 1.0-q21*1.3, 1.0-q22*1.3, 1.0-(q21*1.3-0.3), 1.0-(q22*1.3-0.3) );
comp_25=`static const float VertShift = (1.31-pow( (1.0/aspect.y-1)*1.19+1.0, 0.5 )) * 1.03 + 0.115;
comp_26=`
comp_27=`static const float4x4 MatViewI = float4x4( q1, q2, q3, q4,  q5, q6, q7, q8,  q9, q10, q11, q12,  q13, q14, q15, q16 );
comp_28=`static const float3 ViewPos = float3( q4, q8, q12 );//float3( q17, q18, q19 );
comp_29=`
comp_30=`static const float BeamTop = 0.4;//sin( time * 0.4 ) * 30.0;
comp_31=`static const float BeamBtm = BeamTop - 0.8;
comp_32=`static const float BeamDensity = 1.0 / 15.0;
comp_33=`
comp_34=`static const float2 ScanMod = float2( sin( q24 * 1.1 ) * 0.2 + 0.2, sin( q24 * 0.5 ) * 14.0 + 4.0 );
comp_35=`
comp_36=`//static const float2 BeamCurveBase = pow( smoothstep( -1.0, 1.0, float2( sin( q24 / 1.0 ), sin( time / 2.3 ) * 1.5 - 0.5 ) ), 2.0 ) * 1.0;
comp_37=`static const float2 BeamCurve = q31;//(sqrt(smoothstep(0.0,0.5,BeamCurveBase)) + pow(smoothstep(0.5,1.0,BeamCurveBase),2.0)*0.6)/2.0;
comp_38=`static const float2 StripeBounds = ( sin( time.xx / 1.1 ) * abs(sin(time.xx/1.1)) * 0.5 + 0.5 ) * 0.93 + float2( 0.0, 0.07 );
comp_39=`static const float3 Col = lerp( float3( 4.0, 1.0, 1.2 ),
comp_40=`                                lerp( float3( 4.0, 1.5, 1.0 ), float3( 6.0, 1.0, 0.5 ), smoothstep( 0.5, 1.5, mid ) ),
comp_41=`                                q18 );
comp_42=`static const float3 HexCol = lerp( float3( 0.0, 1.0, 1.0 ), float3( 0.0, 0.5, 1.0 ), q18 );
comp_43=`
comp_44=`static const float CanAnimTime = pow(q25,0.5);
comp_45=`static const float4 CanStart = float4( 1.0, 1.0, 0.27, 0.2 - (pow(q25,2.0)*(1.0-pow(q25,0.5)))*3.0 ) * 3.0 + //tiling, offset
comp_46=`             float4( 0.0, 0.0, (q25 == 0 ? (1.0-q21) * 1.75 : 0.0)+0.02, 0.03 ) + //this line moves the can to stay in bot's hand during spray
comp_47=`             float4( 0.0, 0.0,  frac(q20) < 0.9374 ? 100.0 : 0.0, 0.0 );//remove can during transform by pushing off screen
comp_48=`
comp_49=`//it seems in some cases, that basing preshader variables on other preshader variables causes them to instead be calculated in the
comp_50=`//shader. But not always...
comp_51=`static const float2x2 CanRotMat = float2x2( cos(sqrt(q25)*12.57), -sin(sqrt(q25)*12.57), sin(sqrt(q25)*12.57), cos(sqrt(q25)*12.57) );
comp_52=`
comp_53=`static const float CanGrowTime = smoothstep( 0.0, 1.0, q26 );
comp_54=`static const float BotExitTime = q27;
comp_55=`
comp_56=`static const float2 BeamPan = lerp( float2( 37.5 + ( frac( (sin(time*1.0)*0.5+0.5)*8.0 ) * 30.0 - 15.0 ) * saturate(1.0-frac(time*0.11)*4.0) 
comp_57=`                                        + pow( saturate( frac(time*0.11) * 5.0 ), 2.0 ) * float2( -20.0, 20.0 )  ), 
comp_58=`                                    float2(-10000.0,10000.0), 1.0 - saturate( q30 / 0.004 ) ); 
comp_59=`
comp_60=`shader_body {//SHADER BODY---------------
comp_61=`float4 foo = 0;//if w is 1, output is overridden with foo
comp_62=`float3 warpShaderOut = GetPixel(uv);
comp_63=`ret = tex2D( sampler_main, uv_orig ).xyz;
comp_64=`
comp_65=`
comp_66=`float4 position_vs = float4( (uv.xy * float2(2.0,2.0) + float2(-1.0,-1.0)) * aspect * 100.0, 0.0, 1.0 );
comp_67=`position_vs.xy = lerp( position_vs.xy, length( position_vs.xy ), BeamCurve.x );
comp_68=`
comp_69=`float4 position_ws = mul( position_vs, MatViewI );
comp_70=`//float3 ground_ws = float3( (uv.xy * 2.0 - 1.0 ) * aspect, (1.0-saturate(uv.y) * 100.0 + 1.0 ) );
comp_71=`//ground_ws.xy *= ground_ws.z;
comp_72=`//float3 foo = frac(ground_ws / 1.0 );
comp_73=`
comp_74=`float3 viewVec = position_ws.xyz - ViewPos;//vector from camera to world position
comp_75=`
comp_76=`float top = BeamTop;
comp_77=`float btm = BeamBtm;
comp_78=`if( viewVec.y > 0.0 )//if angled up
comp_79=`{
comp_80=`   //top of section must be below vector end, and above vector start
comp_81=`   top = min( top, position_ws.y );
comp_82=`   top = max( top, ViewPos.y );
comp_83=`   btm = min( btm, position_ws.y );
comp_84=`   btm = max( btm, ViewPos.y );
comp_85=`}
comp_86=`else //angled down
comp_87=`{
comp_88=`   //top of section must be below vector start, and above vector end
comp_89=`   top = min( top, ViewPos.y );
comp_90=`   top = max( top, position_ws.y );
comp_91=`   btm = min( btm, ViewPos.y );
comp_92=`   btm = max( btm, position_ws.y );
comp_93=`}
comp_94=`
comp_95=`float section = top - btm;
comp_96=`float sectionAmount = ( abs(section) / abs(viewVec.y) );
comp_97=`
comp_98=`
comp_99=`float distToTop = abs(ViewPos.y - (ViewPos.y>BeamBtm?BeamTop:BeamBtm)) / abs(viewVec.y); //distToTop *= length( viewVec );
comp_100=`float3 topCoords = ViewPos + distToTop * viewVec;
comp_101=`float angle = atan2( -topCoords.z, topCoords.x ); float depth = saturate( 1.0 - (topCoords.z / -100.0) ); float modPinWidth = depth*depth*0.15;//widens the thin beams in the distance
comp_102=`
comp_103=`topCoords.xz = topCoords.xz / 4.0;
comp_104=`topCoords.xz = (topCoords.xz + float2( 0.0, 25.0 - abs(q30/0.15) * 5.0 )) / (abs(q30)*10.0+1.0);//adjust tiling so it doesn't move so much
comp_105=`topCoords.xz *= 2.0;//extra tiling adjustment
comp_106=`
comp_107=`float stripeBase = clamp( angle * 24.0, BeamPan.x, BeamPan.y ); float beamLimit = saturate( (stripeBase-BeamPan.x) / (BeamPan.y-BeamPan.x) ); 
comp_108=`float2 beamLimit2 = smoothstep( float2(0.0,0.0), float2(0.03,0.2), beamLimit * (1.0 - beamLimit) ); 
comp_109=`beamLimit = beamLimit2.x + beamLimit2.x * (1.0-beamLimit2.x) * 10.0; 
comp_110=`float topScan = frac( stripeBase * ScanMod.x + ScanMod.y );
comp_111=`float stripe = smoothstep( StripeBounds.x - modPinWidth, StripeBounds.y + modPinWidth, abs( topScan * 2.0 - 1.0 ) );//bounds have a separation of 0.07 - beam stripes
comp_112=`float phaseBase = frac( stripeBase * 0.01 + time * 16.0 ); float phase = smoothstep( 0.31, 1.0, phaseBase * (1.0-phaseBase) * 4.0 );
comp_113=`topScan = stripe + (1.0-abs(stripe*2.0-1.0))*14.0 + 0.3;//strip + thin beams at stripe edges
comp_114=`topScan *= phase;
comp_115=`float smoke = GetPixel( (topCoords.xz / 4.0) / (abs(q30)*24.0 + 1.0) + float2( q32, 0.0 ) ).b; 
comp_116=`topScan *= smoke*smoke * 4.0 + 0.5; 
comp_117=`
comp_118=`float fogDepth = sectionAmount * length( viewVec );
comp_119=`float fog = 1.0 - 1.0 / (fogDepth * BeamDensity * (topScan + 0.8 ) + 1.0);
comp_120=`
comp_121=`fog *= beamLimit.x;
comp_122=`
comp_123=`
comp_124=`fog = lerp( fog, 1.0, depth*depth*saturate(fog*2.0) );//push the beam to white at max distance 
comp_125=`float2 shadowUV = (uv-0.5) * pow(min(depth*4.0,1.0),1.09) + 0.5;
comp_126=`float shadow = tex2D( sampler_main, shadowUV ).g; float rim = saturate( shadow * 3.0 - 2.0 );
comp_127=`float interSect = smoothstep( 0.24, 0.26, depth ); interSect *= (1.0-interSect) * 14.0 * (rim)*(1.0-rim); 
comp_128=`interSect *= saturate(fog*8.0);
comp_129=`float toSoft = saturate( depth * 8.0 - 2.0 ); shadow = saturate( shadow.xxx * (toSoft*9.0+1.0) - toSoft*9.0 ); 
comp_130=`fog *= 1.0 - shadow;
comp_131=`
comp_132=`fog += interSect;
comp_133=`
comp_134=`
comp_135=`float3 weCanHazLasers = fog;
comp_136=`weCanHazLasers = pow( weCanHazLasers, Col );
comp_137=`
comp_138=`ret = 0;// weCanHazLasers;
comp_139=`ret += ( warpShaderOut.r * HexCol ) * saturate(1.0-fog*2.0);
comp_140=`
comp_141=`//zw of botcoords is can coords
comp_142=`//note: aspect.y is 1.0/aspecty from per frame - widescreen is < 1.0
comp_143=`float2 uvS = float2( uv.x, uv.y - VertShift) * aspect.xy;
comp_144=`uvS.y = uvS.y;
comp_145=`
comp_146=`float2 graffCoords = uvS * 1.8 * float2( 1.0, 4.0 * 256.0/275.0 ) + float2( -0.6, -1.2 );
comp_147=`
comp_148=`graffCoords.xy = (graffCoords.xy-float2(0.25,0.5))*GraffScale+float2(0.25,0.5);
comp_149=`graffCoords.xy += dot( warpShaderOut.rb, float2(2.0,1.0) ) * q23 * 0.15;
comp_150=`
comp_151=`float2 graffMask2 = abs( graffCoords - 0.5 ) < 0.5;
comp_152=`float graffMask = min( graffMask2.x, graffMask2.y );
comp_153=`float4 graff = 0.5;
comp_154=`float2 graffSwipe = smoothstep( Swipe.xy, Swipe.zw, graffCoords.xx );// smoothstep( 1.0-Swipe*1.3, 1.0-(Swipe*1.3-0.3), graffCoords.xx ) ;
comp_155=`if( graffMask > 0.5 )
comp_156=`{
comp_157=`   graffCoords.y = graffCoords.y * 0.25 + floor(q20) * 0.25;
comp_158=`   graff = tex2Dlod( sampler_graffBotGraff00, float4(graffCoords,0.0, (1.0-graffSwipe.y)*5.0 + q23*5.0 ) );
comp_159=`   graff.rgb *= saturate( graff.b - graff.r ) * Vol * 1.0 + 1.0;
comp_160=`}
comp_161=`graff.a *= graffMask;
comp_162=`graff = lerp( float4( 0.5,0.5,0.5,0.0 ), graff, graffSwipe.x * (1.0-q23) );
comp_163=`
comp_164=`float4 botCoords = uvS.xyxy /* aspect.xyxy*/ * float4( 0.6, 0.6, CanStart.xy ) - float4( 0.35, 0.08, CanStart.zw );
comp_165=`
comp_166=`//foo = float4( frac(botCoords.xyx) + float3(0.0,0.0,botCoords.y > 1.0), 1.0 );
comp_167=`//foo = float4( botCoords.xyx, 1.0 );
comp_168=`float2 botCoordsStart = botCoords; botCoords.xy +=  - float4( AnimMove, 0.0, 0.0 );
comp_169=`botCoords.zw = lerp( botCoords.zw, (botCoordsStart-float2(0.18,0.25))*CanStart.xy+float2(0.27,0.25), CanAnimTime );
comp_170=`
comp_171=`botCoords.zw = lerp( botCoords.zw, botCoordsStart, CanGrowTime );
comp_172=`botCoords.zw = mul( botCoords.zw-1.0/8.0, CanRotMat ) + 1.0/8.0;
comp_173=`
comp_174=`botCoords.xy += dot( warpShaderOut.rb, float2(2.0,1.0)) * BotExitTime * 0.05;
comp_175=`float4 botMask2 = abs( botCoords * 4.0 - 0.5 ) < 0.5;
comp_176=`float2 botMask = botMask2.xz * botMask2.yw;
comp_177=`
comp_178=`//foo = float4( botCoords.x, dot( botMask, 0.5 ), botCoords.y, 1.0 );
comp_179=`
comp_180=`
comp_181=`float4 bot = 0;
comp_182=`float4 can = 0;
comp_183=`if( botMask.x > 0.5 )
comp_184=`{
comp_185=`  bot = tex2Dbias( sampler_graffBotAnim01, float4( botCoords.xy + AnimOffset, 0.0, -2.0 ) );
comp_186=`  bot = dot( bot, AnimChannel );
comp_187=`  bot -= BotExitTime*BotExitTime;
comp_188=`}
comp_189=`if( botMask.y > 0.5 )
comp_190=`{
comp_191=`  can = tex2D( sampler_graffBotAnim01, botCoords.zw );
comp_192=`}
comp_193=`bot = smoothstep( float4( 0.2, 0.25, 0.7, 0.85 ), float4( 0.3, 0.55, 0.8, 1.0 ), bot.r );
comp_194=`bot = float4( dot( bot.gb, 1.0/4.0 ).xxx + bot.a*weCanHazLasers, bot.x );
comp_195=`
comp_196=`bot.a *= 1.0 - BotExitTime;
comp_197=`
comp_198=`
comp_199=`can = smoothstep( float4( 0.2, 0.25, 0.7, 0.85 ), float4( 0.3, 0.55, 0.8, 1.0 ), can.r );
comp_200=`can = float4( dot( can.gb, 1.0/4.0 ).xxx + can.a*weCanHazLasers, can.x );
comp_201=`
comp_202=`//bot.rgb *= lerp( 1.0, bot.rgb, float3(1.0,0.5,0.0) );
comp_203=`//composite graff
comp_204=`ret = lerp( lerp(ret, ret * graff * 2.0, graff.a), graff, graff.a * 0.75 );
comp_205=`
comp_206=`//composite bot and can
comp_207=`ret = lerp( ret, can, can.a );
comp_208=`ret = lerp( ret, bot, bot.a );   
comp_209=`
comp_210=`ret += weCanHazLasers;
comp_211=`
comp_212=`/*
comp_213=`float2 uvFlare = ( uv - 0.5 ) * aspect;
comp_214=`uvFlare = atan( (uvFlare.x) / (uvFlare.y) ) * 6.0;
comp_215=`uvFlare = abs( frac(uvFlare) * 2.0 - 1.0 );
comp_216=`uvFlare = (uv-0.5)*uvFlare+0.5;
comp_217=`float3 flare = tex2D( sampler_pw_main, uvFlare );
comp_218=`ret = flare; 
comp_219=`*/
comp_220=`//ret = frac(topCoords.xz * float2(1.0,16.0)).xyx;
comp_221=`//ret = topScan / 4.0;
comp_222=`//ret = GetPixel(uv);
comp_223=`ret = foo.w > 0.5 ? foo.rgb : ret;
comp_224=`//ret = warpShaderOut.rgb;
comp_225=`}