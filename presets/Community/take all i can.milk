MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=3.000
fGammaAdj=1.630
fDecay=1.000
fVideoEchoZoom=1.222
fVideoEchoAlpha=0.000
nVideoEchoOrientation=0
nWaveMode=0
bAdditiveWaves=1
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=0
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=1
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.010
fWaveSmoothing=0.700
fWaveParam=0.000
fModWaveAlphaStart=0.750
fModWaveAlphaEnd=0.950
fWarpAnimSpeed=0.010
fWarpScale=0.010
fZoomExponent=0.84283
fShader=1.000
zoom=1.18647
rot=-0.06000
cx=0.500
cy=0.560
dx=0.00001
dy=0.00001
warp=100.00000
sx=0.86996
sy=0.91434
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.000
wave_y=0.000
ob_size=0.000
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.500
ib_r=1.000
ib_g=1.000
ib_b=1.000
ib_a=0.000
nMotionVectorsX=0.000
nMotionVectorsY=0.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.000
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
wavecode_0_enabled=0
wavecode_0_samples=200
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=0
wavecode_0_scaling=0.01000
wavecode_0_smoothing=0.50000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=1.000
wave_0_per_point1=t1 = sample+time*.2;
wave_0_per_point2=
wave_0_per_point3=x = .35* sin (6*t1) ;
wave_0_per_point4=my = .35* cos (3*t1)* sin (-10+20*sample) ;
wave_0_per_point5=mz = .35* cos (7*t1) * cos (-5+10*sample) ;
wave_0_per_point6= 
wave_0_per_point7=
wave_0_per_point8=/////// rotations... by flexi
wave_0_per_point9=
wave_0_per_point10=d = 1; 
wave_0_per_point11=zoom = 1;
wave_0_per_point12=
wave_0_per_point13=w1 = .3*time;
wave_0_per_point14=w2 = .1*time;
wave_0_per_point15=w3 = .2*time;
wave_0_per_point16=
wave_0_per_point17=x1 = cos(w1)*mx + sin(w1)*my;
wave_0_per_point18=y1 = -sin(w1)*mx + cos(w1)*my;
wave_0_per_point19=z1 = mz;
wave_0_per_point20=
wave_0_per_point21=x2 = cos(w2)*x1 + sin(w2)*z1;
wave_0_per_point22=z2 = -sin(w2)*x1 + cos(w2)*z1;
wave_0_per_point23=y2 = y1;
wave_0_per_point24=
wave_0_per_point25=y3 = cos(w3)*y2 + sin(w3)*z2;
wave_0_per_point26=z3 = -sin(w3)*y2 + cos(w3)*z2;
wave_0_per_point27=x3 = x2;
wave_0_per_point28=
wave_0_per_point29=
wave_0_per_point30=// perspective calculation
wave_0_per_point31=
wave_0_per_point32=l = sqrt(x3*x3 + y3*y3);
wave_0_per_point33=w = atan2(x3,y3);
wave_0_per_point34=p = tan(asin(1) + atan2(d+z3,l));
wave_0_per_point35=d = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));
wave_0_per_point36=
wave_0_per_point37=my_x = zoom*sin(w)*p;
wave_0_per_point38=my_y = zoom*cos(w)*p;
wave_0_per_point39=
wave_0_per_point40=x = 0.5 + my_x;
wave_0_per_point41=y = 0.5 + my_y;
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=1
shapecode_0_sides=3
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=200
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.02705
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.24699
shapecode_0_r=1.000
shapecode_0_g=0.400
shapecode_0_b=0.300
shapecode_0_a=1.000
shapecode_0_r2=0.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=1.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.510
shape_0_per_frame1=sample=instance/num_inst;
shape_0_per_frame2=rad=.22*sample;
shape_0_per_frame3=r=sample;
shape_0_per_frame4=ang=(1-sample)*time*15;
shape_0_per_frame5=sides=(1-sample)* 14;
shape_0_per_frame6=
shape_0_per_frame7=
shape_0_per_frame8=t1 = sample+time*.2;
shape_0_per_frame9=mx = .4* (.6*sin (7*t1)+.4*sin (4.3*t1)) ;
shape_0_per_frame10=my = .4*  (.6*cos (3.3*t1)+.4*cos (6.9*t1))* sin (-10+20*sample) ;
shape_0_per_frame11=mz = .4* (.6*cos (4.1*t1)+.4*cos (6.9*t1)) * cos (-5+10*sample) ;
shape_0_per_frame12= 
shape_0_per_frame13=
shape_0_per_frame14=/////// rotations... by flexi
shape_0_per_frame15=
shape_0_per_frame16=d = 1; 
shape_0_per_frame17=zoom = 1;
shape_0_per_frame18=
shape_0_per_frame19=w1 = .3*time;
shape_0_per_frame20=w2 = .1*time;
shape_0_per_frame21=w3 = .2*time;
shape_0_per_frame22=
shape_0_per_frame23=x1 = cos(w1)*mx + sin(w1)*my;
shape_0_per_frame24=y1 = -sin(w1)*mx + cos(w1)*my;
shape_0_per_frame25=z1 = mz;
shape_0_per_frame26=
shape_0_per_frame27=x2 = cos(w2)*x1 + sin(w2)*z1;
shape_0_per_frame28=z2 = -sin(w2)*x1 + cos(w2)*z1;
shape_0_per_frame29=y2 = y1;
shape_0_per_frame30=
shape_0_per_frame31=y3 = cos(w3)*y2 + sin(w3)*z2;
shape_0_per_frame32=z3 = -sin(w3)*y2 + cos(w3)*z2;
shape_0_per_frame33=x3 = x2;
shape_0_per_frame34=
shape_0_per_frame35=
shape_0_per_frame36=// perspective calculation
shape_0_per_frame37=
shape_0_per_frame38=l = sqrt(x3*x3 + y3*y3);
shape_0_per_frame39=w = atan2(x3,y3);
shape_0_per_frame40=p = tan(asin(1) + atan2(d+z3,l));
shape_0_per_frame41=d = sqrt(x3*x3 + y3*y3 + (z3+d)*(z3+d));
shape_0_per_frame42=
shape_0_per_frame43=my_x = zoom*sin(w)*p;
shape_0_per_frame44=my_y = zoom*cos(w)*p;
shape_0_per_frame45=
shape_0_per_frame46=x = 0.5 + my_x;
shape_0_per_frame47=y = 0.5 + my_y;
shapecode_1_enabled=0
shapecode_1_sides=4
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.10000
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=1.000
shapecode_1_g=0.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=1.000
shapecode_1_b2=0.000
shapecode_1_a2=0.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.100
shapecode_2_enabled=0
shapecode_2_sides=4
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.10000
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=1.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=0.000
shapecode_2_g2=1.000
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.100
shapecode_3_enabled=0
shapecode_3_sides=4
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.10000
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=1.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=1.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.100
per_frame_1=//per frame less reactive volume for all unused q vars, put before other q vars are set for cop out mashing
per_frame_2=vb = vb*0.95 + (1-vb)*pow(bass_att,2)*0.02;
per_frame_3=vvb = vvb*0.95 + (1-vvb)*vb*0.01;
per_frame_4=vm = vm*0.95 + (1-vm)*pow(mid_att,2)*0.02;
per_frame_5=vvm = vvm*0.95 + (1-vvm)*vm*0.01;
per_frame_6=vt = vt*0.95 + (1-vt)*pow(treb_att,2)*0.02;
per_frame_7=vvt = vvt*0.95 + (1-vvt)*vt*0.01;
per_frame_8=vvb = min(1,max(0,vvb));
per_frame_9=vvm = min(1,max(0,vvm));
per_frame_10=vvt = min(1,max(0,vvt));
per_frame_11=q1 = vvb*2;//0.5 + vb - vvb;
per_frame_12=q2 = vvm*2;//0.5 + vm - vvm;
per_frame_13=q3 = vvt*2;//0.5 + vt - vvt;
per_frame_14=q4=(q1+q2+q3)*5;
per_frame_15=q5=(q1+q2+q3)*5;
per_frame_16=q6=(q1+q2+q3)*5;
per_frame_17=q7=(q1+q2+q3)*5;
per_frame_18=q8=(q1+q2+q3)*5;
per_frame_19=q9=(q1+q2+q3)*5;
per_frame_20=q10=(q1+q2+q3)*5;
per_frame_21=q11=(q1+q2+q3)*5;
per_frame_22=q12=(q1+q2+q3)*5;
per_frame_23=q13=(q1+q2+q3)*5;
per_frame_24=q14=(q1+q2+q3)*5;
per_frame_25=q15=(q1+q2+q3)*5;
per_frame_26=q16=(q1+q2+q3)*5;
per_frame_27=q17=(q1+q2+q3)*5;
per_frame_28=q18=(q1+q2+q3)*5;
per_frame_29=q19=(q1+q2+q3)*5;
per_frame_30=q20=(q1+q2+q3)*5;
per_frame_31=q21=(q1+q2+q3)*5;
per_frame_32=q22=(q1+q2+q3)*5;
per_frame_33=q23=(q1+q2+q3)*5;
per_frame_34=q24=(q1+q2+q3)*5;
per_frame_35=q25=(q1+q2+q3)*5;
per_frame_36=q26=(q1+q2+q3)*5;
per_frame_37=q27=(q1+q2+q3)*5;
per_frame_38=q28=(q1+q2+q3)*5;
per_frame_39=q29=(q1+q2+q3)*5;
per_frame_40=q30=(q1+q2+q3)*5;
per_frame_41=q31=(q1+q2+q3)*5;
per_frame_42=q32=(q1+q2+q3)*5;
per_frame_43=
per_frame_44=warp = 0;
per_frame_45=vol = (bass+mid+att)/6;
per_frame_46=xamptarg = if(equal(frame%15,0),min(0.5*vol*bass_att,0.5),xamptarg);
per_frame_47=xamp = xamp + 0.5*(xamptarg-xamp);
per_frame_48=xdir = if(above(abs(xpos),xamp),-sign(xpos),if(below(abs(xspeed),0.1),2*above(xpos,0)-1,xdir));
per_frame_49=xaccel = xdir*xamp - xpos - xspeed*0.055*below(abs(xpos),xamp);
per_frame_50=xspeed = xspeed + xdir*xamp - xpos - xspeed*0.055*below(abs(xpos),xamp);
per_frame_51=xpos = xpos + 0.001*xspeed;
per_frame_52=wave_x = xpos + 0.5;
per_frame_53=wave_mystery = wave_mystery + bass*.11;
per_frame_54=ob_b = .2 + .075*sin(time);
per_frame_55=chng=sin(time*.5);
per_frame_56=cthr=.9999;
per_frame_57=mq21=if(above(chng,cthr),rand(3),mq21);
per_frame_58=mq22=if(above(chng,cthr),rand(3),mq22);
per_frame_59=mq23=if(above(chng,cthr),rand(3),mq23);
per_frame_60=mq24=if(above(chng,cthr),rand(2),mq24);
per_frame_61=mq25=if(above(chng,cthr),rand(2),mq25);
per_frame_62=mq26=if(above(chng,cthr),rand(2),mq26);
per_frame_63=mq27=if(above(chng,cthr),rand(1),mq27);
per_frame_64=mq28=if(above(chng,cthr),rand(1),mq28);
per_frame_65=mq29=if(above(chng,cthr),rand(1)*.3,mq29);
per_frame_66=mq31=if(above(chng,cthr),rand(1)*.3,mq31);
per_frame_67=monitor=chng;
per_frame_68=q21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;
per_frame_69=q27=mq27;q28=mq28;q29=mq29;q31=mq31;
per_frame_70=
per_frame_71=monitor=mq1;
per_frame_72=vol=bass+treb+mid;
per_frame_73=atime=atime+vol;
per_frame_74=q11=.4+sin(atime*.006        )*.4;
per_frame_75=q12=.4+cos(atime*.00613828348)*.4;
per_frame_76=q13=.4+sin(atime*.00598593455)*.4;
per_frame_77=monitor=q13;
per_frame_78=q4=sin(atime*.03);
per_frame_79=q5=cos(atime*.030383824);
per_frame_80=q6=tan(atime*.029384834);
per_frame_81=
per_pixel_1=dy = dy - .005*y-.00173;
warp_1=`float2 complex_mul(float2 factorA, float2 factorB){
warp_2=`   return float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
warp_3=`}
warp_4=`
warp_5=`float2 complex_pow(float2 base, int exponent){
warp_6=`   float2 exponentiation = float2(1,0);
warp_7=`   for(int i = 0; i<exponent; i++){
warp_8=`      exponentiation = complex_mul(base,exponentiation);
warp_9=`   }
warp_10=`   return exponentiation;
warp_11=`}
warp_12=`
warp_13=`float2 complex_square(float2 domain){
warp_14=`   return complex_mul(domain,domain);
warp_15=`}
warp_16=`
warp_17=`float2 complex_div(float2 numerator, float2 denominator){
warp_18=`   return float2( numerator.x*denominator.x + numerator.y*denominator.y,
warp_19=`                  numerator.y*denominator.x - numerator.x*denominator.y)/
warp_20=`          (denominator.x*denominator.x + denominator.y*denominator.y);
warp_21=`}
warp_22=`
warp_23=`float2 uv_aspect(float2 uvo, float2 uvm, float2 aspectr, float2 motion_scale){
warp_24=`   return 0.5 + (lerp(uvo,uvm,motion_scale)-0.5)*aspectr;
warp_25=`}
warp_26=`
warp_27=`float2 uv_scale(float2 domain, float2 center, float2 scale){
warp_28=`   return center + (domain-center)*scale;
warp_29=`}
warp_30=`
warp_31=`float2 uv_torus_mirror(float2 domain, float cutoff){
warp_32=`   return 0.5 + (1.0 - abs( frac( domain * 0.5 ) * 2 - 1.0 )-0.5)*cutoff;
warp_33=`}
warp_34=`
warp_35=`float2 uv_polar(float2 domain, float2 center){
warp_36=`   float2 c = domain - center;
warp_37=`   float rad_hq = length(c);
warp_38=`   float ang_hq = atan2(c.x,c.y);
warp_39=`   return float2(ang_hq*M_INV_PI_2, rad_hq);
warp_40=`}
warp_41=`
warp_42=`float2 uv_polar_logarithmic(float2 domain, float2 center, int fins, float log_factor, float2 coord){
warp_43=`   float2 polar = uv_polar(domain, center);
warp_44=`   return float2(polar.x*fins+coord.x, log_factor*log(1/polar.y) + coord.y);
warp_45=`}
warp_46=`
warp_47=`float2 uv_moebius_transformation(float2 domain, float2 zeroPoint, float2 infinityPoint,float zoom){
warp_48=`   return complex_div((domain - zeroPoint)*zoom, domain - infinityPoint)+0.5;
warp_49=`}
warp_50=`
warp_51=`float2 uv_bipolar_logarithmic(float2 domain, float2 northPole, float2 southPole, int fins, float log_factor, float2 coord){
warp_52=`   float2 help_uv = uv_moebius_transformation(domain, northPole, southPole, 1);
warp_53=`   return uv_polar_logarithmic(help_uv,0.5,fins,log_factor,coord);
warp_54=`}
warp_55=`
warp_56=`bool mask_rectangle(float2 domain, float2 position, float2 dimensions){
warp_57=`   return (domain.x>position.x-dimensions.x)*(domain.x<position.x+dimensions.x)*
warp_58=`          (domain.y>position.y-dimensions.y)*(domain.y<position.y+dimensions.y);
warp_59=`}
warp_60=`
warp_61=`bool mask_circle(float2 domain, float2 position, float radius){
warp_62=`   return length(domain-position)<radius;
warp_63=`}
warp_64=`
warp_65=`bool mask_spiral_logarithmic(float2 domain, float2 center, int fins, float thickness, float spiral_factor, float zoom){
warp_66=`   float2 c = domain - center;
warp_67=`   float rad_hq = length(c);
warp_68=`   float ang_hq = atan2(c.x,c.y);
warp_69=`
warp_70=`   return frac(fins*ang_hq*M_INV_PI_2 + spiral_factor*log(1/rad_hq)+zoom)<thickness;
warp_71=`}
warp_72=`
warp_73=`float figure_spiral(float2 domain, float2 center, int fins, float thickness, float spiral_factor, float zoom){
warp_74=`   float2 c = domain - center;
warp_75=`   float rad_hq = length(c);
warp_76=`   float ang_hq = atan2(c.x,c.y);
warp_77=`
warp_78=`   return frac(fins*ang_hq*M_INV_PI_2 + spiral_factor*log(1/rad_hq)+zoom)<thickness;
warp_79=`}
warp_80=`
warp_81=`float figure_circle(float2 domain, float2 position, float radius){
warp_82=`   return saturate(1-length(domain-position)/radius);
warp_83=`}
warp_84=`
warp_85=`float figure_border(float2 domain, float thickness){
warp_86=`   float2 help_uv = frac(domain-0.5);
warp_87=`   help_uv = min(help_uv,1-help_uv)*2;
warp_88=`   return saturate(max(help_uv.x,help_uv.y)-1+thickness)/(thickness);
warp_89=`}
warp_90=`
warp_91=`shader_body
warp_92=`{
warp_93=`float2 base_uv = uv_aspect(uv_orig, uv, aspect.wz, 5);
warp_94=`float2 northPole = float2(0.25,0.5);
warp_95=`float2 southPole = float2(0.75,0.5);
warp_96=`int fins = 4;
warp_97=`float log_factor = 0.6;
warp_98=`float2 coord = float2(q32,q31);
warp_99=`
warp_100=`float2 bipolar_uv = uv_bipolar_logarithmic(base_uv, northPole, southPole, fins, log_factor, coord );
warp_101=`
warp_102=`ret = figure_border(bipolar_uv,0.15)*float3(0,0,1);
warp_103=`log_factor = 1;
warp_104=`coord = float2(0,-q30);
warp_105=`bipolar_uv = uv_torus_mirror(bipolar_uv,1);
warp_106=`float2 polar_uv = uv_polar_logarithmic(bipolar_uv,0.5,fins,log_factor,coord);
warp_107=`
warp_108=`float4 noise9 = tex3D(sampler_noisevol_hq, 
warp_109=`                      ((uv.xyy*q27
warp_110=`                       )*texsize.xyy*texsize_noisevol_hq.zww
warp_111=`                      ).xyz*
warp_112=`                      float3(1,1,0)*0.05 + 
warp_113=`                      time*float3(0,0,1)*q29
warp_114=`                     );
warp_115=`if(ret.x> q21*q13         && ret.x<= q24*q11        )ret.y -= (noise9).x*.5; 
warp_116=`if(ret.y> q22*q11         && ret.y<= q25*q12        )ret.z -= (noise9).y*.5; 
warp_117=`if(ret.z> q23*q12         && ret.z<= q26*q13        )ret.x -= (noise9).z*.5; 
warp_118=`ret = lerp(ret,float3(1,0,0),figure_border(polar_uv,0.25));
warp_119=`
warp_120=`ret.y = GetPixel(saturate(uv)).y;
warp_121=`}
comp_1=`shader_body
comp_2=`{
comp_3=`
comp_4=`float3 orig=tex2D(sampler_main,uv);
comp_5=`float3 nex=tex2D(sampler_main,float2(uv.x+0.001,uv.y));
comp_6=`
comp_7=`if(abs(orig.x+orig.y+orig.z-nex.x-nex.y-nex.z)>0.1)
comp_8=`{ret=GetBlur2(uv);}
comp_9=`else{ret=GetBlur3(uv);}; 
comp_10=`
comp_11=`ret += 1.5*GetBlur3(uv)-GetBlur1(uv);
comp_12=`
comp_13=`float4 noise9 = tex3D(sampler_noisevol_hq, 
comp_14=`                      ((uv.xyy*q28
comp_15=`                       )*texsize.xyy*texsize_noisevol_hq.zww
comp_16=`                      ).xyz*
comp_17=`                      float3(1,1,0)*0.05 + 
comp_18=`                      time*float3(0,0,1)*q31
comp_19=`                     );
comp_20=`if(ret.x> q26*q13         && ret.x<= q23*q11        )ret.z -= (noise9).x*.5; 
comp_21=`if(ret.y> q25*q11         && ret.y<= q22*q12        )ret.x -= (noise9).y*.5; 
comp_22=`if(ret.z> q24*q12         && ret.z<= q21*q13        )ret.y -= (noise9).z*.5; 
comp_23=`ret *= 2.25;
comp_24=`ret = lum(ret);
comp_25=`float3 hue_shader_x = (hue_shader*(1+treb_att))-(treb_att-1.75);
comp_26=`ret = lerp(.75*ret,ret*(GetBlur3(uv)-GetBlur1(uv)),(0.1*rand_preset+0.5*hue_shader_x+0.5*_qa.xyz)*ret);
comp_27=`ret *= ret; //darken
comp_28=`//ret *= ret;
comp_29=`//ret *= sqrt(ret); //brighten
comp_30=`//ret = 1-ret; //invert
comp_31=`}
