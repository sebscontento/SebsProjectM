MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=3.000
fGammaAdj=1.000
fDecay=0.980
fVideoEchoZoom=2.000
fVideoEchoAlpha=0.000
nVideoEchoOrientation=0
nWaveMode=0
bAdditiveWaves=0
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=0
bMaximizeWaveColor=1
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.004
fWaveScale=0.037
fWaveSmoothing=0.000
fWaveParam=-0.440
fModWaveAlphaStart=1.000
fModWaveAlphaEnd=1.000
fWarpAnimSpeed=0.803
fWarpScale=1.220
fZoomExponent=1.50374
fShader=0.000
zoom=1.00000
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.31218
sx=1.00000
sy=1.00000
wave_r=1.000
wave_g=1.000
wave_b=1.000
wave_x=0.500
wave_y=0.040
ob_size=0.005
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.000
ib_r=1.000
ib_g=0.000
ib_b=0.750
ib_a=1.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.000
mv_r=1.000
mv_g=1.000
mv_b=0.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=452
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=1
wavecode_0_scaling=2.44415
wavecode_0_smoothing=0.00000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=0.570
wave_0_init1=t2 = 0;
wave_0_init2=t3 = 0;
wave_0_init3=t4 = 0;
wave_0_init4=cl = 0;
wave_0_per_frame1=t1 = 0;
wave_0_per_frame2=t2 = 0;
wave_0_per_point1=ppo = 9;
wave_0_per_point2=index = t2*q32;
wave_0_per_point3=sample = t1 % ppo;
wave_0_per_point4=
wave_0_per_point5=nindex = gmegabuf(index + 10)*q32; // the next neighbor's index
wave_0_per_point6=nnindex = gmegabuf(index + 11)*q32; // the next neighbor's index
wave_0_per_point7=nnnindex = gmegabuf(index + 12)*q32; // the next neighbor's index
wave_0_per_point8=
wave_0_per_point9=x = gmegabuf(index);
wave_0_per_point10=y = gmegabuf(index+1);
wave_0_per_point11=r = 0.5 + gmegabuf(index+5)*0.5;
wave_0_per_point12=g = 0.5 + gmegabuf(index+6)*0.5;
wave_0_per_point13=b = 0.5 + gmegabuf(index+7)*0.5;
wave_0_per_point14=
wave_0_per_point15=nx = gmegabuf(nindex);
wave_0_per_point16=ny = gmegabuf(nindex+1);
wave_0_per_point17=nnx = gmegabuf(nnindex);
wave_0_per_point18=nny = gmegabuf(nnindex+1);
wave_0_per_point19=nnnx = gmegabuf(nnnindex);
wave_0_per_point20=nnny = gmegabuf(nnnindex+1);
wave_0_per_point21=
wave_0_per_point22=x = 0.5 + (x-0.5)/q2;
wave_0_per_point23=y = 0.5 + (y-0.5)/q2;
wave_0_per_point24=nx = 0.5 + (nx-0.5)/q2;
wave_0_per_point25=ny = 0.5 + (ny-0.5)/q2;
wave_0_per_point26=nnx = 0.5 + (nnx-0.5)/q2;
wave_0_per_point27=nny = 0.5 + (nny-0.5)/q2;
wave_0_per_point28=nnnx = 0.5 + (nnnx-0.5)/q2;
wave_0_per_point29=nnny = 0.5 + (nnny-0.5)/q2;
wave_0_per_point30=
wave_0_per_point31=x = if( equal(sample,2), nx, x);
wave_0_per_point32=y = if( equal(sample,2), ny, y);
wave_0_per_point33=x = if( equal(sample,4), nnx, x);
wave_0_per_point34=y = if( equal(sample,4), nny, y);
wave_0_per_point35=x = if( equal(sample,6), nnnx, x);
wave_0_per_point36=y = if( equal(sample,6), nnny, y);
wave_0_per_point37=
wave_0_per_point38=a = above(sample,1)*below(sample,ppo-1)*a;
wave_0_per_point39=
wave_0_per_point40=t1 = t1 + 1;
wave_0_per_point41=t2 = if( equal(t1%ppo,0), t2 +1, t2);
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=7.75180
wavecode_1_smoothing=0.00000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=0.210
wave_1_init1=t2 = 0;
wave_1_init2=t3 = 0;
wave_1_init3=t4 = 0;
wave_1_init4=cl = 0;
wave_1_per_frame1=t8 = 1;
wave_1_per_frame2=
wave_1_per_frame3=t1 = 0.5;
wave_1_per_frame4=t2 = 0.9;
wave_1_per_point1=d = d*0.85 + (value1)*1;
wave_1_per_point2=
wave_1_per_point3=x = 0.5 + d*sample*(1-sample);
wave_1_per_point4=y = 0.9 - sample*0.8;
wavecode_2_enabled=0
wavecode_2_samples=280
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=1
wavecode_2_scaling=5.92556
wavecode_2_smoothing=0.00000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=0.500
wave_2_per_frame1=t1 = 0;
wave_2_per_frame2=t2 = 0;
wave_2_per_frame3=
wave_2_per_frame4=
wave_2_per_point1=// q32 number of attributes
wave_2_per_point2=// q31 number of objects
wave_2_per_point3=
wave_2_per_point4=ppo = 7; // number of points used for each object
wave_2_per_point5=index = t2*q32; // object's index
wave_2_per_point6=
wave_2_per_point7=x = 0.5 +(gmegabuf(index)-0.5)/q2;
wave_2_per_point8=y = 0.5 + (gmegabuf(index+1)-0.5)/q2;
wave_2_per_point9=
wave_2_per_point10=// collecting pairs of index and distance to the current object in a local buffer
wave_2_per_point11=i = 0;
wave_2_per_point12=j = 0; 
wave_2_per_point13=loop(q31,
wave_2_per_point14=     d = sqrt( sqr(gmegabuf(index)-gmegabuf(i)) + sqr(gmegabuf(index+1)-gmegabuf(i+1)));
wave_2_per_point15=     d = if( equal(d,0), 1, d);
wave_2_per_point16=     megabuf(j)   = i; // store index/distance pairs
wave_2_per_point17=     megabuf(j+1) = d; 
wave_2_per_point18=     j = j+2;
wave_2_per_point19=     i = i+q32;
wave_2_per_point20=    );
wave_2_per_point21=
wave_2_per_point22=// sort that buffer, but only 5 cycles for the 5 nearest objects
wave_2_per_point23=i = 0;
wave_2_per_point24=loop( 5,
wave_2_per_point25=      j = i;
wave_2_per_point26=      smallestfind = 100;
wave_2_per_point27=      findindex = 0;
wave_2_per_point28=      loop( q31-j,
wave_2_per_point29=            distance =megabuf(j*2+1);
wave_2_per_point30=            smaller = above( smallestfind, distance);
wave_2_per_point31=            smallestfind = if(smaller, distance, smallestfind);
wave_2_per_point32=            findindex = if( smaller, j*2, findindex);
wave_2_per_point33=            j = j + 1;
wave_2_per_point34=          );
wave_2_per_point35=
wave_2_per_point36=      // now that the nearest object was found, swap it to the buffer's top
wave_2_per_point37=
wave_2_per_point38=      j = megabuf(i);
wave_2_per_point39=      d = megabuf(i+1);
wave_2_per_point40=
wave_2_per_point41=      megabuf(i)   = megabuf(findindex);
wave_2_per_point42=      megabuf(i+1) = megabuf(findindex+1);
wave_2_per_point43=      megabuf(findindex)   = j;
wave_2_per_point44=      megabuf(findindex+1) = d;
wave_2_per_point45=
wave_2_per_point46=      i = i+1;
wave_2_per_point47=    );
wave_2_per_point48=
wave_2_per_point49=
wave_2_per_point50=index2 = (t1)%ppo;
wave_2_per_point51=i = megabuf(index2-2);
wave_2_per_point52=xx = 0.5 + (gmegabuf(i)-0.5)/q2;
wave_2_per_point53=yy = 0.5 + (gmegabuf(i+1)-0.5)/q2;
wave_2_per_point54=w = asin(1)*index2/4;
wave_2_per_point55=//xx = x + sin(w)*0.1;
wave_2_per_point56=//yy = y + cos(w)*0.1;
wave_2_per_point57=x = if( equal(index2%2,0), x, xx);
wave_2_per_point58=y = if( equal(index2%2,0), y, yy);
wave_2_per_point59=
wave_2_per_point60=
wave_2_per_point61=a = below(index2,ppo-1)*above(index2,1)*a;
wave_2_per_point62=r = 0.5 + gmegabuf(index + 5)*0.5;
wave_2_per_point63=g = 0.5 + gmegabuf(index + 6)*0.5;
wave_2_per_point64=b = 0.5 + gmegabuf(index + 7)*0.5;
wave_2_per_point65=
wave_2_per_point66=
wave_2_per_point67=t2 = t2 + equal(t1%ppo,ppo-1);
wave_2_per_point68=t1 = t1 + 1;
wave_2_per_point69=
wave_2_per_point70=//a = above(t1,128);
wavecode_3_enabled=0
wavecode_3_samples=15
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=1
wavecode_3_scaling=5.92556
wavecode_3_smoothing=0.00000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=0.400
wave_3_init1=t2 = 0
wave_3_per_frame1=t1 = 0;
wave_3_per_frame2=t2 = 0;
wave_3_per_frame3=t3 = 0;
wave_3_per_frame4=t4 = 0.5;
wave_3_per_point1=ppo = 5;
wave_3_per_point2=
wave_3_per_point3=index = t2*q32;
wave_3_per_point4=neighbor = 1;
wave_3_per_point5=neighbor = gmegabuf(index+10+neighbor);
wave_3_per_point6=x = 0.5 + (gmegabuf(index)-0.5)/q2;
wave_3_per_point7=y = 0.5 + (gmegabuf(index+1)-0.5)/q2;
wave_3_per_point8=xx = 0.5 + ( gmegabuf(neighbor) - 0.5)/q2;
wave_3_per_point9=yy = 0.5 + ( gmegabuf(neighbor+1) - 0.5)/q2;
wave_3_per_point10=
wave_3_per_point11=x = if( equal(t1 % 2, 0), x, xx);
wave_3_per_point12=y = if( equal(t1 % 2, 0), y, yx);
wave_3_per_point13=
wave_3_per_point14=
wave_3_per_point15=t2 = t2 + equal(t1,ppo);
wave_3_per_point16=t1 = if(above(t1,ppo),t1-ppo,t1) + 1;
wave_3_per_point17=
shapecode_0_enabled=1
shapecode_0_sides=100
shapecode_0_additive=1
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=100
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.01000
shapecode_0_ang=3.20442
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=6.23873
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=0.620
shapecode_0_r2=1.000
shapecode_0_g2=1.000
shapecode_0_b2=1.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shape_0_per_frame1=index = instance*q32;
shape_0_per_frame2=
shape_0_per_frame3=x = gmegabuf(index);
shape_0_per_frame4=y = gmegabuf(index+1);
shape_0_per_frame5=
shape_0_per_frame6=rad = gmegabuf(index+4)*2;
shape_0_per_frame7=
shape_0_per_frame8=r = gmegabuf(index+5);
shape_0_per_frame9=g = gmegabuf(index+6);
shape_0_per_frame10=b = gmegabuf(index+7);
shape_0_per_frame11=
shape_0_per_frame12=r2 = r; g2 = g; b2 = b;
shape_0_per_frame13=
shape_0_per_frame14=
shape_0_per_frame15=x = 0.5 + (x-0.5)/q2;
shapecode_1_enabled=1
shapecode_1_sides=32
shapecode_1_additive=1
shapecode_1_thickOutline=1
shapecode_1_textured=0
shapecode_1_num_inst=33
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.10000
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=0.000
shapecode_1_g=0.500
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.500
shapecode_1_b2=0.000
shapecode_1_a2=0.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.000
shape_1_per_frame1=trans = rand(int(q30))/15+instance-instance;
shape_1_per_frame2=trans2 = rand(int(q30))/15+instance-instance;
shape_1_per_frame3=trans3 = rand(int(q30))/15+instance-instance;
shape_1_per_frame4=a = trans;
shape_1_per_frame5=
shape_1_per_frame6=x = .5 + int(rand(15))*0.01*bass_att*if(equal(int(rand(2)),1),1,-1)+instance-instance;
shape_1_per_frame7=y = .5 + int(rand(15))*0.01*bass_att*if(equal(int(rand(2)),1),1,-1)+instance-instance;
shape_1_per_frame8=rad = .09 + rand(int(q30))/15+instance-instance;
shape_1_per_frame9=r=rand(q30)*.1+instance-instance;
shape_1_per_frame10=g=rand(q30)*.1+instance-instance;
shape_1_per_frame11=b=rand(q30)*.1+instance-instance;
shape_1_per_frame12=r2=rand(q30)*.1+instance-instance;
shape_1_per_frame13=g2=rand(q30)*.1+instance-instance;
shape_1_per_frame14=b2=rand(q30)*.1+instance-instance;
shape_1_per_frame15=border_r=rand(q30)*.1+instance-instance;
shape_1_per_frame16=border_g=rand(q30)*.1+instance-instance;
shape_1_per_frame17=border_b=rand(q30)*.1+instance-instance;
shapecode_2_enabled=1
shapecode_2_sides=20
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1024
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.01000
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.26465
shapecode_2_r=0.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=0.340
shapecode_2_r2=0.000
shapecode_2_g2=0.000
shapecode_2_b2=0.000
shapecode_2_a2=0.100
shapecode_2_border_r=0.000
shapecode_2_border_g=0.000
shapecode_2_border_b=0.000
shapecode_2_border_a=0.000
shape_2_init1=//samples = 256 + 50*sin(time*.939493949);
shape_2_init2=//num_inst = 256 + 50*sin(time*.939493949);
shape_2_init3=//samples = .5 + sin(time*.939493949);
shape_2_init4=num_inst = .5 + sin(time*.939493949);
shape_2_per_frame1=
shape_2_per_frame2=sample = instance/1024;
shape_2_per_frame3=//num_inst = .5 + sin(time*.939493949);
shape_2_per_frame4=tm = q1;
shape_2_per_frame5=sp = sample*6.28*8*6*sin(time)*100;
shape_2_per_frame6=
shape_2_per_frame7=vol = (value1+value2)*.5;
shape_2_per_frame8=it = it*above(sample,0);
shape_2_per_frame9=it = it + 1;
shape_2_per_frame10=//rad = .5 + vol + .01;
shape_2_per_frame11=rad2=1.3;
shape_2_per_frame12=ra = rad2*sin(sample*3.14);
shape_2_per_frame13=ox = ra*sin(sp);
shape_2_per_frame14=oy = sin(sample*3.14-1.57)*rad2;
shape_2_per_frame15=oz = ra*cos(sp);
shape_2_per_frame16=
shape_2_per_frame17=xang = q4;
shape_2_per_frame18=yang = q5;
shape_2_per_frame19=zang = q6;
shape_2_per_frame20=fov = .5;
shape_2_per_frame21=
shape_2_per_frame22=mx = ox*cos(zang) - oy*sin(zang);
shape_2_per_frame23=my = ox*sin(zang) + oy*cos(zang);
shape_2_per_frame24=ox = mx;
shape_2_per_frame25=oy = my;
shape_2_per_frame26=mx = ox*cos(yang) + oz*sin(yang);
shape_2_per_frame27=mz = - ox*sin(yang) + oz*cos(yang);
shape_2_per_frame28=ox = mx;
shape_2_per_frame29=oz = mz;
shape_2_per_frame30=my = oy*cos(xang) - oz*sin(xang);
shape_2_per_frame31=mz = oy*sin(xang) + oz*cos(xang);
shape_2_per_frame32=oy = my;
shape_2_per_frame33=oz = mz;
shape_2_per_frame34=
shape_2_per_frame35=yang = q8;
shape_2_per_frame36=oz = oz + 5;
shape_2_per_frame37=rad=rad*instance*.0041;//3d
shape_2_per_frame38=
shape_2_per_frame39=mx = ox*cos(yang) + oz*sin(yang);
shape_2_per_frame40=mz = - ox*sin(yang) + oz*cos(yang);
shape_2_per_frame41=ox = mx;
shape_2_per_frame42=oz = mz;
shape_2_per_frame43=
shape_2_per_frame44=oz = oz - 5;
shape_2_per_frame45=
shape_2_per_frame46=oz = oz - 2;
shape_2_per_frame47=x = ox*fov/oz + 0.5;
shape_2_per_frame48=x = (x-.5)*0.75 + 0.5;
shape_2_per_frame49=y = oy*fov/oz + 0.5;
shape_2_per_frame50=
shapecode_3_enabled=0
shapecode_3_sides=64
shapecode_3_additive=1
shapecode_3_thickOutline=1
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.16283
shapecode_3_ang=0.75398
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.73458
shapecode_3_r=0.000
shapecode_3_g=1.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=1.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.000
shape_3_init1=vx = 0
per_frame_init_1=// clear buffer
per_frame_init_2=i = 0; loop(1024*1024, gmegabuf(i) = 0; i = i+1);
per_frame_init_3=
per_frame_init_4=count = 50;
per_frame_init_5=attributes = 40;
per_frame_init_6=
per_frame_init_7=minradius = 0.025;
per_frame_init_8=maxradius = 0.0545;
per_frame_init_9=v = 0.05;
per_frame_init_10=
per_frame_init_11=// randomize initial coordinates
per_frame_init_12=index = 0;
per_frame_init_13=loop(count, 
per_frame_init_14=     gmegabuf(index*attributes) = rand(1000)/1000;
per_frame_init_15=     gmegabuf(index*attributes+1) = rand(1000)/1000;
per_frame_init_16=     gmegabuf(index*attributes+2) = v*(rand(1000)/1000-0.5);
per_frame_init_17=     gmegabuf(index*attributes+3) = v*(rand(1000)/1000-0.5);
per_frame_init_18=     gmegabuf(index*attributes+4) = minradius + (maxradius-minradius)*(index+1)/count;
per_frame_init_19=     gmegabuf(index*attributes+5) = rand(1000)/1000;
per_frame_init_20=     gmegabuf(index*attributes+6) = rand(1000)/1000;
per_frame_init_21=     gmegabuf(index*attributes+7) = rand(1000)/1000;
per_frame_init_22=     gmegabuf(index*attributes+8) = sqr(gmegabuf(index*attributes+4)) ;
per_frame_init_23=     index = index+1;
per_frame_init_24=    );
per_frame_init_25=
per_frame_init_26=q31 = count;
per_frame_init_27=q32 = attributes;
per_frame_init_28=
per_frame_init_29=// 0, x
per_frame_init_30=// 1, y
per_frame_init_31=// 2, vx
per_frame_init_32=// 3, vy
per_frame_init_33=// 4, radius
per_frame_init_34=// 5, red
per_frame_init_35=// 6, green
per_frame_init_36=// 7, blue
per_frame_init_37=// 8, mass
per_frame_1=chng=sin(time*.5);
per_frame_2=cthr=.9999;
per_frame_3=mq21=if(above(chng,cthr),rand(3),mq21);
per_frame_4=mq22=if(above(chng,cthr),rand(3),mq22);
per_frame_5=mq23=if(above(chng,cthr),rand(3),mq23);
per_frame_6=mq24=if(above(chng,cthr),rand(2),mq24);
per_frame_7=mq25=if(above(chng,cthr),rand(2),mq25);
per_frame_8=mq26=if(above(chng,cthr),rand(2),mq26);
per_frame_9=mq27=if(above(chng,cthr),rand(1),mq27);
per_frame_10=mq28=if(above(chng,cthr),rand(1),mq28);
per_frame_11=mq29=if(above(chng,cthr),rand(1)*.3,mq29);
per_frame_12=mq31=if(above(chng,cthr),rand(1)*.3,mq31);
per_frame_13=monitor=chng;
per_frame_14=q21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;
per_frame_15=q27=mq27;q28=mq28;q29=mq29;q31=mq31;
per_frame_16=
per_frame_17=monitor=mq1;
per_frame_18=vol=bass+treb+mid;
per_frame_19=atime=atime+vol;
per_frame_20=q11=.4+sin(atime*.006        )*.4;
per_frame_21=q12=.4+cos(atime*.00613828348)*.4;
per_frame_22=q13=.4+sin(atime*.00598593455)*.4;
per_frame_23=monitor=q13;
per_frame_24=q4=sin(atime*.03);
per_frame_25=q5=cos(atime*.030383824);
per_frame_26=q6=tan(atime*.029384834);
per_frame_27=warp = 0;
per_frame_28=zoom = 1;
per_frame_29=
per_frame_30=gravity = 0.005/fps*0;
per_frame_31=dampening = 1;
per_frame_32=pi2 = asin(1);
per_frame_33=
per_frame_34=
per_frame_35=nn = 3; // number of nearest neighbors to search, reduce if not needed!
per_frame_36=        // collision detection is based on nearest neighbors now, so keep it at least at 1.
per_frame_37=
per_frame_38=check = 2; // how many neighbors will be checked for a possible collision. may not be above nn.
per_frame_39=           // raise to avoid odd behavior in clusters of touching balls.
per_frame_40=
per_frame_41=index = 0; index2 = 0;  w = (aspecty-aspectx)/2;
per_frame_42=loop(count, 
per_frame_43=     // simple physics: adding velocity vectors, applying gravity + bouncing off borders
per_frame_44=     gmegabuf(index*attributes+1) = gmegabuf(index*attributes+1) + gmegabuf(index*attributes+3);
per_frame_45=     gmegabuf(index*attributes) = gmegabuf(index*attributes) + gmegabuf(index*attributes+2);
per_frame_46=     gmegabuf(index*attributes+2) = if( below( gmegabuf(index*attributes), 0-w+gmegabuf(index*attributes+4)),
per_frame_47=                                        abs(gmegabuf(index*attributes+2))*dampening,
per_frame_48=                                        gmegabuf(index*attributes+2) ); 
per_frame_49=     gmegabuf(index*attributes+2) = if( above( gmegabuf(index*attributes), 1+w-gmegabuf(index*attributes+4)),
per_frame_50=                                        -abs(gmegabuf(index*attributes+2))*dampening,
per_frame_51=                                        gmegabuf(index*attributes+2) ); 
per_frame_52=     gmegabuf(index*attributes+3) = gmegabuf(index*attributes+3) - gravity;
per_frame_53=     gmegabuf(index*attributes+3) = if( below( gmegabuf(index*attributes+1), gmegabuf(index*attributes+4)),
per_frame_54=                                        abs(gmegabuf(index*attributes+3))*dampening,
per_frame_55=                                        gmegabuf(index*attributes+3); );
per_frame_56=     gmegabuf(index*attributes+3) = if( above( gmegabuf(index*attributes+1), 1-gmegabuf(index*attributes+4)),
per_frame_57=                                        -abs(gmegabuf(index*attributes+3))*dampening,
per_frame_58=                                        gmegabuf(index*attributes+3); );
per_frame_59=     i = 0; j = 0; // collecting pairs of index and distance to the current object in a local buffer
per_frame_60=     loop( count,
per_frame_61=           d = sqrt( sqr(gmegabuf(index*attributes)-gmegabuf(i*attributes)) + sqr(gmegabuf(index*attributes+1)-gmegabuf(i*attributes+1)));
per_frame_62=           d = if( equal(d,0), 10, d); // leave out comparison with itself (where d == 0, set d to a high value)
per_frame_63=           d = d - (gmegabuf(index*attributes+4)+gmegabuf(i*attributes+4))*0.5; // subtract radius (surface to surface distance)
per_frame_64=           megabuf(j)   = i; // store index/distance pairs
per_frame_65=           megabuf(j+1) = d; 
per_frame_66=           j = j+2;
per_frame_67=           i = i+1; );
per_frame_68=     i = 0; // sort that buffer, but only as many cycles as needed for the _nn_ nearest neighbors
per_frame_69=     loop( nn,
per_frame_70=           j = i; smallestfind = 10; findindex = -1;
per_frame_71=           loop( count-j,
per_frame_72=                 distance =megabuf(j*2+1);
per_frame_73=                 smaller = above( smallestfind, distance);
per_frame_74=                 smallestfind = if(smaller, distance, smallestfind);
per_frame_75=                 findindex = if( smaller, j*2, findindex);
per_frame_76=                 j = j + 1; );
per_frame_77=           j = megabuf(i*2); d = megabuf(i*2+1);
per_frame_78=           megabuf(i*2)   = megabuf(findindex);
per_frame_79=           megabuf(i*2+1) = megabuf(findindex+1);
per_frame_80=           megabuf(findindex)   = j;
per_frame_81=           megabuf(findindex+1) = d;
per_frame_82=           i = i+1;
per_frame_83=         );
per_frame_84=     i = 0; // storing the indexes of the nearest neighbors in the attributes beginning from 10
per_frame_85=     loop( nn,
per_frame_86=           gmegabuf(index*attributes + 10 + i) = megabuf(i*2);
per_frame_87=           i = i +1;
per_frame_88=         );
per_frame_89=     i = 0; // collision detection and impulse transmission below
per_frame_90=     loop( check,
per_frame_91=           index2 = megabuf(i);
per_frame_92=           hit = below( sqrt( sqr( gmegabuf(index*attributes) - gmegabuf(index2*attributes)) +
per_frame_93=                              sqr( gmegabuf(index*attributes+1) - gmegabuf(index2*attributes+1))),
per_frame_94=                        gmegabuf(index*attributes + 4) + gmegabuf(index2*attributes + 4)
per_frame_95=                      )
per_frame_96=                 *
per_frame_97=                 above( sqrt( sqr( gmegabuf(index*attributes)   - gmegabuf(index2*attributes))+
per_frame_98=                        sqr( gmegabuf(index*attributes+1) - gmegabuf(index2*attributes+1))),
per_frame_99=                        sqrt( sqr( gmegabuf(index*attributes+0) - gmegabuf(index2*attributes+0)+ 
per_frame_100=                                   gmegabuf(index*attributes+2) - gmegabuf(index2*attributes+2))+
per_frame_101=                              sqr( gmegabuf(index*attributes+1) - gmegabuf(index2*attributes+1)+
per_frame_102=                                   gmegabuf(index*attributes+3) - gmegabuf(index2*attributes+3)) ) );
per_frame_103=           ref_ang = atan2( gmegabuf(index2*attributes)-gmegabuf(index*attributes), // calculating the angle of the common tangent
per_frame_104=                            gmegabuf(index2*attributes + 1)-gmegabuf(index*attributes + 1)) + pi2;
per_frame_105=           v1 = sqrt(sqr( gmegabuf(index*attributes + 2)) + sqr( gmegabuf(index*attributes + 3))); // velocity of object1
per_frame_106=           v2 = sqrt(sqr( gmegabuf(index2*attributes + 2)) + sqr( gmegabuf(index2*attributes + 3)));  // velocity of object2
per_frame_107=           w1 = atan2( gmegabuf(index*attributes + 2), gmegabuf(index*attributes + 3));   // object1 motion angle
per_frame_108=           w2 = atan2( gmegabuf(index2*attributes + 2), gmegabuf(index2*attributes + 3)); // object2 motion angle
per_frame_109=           m1 = gmegabuf(index*attributes + 8); m2 = gmegabuf(index2*attributes + 8);
per_frame_110=           vv1 = ((m1-m2)*v1 + 2*m2*v2)/(m1+m2); vv2 = ((m2-m1)*v2 + 2*m1*v1)/(m1+m2);
per_frame_111=           gmegabuf( index*attributes + 2) = if( hit,sin(ref_ang)*v1*cos(w1-ref_ang) + sin(ref_ang+pi2)*vv1*cos(w2-ref_ang-pi2),
per_frame_112=                                                  gmegabuf( index*attributes + 2) );
per_frame_113=           gmegabuf( index*attributes + 3) = if( hit, cos(ref_ang)*v1*cos(w1-ref_ang) + cos(ref_ang+pi2)*vv1*cos(w2-ref_ang-pi2),
per_frame_114=                                                 gmegabuf( index*attributes + 3) );
per_frame_115=           gmegabuf( index2*attributes + 2) = if( hit, sin(ref_ang)*v2*cos(w2-ref_ang) + sin(ref_ang+pi2)*vv2*cos(w1-ref_ang-pi2),
per_frame_116=                                                  gmegabuf( index2*attributes + 2) );
per_frame_117=           gmegabuf( index2*attributes + 3) = if( hit, cos(ref_ang)*v2*cos(w2-ref_ang) + cos(ref_ang+pi2)*vv2*cos(w1-ref_ang-pi2),
per_frame_118=                                                  gmegabuf( index2*attributes + 3) );
per_frame_119=           i=i+2;
per_frame_120=         );
per_frame_121=     index = index+1;
per_frame_122=    );
per_frame_123=q1 = aspectx;
per_frame_124=q2 = aspecty;
per_frame_125=q30=(bass+treb+mid)*2;
warp_1=`float2 uv1,uv2,uv3,uv4,uv5,rsk,dz1,Kugel1;
warp_2=`float stone, ray1, sun1, rad1, mask2, mask1, trel;
warp_3=`float3 light;
warp_4=`static float2 lpos1 = float2(q13,q14);
warp_5=`static const float iter6 =1;
warp_6=`static const float clip1 = (rand_preset.x >= .5)+1;
warp_7=` 
warp_8=` float2 cpow(float2 base, float ex) {
warp_9=`   float moduz = sqrt(base.x*base.x + base.y*base.y);
warp_10=`   float thetaz = atan2(base.y, base.x);
warp_11=`   float2 pow = float2(pow(moduz, ex)*cos(thetaz*ex), pow(moduz, ex)*sin(thetaz*ex));
warp_12=`   return pow; }
warp_13=` 
warp_14=`shader_body
warp_15=`{
warp_16=`uv1 = float2(uv.x-.5,uv.y-0.5)*aspect.xy;
warp_17=`
warp_18=`//STONE
warp_19=`float dist = 40+18*iter6;
warp_20=`uv3 = dist * (uv1) + dist*float2(0,sin(q15))*0;
warp_21=`float ky = saturate(.04-uv3.y/40);
warp_22=`float k1 = uv3.x ;;
warp_23=`k1 = k1 - sign (k1)*14; //Verdoppelung
warp_24=`k1 = k1 - sign (k1)*q28*2; //Verdoppelung
warp_25=`k1 = k1 - sign (k1)*8; //Verdoppelung
warp_26=`
warp_27=`float ff = 16 + 16*rand_preset.z;
warp_28=`int n = 1 ;
warp_29=`while (n <= 4+2*iter6) 
warp_30=`{
warp_31=`  k1 += (-ff*n*sign(k1))*ky*ky;
warp_32=`  ky = saturate (ky - .1);
warp_33=`  n++; 
warp_34=`}
warp_35=`k1 = clamp(k1,-1.57,1.57);
warp_36=`stone = saturate(cos(k1)-.02) ;
warp_37=`
warp_38=`light = 0; trel = time*.2;
warp_39=`for (int m= 1; m<= 3; m++)
warp_40=`{//Kugel1
warp_41=`  rsk = (uv1 + .3*float2 (cos(q15/m)*(m%2),cos(q16/m)*((m+1)%2))) ;
warp_42=`  dz1 = normalize(rsk);
warp_43=`  rad1 = 16*length (rsk) * (2+cos(q17*m)) ;
warp_44=`  uv4 =  tan(rad1)*dz1;
warp_45=`  mask1 = saturate(9-7*rad1);
warp_46=`  Kugel1 = uv4*mask1;
warp_47=`  light += (.1/rad1)*pow(q23,1+slow_roam_sin);;
warp_48=`  uv=  uv+Kugel1*.1;
warp_49=`}
warp_50=`
warp_51=`uv+=stone*.05;
warp_52=`//Fractal Distortion
warp_53=`float2 z = (uv.yx-.5)*(2+stone);
warp_54=`float2 uv2 = cpow(z,.5+.3*q28/8)%clip1;
warp_55=`
warp_56=`uv2 = 0.5 + (1.0 -abs(frac(uv2 * 0.5)*2 - 1.0 )-0.5)*1; // Eo.S. mirror code
warp_57=`ret = (tex2D(sampler_main, uv2.yx) + GetPixel(uv_orig))*.46;
warp_58=`//ret += .002/length(uv1);
warp_59=`
warp_60=`//LASER
warp_61=`uv4 = uv-.5-lpos1+stone;
warp_62=`uv5  = normalize(uv4)-float2(q10,q11);
warp_63=`ray1 = saturate (1-length(uv5/q12));
warp_64=`ray1 += pow(.001/length(uv5),1)/length(uv4);
warp_65=`sun1 = saturate(.002/length(uv4))/(1.05-q12);
warp_66=`
warp_67=`ret += (ray1+sun1)*.8*frac(float3(q27,q27+3,q27+6)/16);
warp_68=`ret += (.02/length(sin(uv2*2+.2*(q27%8-4))));
warp_69=`float4 noise9 = tex3D(sampler_noisevol_hq, 
warp_70=`                      ((uv5.xyy*q27
warp_71=`                       )*texsize.xyy*texsize_noisevol_hq.zww
warp_72=`                      ).xyz*
warp_73=`                      float3(1,1,0)*0.05 + 
warp_74=`                      time*float3(0,0,1)*q29
warp_75=`                     );
warp_76=`if(ret.x> q21*q13         && ret.x<= q24*q11        )ret.y -= (noise9).x*.5; 
warp_77=`if(ret.y> q22*q11         && ret.y<= q25*q12        )ret.z -= (noise9).y*.5; 
warp_78=`if(ret.z> q23*q12         && ret.z<= q26*q13        )ret.x -= (noise9).z*.5; 
warp_79=`ret += pow(stone,3)*q29*(1+roam_sin);
warp_80=`ret += light;
warp_81=`ret *= 1-.08*30/fps;
warp_82=`}
warp_83=`
comp_1=`
comp_2=`
comp_3=`
comp_4=`
comp_5=`shader_body
comp_6=`{
comp_7=`    uv = 0.05 + 0.9*uv;
comp_8=`
comp_9=`
comp_10=`    float2 uv_echo = (uv - 0.5)*float2(-1,1) + 0.5;
comp_11=`    ret = lerp( tex2D(sampler_main, uv).xyz, 
comp_12=`                tex2D(sampler_main, uv_echo).xyz, 
comp_13=`                0.50 
comp_14=`              ); //video echo
comp_15=`    //ret = tex2D(sampler_main, uv).xyz;
comp_16=`      // SUPER GLOW EDGES - looks awesome w/octopus
comp_17=`      float3 avg_col = GetBlur1(uv);
comp_18=`      ret = abs(avg_col - ret)*6;
comp_19=`    
comp_20=`    ret *= 0.1+abs(max(sin(bass_att),sin(treb_att)));
comp_21=`float4 noise9 = tex3D(sampler_noisevol_hq, 
comp_22=`                      ((uv_echo.xyy*q28
comp_23=`                       )*texsize.xyy*texsize_noisevol_hq.zww
comp_24=`                      ).xyz*
comp_25=`                      float3(1,1,0)*0.05 + 
comp_26=`                      time*float3(0,0,1)*q31
comp_27=`                     );
comp_28=`if(ret.x> q26*q13         && ret.x<= q23*q11        )ret.z -= (noise9).x*.5; 
comp_29=`if(ret.y> q25*q11         && ret.y<= q22*q12        )ret.x -= (noise9).y*.5; 
comp_30=`if(ret.z> q24*q12         && ret.z<= q21*q13        )ret.y -= (noise9).z*.5; 
comp_31=`    ret *= max(GetBlur3(uv),GetBlur3(uv_echo));
comp_32=`
comp_33=`    ret *= 1.5; // a little bit of overbright
comp_34=`
comp_35=`
comp_36=`ret=.7-ret;
comp_37=`}
