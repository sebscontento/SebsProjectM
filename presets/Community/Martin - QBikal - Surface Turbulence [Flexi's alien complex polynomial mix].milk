MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=4.000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=4
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.527
fWaveSmoothing=0.450
fWaveParam=0.000
fModWaveAlphaStart=0.000
fModWaveAlphaEnd=1.320
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.800
wave_g=0.490
wave_b=1.000
wave_x=0.500
wave_y=0.500
ob_size=0.010
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.260
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=1.850
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=0.300
b3x=1.000
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=484
wavecode_0_sep=0
wavecode_0_bSpectrum=1
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=2.15542
wavecode_0_smoothing=0.00000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=0.700
wave_0_per_point1=
wave_0_per_point2=n = int((reg00+.5)*sample);
wave_0_per_point3=
wave_0_per_point4=m = 30001+n/(reg00/reg01);
wave_0_per_point5=gmegabuf(m) = (gmegabuf(m))*.98 + .01*(value1+value2);
wave_0_per_point6=
wave_0_per_point7=x = gmegabuf(10000+n);
wave_0_per_point8=y = gmegabuf(15000+n);
wave_0_per_point9=a = gmegabuf(20000+n);
wave_0_per_point10=
wave_0_per_point11=b = min(max(gmegabuf(25000+n),0),1);
wave_0_per_point12=r = 1-b;  
wave_0_per_point13=g = 0.5;
wavecode_1_enabled=1
wavecode_1_samples=484
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=1
wavecode_1_scaling=0.89152
wavecode_1_smoothing=0.82000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=0.900
wave_1_per_point1=n = int((reg00+.5)*sample) +reg00;
wave_1_per_point2=
wave_1_per_point3=x = gmegabuf(10000+n);
wave_1_per_point4=y = gmegabuf(15000+n);
wave_1_per_point5=a = gmegabuf(20000+n);
wave_1_per_point6=
wave_1_per_point7=b = min(max(gmegabuf(25000+n),0),1);
wave_1_per_point8=r = 1-b;  
wave_1_per_point9=g = 0.5;
wave_1_per_point10=
wave_1_per_point11=
wave_1_per_point12=//x = sample;
wave_1_per_point13=//y = gmegabuf(100000+n-reg00)/2+.3;
wavecode_2_enabled=1
wavecode_2_samples=484
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=1
wavecode_2_scaling=0.89152
wavecode_2_smoothing=0.82000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wave_2_per_point1=n = int((reg00+.5)*sample)+2*reg00;
wave_2_per_point2=
wave_2_per_point3=
wave_2_per_point4=x = gmegabuf(10000+n);
wave_2_per_point5=y = gmegabuf(15000+n);
wave_2_per_point6=a = gmegabuf(20000+n);
wave_2_per_point7=
wave_2_per_point8=b = min(max(gmegabuf(25000+n),0),1);
wave_2_per_point9=r = 1-b;  
wave_2_per_point10=g = 0.5;
wave_2_per_point11=
wavecode_3_enabled=1
wavecode_3_samples=484
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=1
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
wave_3_per_point1=n = int((reg00-.5)*sample)+3*reg00;
wave_3_per_point2=
wave_3_per_point3=
wave_3_per_point4=x = gmegabuf(10000+n);
wave_3_per_point5=y = gmegabuf(15000+n);
wave_3_per_point6=a = gmegabuf(20000+n);
wave_3_per_point7=
wave_3_per_point8=b = min(max(gmegabuf(25000+n),0),1);
wave_3_per_point9=r = 1-b;  
wave_3_per_point10=g = 0.5;
shapecode_0_enabled=0
shapecode_0_sides=24
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=5
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.04895
shapecode_0_ang=0.00000
shapecode_0_tex_ang=1.00531
shapecode_0_tex_zoom=1.53117
shapecode_0_r=1.000
shapecode_0_g=0.000
shapecode_0_b=1.000
shapecode_0_a=1.000
shapecode_0_r2=0.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=0.000
shapecode_0_border_a=0.000
shape_0_per_frame1=ox = gmegabuf(40001+instance)*30;
shape_0_per_frame2=oz = gmegabuf(45001+instance)*30;
shape_0_per_frame3=oy = 0;
shape_0_per_frame4=    mx = ox*q5 - oy*q6;  my = ox*q6 + oy*q5;
shape_0_per_frame5=    ox = mx; oy = my;  
shape_0_per_frame6=    mx = ox*q3 + oz*q4;  mz = - ox*q4 + oz*q3;
shape_0_per_frame7=    ox = mx; oz = mz;  
shape_0_per_frame8=    my = oy*q1 - oz*q2;  mz = oy*q2 + oz*q1;
shape_0_per_frame9=    oy = my; oz = mz;
shape_0_per_frame10=
shape_0_per_frame11=fov = 3;
shape_0_per_frame12=x = fov*ox/(oz+60*fov)+.5;
shape_0_per_frame13=y = fov*oy/(oz+60*fov)+.5;
shape_0_per_frame14=
shape_0_per_frame15=x = gmegabuf(40001+instance)*1+.5;
shape_0_per_frame16=y = gmegabuf(45001+instance)*1+.5;
shapecode_1_enabled=0
shapecode_1_sides=12
shapecode_1_additive=1
shapecode_1_thickOutline=0
shapecode_1_textured=1
shapecode_1_num_inst=1
shapecode_1_x=0.300
shapecode_1_y=0.800
shapecode_1_rad=1.06345
shapecode_1_ang=0.00000
shapecode_1_tex_ang=1.63363
shapecode_1_tex_zoom=0.46617
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.000
shapecode_1_b2=0.000
shapecode_1_a2=1.000
shapecode_1_border_r=1.000
shapecode_1_border_g=0.000
shapecode_1_border_b=0.000
shapecode_1_border_a=0.000
shapecode_2_enabled=0
shapecode_2_sides=13
shapecode_2_additive=1
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=5
shapecode_2_x=0.650
shapecode_2_y=0.380
shapecode_2_rad=0.57049
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.73678
shapecode_2_r=1.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=0.700
shapecode_2_r2=0.000
shapecode_2_g2=0.000
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=0.500
shapecode_2_border_g=0.500
shapecode_2_border_b=0.000
shapecode_2_border_a=0.000
shapecode_3_enabled=0
shapecode_3_sides=14
shapecode_3_additive=1
shapecode_3_thickOutline=1
shapecode_3_textured=1
shapecode_3_num_inst=1
shapecode_3_x=0.600
shapecode_3_y=0.550
shapecode_3_rad=0.97237
shapecode_3_ang=1.25664
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.34933
shapecode_3_r=1.000
shapecode_3_g=0.600
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=0.000
shapecode_3_b2=1.000
shapecode_3_a2=0.000
shapecode_3_border_r=0.200
shapecode_3_border_g=0.700
shapecode_3_border_b=0.500
shapecode_3_border_a=0.000
per_frame_init_1=index = 0;
per_frame_init_2=loop (200000,
per_frame_init_3=  megabuf(index) = 0;
per_frame_init_4=  gmegabuf(index) = 0;
per_frame_init_5=  index = index + 1;
per_frame_init_6=);
per_frame_init_7=
per_frame_1=xlen = 44; ylen = 44; flen = 10; reg00 = xlen*ylen/4; reg01=reg00/4;
per_frame_2=smooth = 3; // >= 0; Ausbreitungsgeschwindigkeit
per_frame_3=
per_frame_4=dec_med = pow (0.94, 30/fps); dec_slow = pow (0.98, 30/fps);
per_frame_5=dec_f = pow (0.8, 30/fps); 
per_frame_6=beat = bass+mid+treb;
per_frame_7=avg = avg*dec_slow + beat*(1-dec_slow);
per_frame_8=is_beat = above(beat, .2+avg+peak) * above (time, t0+.1);
per_frame_9=t0 = is_beat*time + (1-is_beat)*t0;
per_frame_10=peak = is_beat * beat + (1-is_beat)*peak*dec_med;
per_frame_11=count = (count + is_beat) %16;
per_frame_12=
per_frame_13=//Gleichanteil entfernen und normalisieren
per_frame_14=ind = 0; sum = 0; amp = 0.01;
per_frame_15=loop (reg01,
per_frame_16=  sum = sum + gmegabuf(ind+30000)/(reg01);
per_frame_17=  amp = amp + pow(gmegabuf(ind+30000),2);
per_frame_18=  ind = ind+1;
per_frame_19=); 
per_frame_20=ind = 0; amp_= amp_*dec_med + (1-dec_med)*sqrt(amp)/reg01*300;
per_frame_21=loop (reg01,
per_frame_22=  megabuf(ind+30000)= (gmegabuf(ind+30000)-sum)/amp_;
per_frame_23=  ind = ind+1;
per_frame_24=);
per_frame_25= 
per_frame_26=// Spectrum of spectrum  !
per_frame_27=index2 = 0;
per_frame_28=loop(flen, //Frequency step
per_frame_29=  index=0; real= 0; imag = 0;
per_frame_30=  loop (flen,
per_frame_31=    real = real + cos(index/flen*6.28*index2)*megabuf(index*reg01/8+30002);
per_frame_32=    imag = imag + sin(index/flen*6.28*index2)*megabuf(index*reg01/8+30002);
per_frame_33=    index=index+1;
per_frame_34=  );
per_frame_35=  megabuf(10000+index2)= megabuf(10000+index2) * dec_f + real;
per_frame_36=  megabuf(15000+index2)= megabuf(15000+index2) * dec_f + imag;
per_frame_37=  index2 = index2+1;
per_frame_38= );
per_frame_39=
per_frame_40=//Anregung
per_frame_41=ind = 1;
per_frame_42=loop (flen/2,
per_frame_43=  cx = megabuf(10000+ind);
per_frame_44=  cy = megabuf(15000+ind);
per_frame_45=  yind = -1;
per_frame_46=  loop (3,
per_frame_47=    xind = -1;
per_frame_48=    loop (3,
per_frame_49=      ox = ((cx+.5)*xlen+xind)%xlen;
per_frame_50=      oy = ((cy+.5)*ylen+yind)%ylen;
per_frame_51=      amp = (cx*cx+cy*cy);
per_frame_52=      megabuf (oy*ylen+ox) = megabuf (oy*ylen+ox) 
per_frame_53=                           - 2*sqrt(amp)*above(amp,.01)/(1+xind*xind+yind*yind);
per_frame_54=      xind = xind+1;
per_frame_55=    );
per_frame_56=    yind = yind+1;
per_frame_57=  );
per_frame_58=  ind = ind+1;
per_frame_59=);
per_frame_60=
per_frame_61=
per_frame_62=//Simulation
per_frame_63=yind = 0;
per_frame_64=loop (ylen,
per_frame_65=  xind = 0;
per_frame_66=  loop (xlen,
per_frame_67=    megabuf(yind*ylen+xind+5000) = //megabuf ab 5000 ist nur Zwischenspeicher
per_frame_68=    dec_med*((gmegabuf(yind*ylen+(xind+1)%xlen) +
per_frame_69=    gmegabuf(yind*ylen+(xlen+xind-1)%xlen) + 
per_frame_70=    gmegabuf(((yind+1)%ylen)*ylen+xind) + 
per_frame_71=    gmegabuf(((yind+ylen-1)%ylen)*ylen+xind)
per_frame_72=    +gmegabuf(yind*ylen+xind)*smooth*4)/(2+2*smooth) - megabuf(yind*ylen+xind)); 
per_frame_73=    xind = xind+1;
per_frame_74=  );
per_frame_75=  yind = yind+1;
per_frame_76=);
per_frame_77=
per_frame_78=//Projektionsparameter
per_frame_79= zang = -0.2*sin(time/9); xang = -.5 -.2*sin(time/6) ; yang = time/4;
per_frame_80=q1 = cos(xang);
per_frame_81=q2 = sin(xang);
per_frame_82=q3 = cos(yang);
per_frame_83=q4 = sin(yang);
per_frame_84=q5 = cos(zang);
per_frame_85=q6 = sin(zang);
per_frame_86=fov = .8;
per_frame_87=
per_frame_88=//Umkopieren und Projektion
per_frame_89=yind = 0;
per_frame_90=loop (ylen,
per_frame_91=  xind = 0;
per_frame_92=  loop (xlen,
per_frame_93=    ind = yind*ylen+xind;
per_frame_94=    megabuf(ind) = gmegabuf(ind); 
per_frame_95=    gmegabuf(ind) = megabuf(ind+5000); 
per_frame_96=    oz = yind - ylen/2+sin(time*2)*0; //#
per_frame_97=    ox = if(bnot(yind%2),xind,xlen-xind-1);
per_frame_98=    oy = gmegabuf(yind*ylen+ox); oy0 = oy;
per_frame_99=    ox = ox - xlen/2;  
per_frame_100=    mx = ox*q5 - oy*q6;  my = ox*q6 + oy*q5;
per_frame_101=    ox = mx; oy = my;  
per_frame_102=    mx = ox*q3 + oz*q4;  mz = - ox*q4 + oz*q3;
per_frame_103=    ox = mx; oz = mz;  
per_frame_104=    my = oy*q1 - oz*q2;  mz = oy*q2 + oz*q1;
per_frame_105=    oy = my; oz = mz;
per_frame_106=    gmegabuf(10000+ind) = fov*ox/(oz+60*fov)+.5;
per_frame_107=    gmegabuf(15000+ind) = fov*oy/(oz+60*fov)+.6;
per_frame_108=    gmegabuf(20000+ind) = max(min(.5+oy0/4,1),0)*1;
per_frame_109=    gmegabuf(25000+ind) = oy0/16+.5;;
per_frame_110=    xind = xind+1;
per_frame_111=  );
per_frame_112=  yind = yind+1;
per_frame_113=);
per_frame_114=
per_frame_115=q32 = aspecty;
per_frame_116=
per_pixel_1=rot = 0; zoom = 1; warp = 0;
warp_1=`shader_body
warp_2=`{
warp_3=`//uv = uv_orig;
warp_4=`ret.z = GetPixel(uv).z*0;
warp_5=`
warp_6=`   float pixelDistance   = 4;
warp_7=`   float motionStrength  = 4;
warp_8=`
warp_9=`   float diffusionFactor = 1;  
warp_10=`   float decay           = -0.014;
warp_11=`
warp_12=`   float2 uv_y = lerp(uv_orig,uv,0);
warp_13=`   float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw*diffusionFactor;
warp_14=`
warp_15=`   float2 d = texsize.zw*pixelDistance;
warp_16=`   float1 dx = ( 2*GetBlur1(uv_y + float2(1,0)*d) - 2*GetBlur1(uv_y-float2(1,0)*d) ).y*0.5;
warp_17=`   float1 dy = ( 2*GetBlur1(uv_y + float2(0,1)*d) - 2*GetBlur1(uv_y-float2(0,1)*d) ).y*0.5;
warp_18=`
warp_19=`   float2 my_uv = uv_y + float2(dx,dy)*texsize.zw*motionStrength;
warp_20=`
warp_21=`   ret.y = tex2D( sampler_fw_main, saturate(my_uv)).y;
warp_22=`
warp_23=`   ret.y += (2*ret - 2*GetBlur1(uv_y)).y*0.0125 + decay;
warp_24=`
warp_25=`
warp_26=`   ret.y += (tex2D(sampler_noise_lq, dither_uv).y-0.5)*0.02;
warp_27=`
warp_28=`   dx = ( 2*GetBlur1(uv_y + float2(1,0)*d) - 2*GetBlur1(uv_y-float2(1,0)*d) ).x*0.5;
warp_29=`   dy = ( 2*GetBlur1(uv_y + float2(0,1)*d) - 2*GetBlur1(uv_y-float2(0,1)*d) ).x*0.5;
warp_30=`
warp_31=`   my_uv = uv - float2(dx,dy)*texsize.zw*motionStrength;
warp_32=`
warp_33=`ret.x = GetPixel(my_uv).x - ret.y*0.01 + 0.004;    
warp_34=`ret.x += (tex2D(sampler_noise_lq, dither_uv).x-0.5)*0.01 + ret.z*0.14;
warp_35=`}
comp_1=`float2 uvo, factorA, factorB, product, numerator, denominator, fraction;
comp_2=`shader_body
comp_3=`{
comp_4=`uvo = 0.5 + (uv-0.5)*float2(0.9,1.1);
comp_5=`factorA = uv-float2(1-0.5,0.5);
comp_6=`factorB = float2(0,1024);
comp_7=`product = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
comp_8=`numerator = float2(1,0);
comp_9=`denominator = product;
comp_10=`fraction = float2( numerator.x*denominator.x + numerator.y*denominator.y,   // the fractions real part
comp_11=`                   numerator.y*denominator.x - numerator.x*denominator.y)/  // the fractions imaginary part
comp_12=`                   (denominator.x*denominator.x + denominator.y*denominator.y);
comp_13=`uv = fraction.yx*float2(-1,1)*64;
comp_14=`uv = lerp(0.5 + (uvo-0.5)*2,uv+0.5,0.5);
comp_15=`uv = 0.5 + (1.0 - abs( frac( uv * 0.5 ) * 2 - 1.0 )-0.5); // Eo.S. mirror code with cutted borders
comp_16=`
comp_17=`    float2 d = texsize.zw*4;
comp_18=`    float3 dx = ( 2*GetBlur1(uv+float2(1,0)*d)-2*GetBlur1(uv-float2(1,0)*d) )*0.5;
comp_19=`    float3 dy = ( 2*GetBlur1(uv+float2(0,1)*d)-2*GetBlur1(uv-float2(0,1)*d) )*0.5;
comp_20=`
comp_21=`float2 uv_x = uv - float2(dx.y,dy.y)*texsize.zw*128;
comp_22=`ret = GetBlur2(uv_x).x*saturate(1-GetPixel(uv).y)*pow(hue_shader.yxz,8)*3;
comp_23=`ret = lerp(ret,pow(hue_shader.yzx,8)*1.4,GetPixel(uv_x).x*0.8 + GetBlur1(uv_x).x);
comp_24=`ret = lerp(ret,1,pow(hue_shader,8)*GetPixel(saturate(uv - float2(dx.z,dy.z)*2*0)).y*1.2);
comp_25=`ret *= saturate(1-GetPixel(uv).z);
comp_26=`}
