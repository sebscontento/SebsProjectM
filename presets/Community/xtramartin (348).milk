MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=4.000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.958
fWaveSmoothing=0.450
fWaveParam=0.000
fModWaveAlphaStart=0.000
fModWaveAlphaEnd=1.320
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.100
ob_b=1.000
ob_a=1.000
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=25.600
nMotionVectorsY=9.600
mv_dx=0.000
mv_dy=0.000
mv_l=0.000
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=0
wavecode_0_samples=282
wavecode_0_sep=20
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=3.91581
wavecode_0_smoothing=0.10000
wavecode_0_r=0.200
wavecode_0_g=0.300
wavecode_0_b=1.000
wavecode_0_a=0.600
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=0
wavecode_1_scaling=0.89152
wavecode_1_smoothing=0.82000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=0.100
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=0
wavecode_2_scaling=0.89152
wavecode_2_smoothing=0.82000
wavecode_2_r=0.000
wavecode_2_g=0.200
wavecode_2_b=0.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=0
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.090
shapecode_0_y=0.900
shapecode_0_rad=0.22437
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.76002
shapecode_0_r=1.000
shapecode_0_g=0.000
shapecode_0_b=0.000
shapecode_0_a=1.000
shapecode_0_r2=1.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.600
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shapecode_1_enabled=0
shapecode_1_sides=100
shapecode_1_additive=1
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.260
shapecode_1_y=0.200
shapecode_1_rad=0.39317
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=6.19589
shapecode_1_r=0.000
shapecode_1_g=0.550
shapecode_1_b=0.500
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.400
shapecode_1_b2=0.400
shapecode_1_a2=0.070
shapecode_1_border_r=0.300
shapecode_1_border_g=0.700
shapecode_1_border_b=0.800
shapecode_1_border_a=0.000
shapecode_2_enabled=0
shapecode_2_sides=44
shapecode_2_additive=1
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.503
shapecode_2_y=0.500
shapecode_2_rad=0.03886
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.60986
shapecode_2_r=1.000
shapecode_2_g=0.100
shapecode_2_b=0.000
shapecode_2_a=0.900
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=1.000
shapecode_2_a2=0.000
shapecode_2_border_r=0.500
shapecode_2_border_g=0.500
shapecode_2_border_b=0.500
shapecode_2_border_a=0.000
shapecode_3_enabled=0
shapecode_3_sides=100
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.01000
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.49981
shapecode_3_r=0.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=0.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=0.200
shapecode_3_border_g=0.700
shapecode_3_border_b=0.500
shapecode_3_border_a=0.000
per_frame_init_1=
per_frame_init_2=//******** INITIALIZATION *********
per_frame_init_3=//---------- some global vars, do not change -------------
per_frame_init_4=avg = 0.01;
per_frame_init_5=q7 = .5; //MyZoom
per_frame_init_6=
per_frame_init_7=start = 1; travel = 0; RotZ = 0; look = 0; slow = 0; t0 = time+3; lampx = .5; lampy = .5;
per_frame_init_8=cran0 = rand(1);
per_frame_init_9=n = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); 
per_frame_init_10=n = 0; loop (10000,  megabuf(n)=0; n=n+1; ); 
per_frame_init_11=trelx = 0;  trely = 0; trelz = 0;
per_frame_init_12=reg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;
per_frame_init_13=
per_frame_init_14=//-----------------------------------------------------------------------
per_frame_init_15=//Set Camera Position and viewing angle here
per_frame_init_16=  PosX = 0.3; PosY = 0.5; PosZ = -1.3; ran1 = 0; ran2 = 0; ran3 = 0; //#
per_frame_init_17=//-----------------------------------------------------------------------
per_frame_init_18=
per_frame_init_19=  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); 
per_frame_init_20=  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);
per_frame_init_21=
per_frame_init_22=  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;
per_frame_init_23=  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;
per_frame_init_24=  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;
per_frame_1=fps_ = .0 * fps_ + 1*if(fps<=25,fps,25+.5*(fps-25)); 
per_frame_2=dec_s = 1-.03*30/fps_;
per_frame_3=beat = (time >  t0+3); t0 = if(beat, time, t0);
per_frame_4=
per_frame_5=speed = min(0.2,dist_-.02) * (1+2*avg) *(1-slow*.0)*.1/q7; //#
per_frame_6=
per_frame_7=speed = .0;
per_frame_8=
per_frame_9=ds = ds * dec_s + (1-dec_s)*speed*.6/fps_;
per_frame_10=RotZ = if (RotZ==0,beat*(rand(100)<20*travel+10)*(rand(10)/10-.3),
per_frame_11=                   bnot(beat*(rand(100)<30))*RotZ);
per_frame_12=
per_frame_13=//Position 
per_frame_14=DirX= reg26; DirY= reg27; DirZ = reg28;
per_frame_15=PosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ; 
per_frame_16=q4 = PosX; q5 = PosY; q6 = PosZ;
per_frame_17=
per_frame_18=angchg = (.3-dist_)*(dist_ < .3);
per_frame_19=travel = if (angchg > 0,0,travel+ds);
per_frame_20=v1 = v1 * dec_s + (1-dec_s)* RotZ * ds;
per_frame_21=v2 = v2 *dec_s + (1-dec_s)*angchg *xslope/fps_;
per_frame_22=v3 = v3 *dec_s + (1-dec_s)*(angchg *yslope/fps_ + 2*v1*sin(time*.1));
per_frame_23=v1 = 0.00; v2 = 0; v3 = 0;
per_frame_24=
per_frame_25=//push old RotMat
per_frame_26=reg30 =reg20; reg31 =reg21; reg32 =reg22; 
per_frame_27=reg33 =reg23; reg34 =reg24; reg35 =reg25; 
per_frame_28=reg36 =reg26; reg37 =reg27; reg38 =reg28; 
per_frame_29=
per_frame_30=n = 0; avg = 0;
per_frame_31=loop (5,
per_frame_32=  n = n+1;
per_frame_33=  //new Rot. Mat for infinitesimal angles
per_frame_34=  ran1 = rand(100)/100;
per_frame_35=  ran2 = rand(100)/200-.25;
per_frame_36=  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;
per_frame_37=  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); 
per_frame_38=  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);
per_frame_39=  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;
per_frame_40=  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;
per_frame_41=  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;
per_frame_42=
per_frame_43=  //pop old RotMat
per_frame_44=  reg20 =reg30; reg21 =reg31; reg22 =reg32; 
per_frame_45=  reg23 =reg33; reg24 =reg34; reg25 =reg35; 
per_frame_46=  reg26 =reg36; reg27 =reg37; reg28 =reg38; 
per_frame_47=
per_frame_48=  //Multiply new RotMat by old one
per_frame_49=  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;
per_frame_50=  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;
per_frame_51=  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;
per_frame_52=  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;
per_frame_53=  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;
per_frame_54=  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;
per_frame_55=  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;
per_frame_56=  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;
per_frame_57=  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;
per_frame_58=
per_frame_59=  reg20 =q20; reg21 =q21; reg22 =q22;
per_frame_60=  reg23 =q23; reg24 =q24; reg25 =q25;
per_frame_61=  reg26 =q26; reg27 =q27; reg28 =q28;
per_frame_62=
per_frame_63=  //***********BOT*************
per_frame_64=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_65=  dist = 0.002;
per_frame_66=  while (exec2(
per_frame_67=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_68=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_69=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_70=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_71=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_72=    loop (7+1,
per_frame_73=       //insert fractal code here
per_frame_74=       uvx = 0;
per_frame_75=    );
per_frame_76=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_77=    dist *= 1.1;
per_frame_78=  ,(dist < 0.6)*(len > 30)));
per_frame_79=  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points
per_frame_80=  avg = avg+abs(megabuf(n)/5);
per_frame_81=); //end loop 5
per_frame_82=
per_frame_83=n = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));
per_frame_84=
per_frame_85=xslope = min(max(2/avg*(megabuf(1)-megabuf(3)),-3),3);
per_frame_86=yslope = min(max(2/avg*(megabuf(4)-megabuf(2)),-3),3);
per_frame_87=monitor = avg;
per_frame_88=dist_ = dist_*dec_s + (1-dec_s)*dist;
per_frame_89=
per_frame_90=q10 = ds*q7; //compensation of lin. movement in GetDist and zoom uv
per_frame_91=q14 = 1*abs(ds) + 2*(abs(v1) + abs(v2) + abs(v3)) + start*.05; 
per_frame_92=q19 = .6 + .4*sin(time*.02+cran0*6); //brightness backgd
per_frame_93=start = start * .9;
per_frame_94=
per_frame_95=warp = 0.0; zoom = 1; 
per_frame_96=dx = -v2/q16; dy = v3/q16; rot = v1;
per_frame_97=vx = vx -v2/q16; vy = vy +v3/q16; vz = vz + v1;
per_frame_98=q11 = vx;  q12 = vy; q13 = vz;
per_frame_99=monitor = vz;
warp_1=`sampler sampler_pw_noise_lq;
warp_2=`float limit, dist, struc, len; float2 uv0, uv1; float3 uv2; float4 box;
warp_3=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
warp_4=`
warp_5=`float2 complex_mul(float2 factorA, float2 factorB){
warp_6=`   return float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
warp_7=`}
warp_8=`
warp_9=`float2 complex_div(float2 numerator, float2 denominator){
warp_10=`   return float2( numerator.x*denominator.x + numerator.y*denominator.y,
warp_11=`                  numerator.y*denominator.x - numerator.x*denominator.y)/
warp_12=`          (denominator.x*denominator.x + denominator.y*denominator.y);
warp_13=`}
warp_14=`
warp_15=`
warp_16=`static const float3 CamPos = float3(q4,q5,q6);
warp_17=`static const float myzoom = q7,  res = 128, res2 = 128, tele = q16;
warp_18=`static const float change = q14, sustain =.97- change, ds = q10, tic8 = 1.0/255, ffac = q17;
warp_19=`
warp_20=`float2 fstep2 (float2 xy) {return 1.0/res*round(res*xy);}
warp_21=`
warp_22=`float GetDist(float2 uvi) {float2 tmp; tmp = fstep2(tex2D (sampler_pc_main, uvi).gb); 
warp_23=`  return 1-(tmp.y + 1.0/res2*(tmp.x-.505));}
warp_24=`
warp_25=`float2 PutDist(float x) {float tmp; tmp = fstep2(1-x);
warp_26=`  return (float2(res2*((1-x)-tmp)+.495,tmp));}
warp_27=`
warp_28=`float MinDist (float2 uvi) 
warp_29=`{
warp_30=`   float tmp; float4 nb; float4 nb2; float2 pix;
warp_31=`   pix = texsize.zw*(1.0+length(uvi-0.5)*.0);   
warp_32=`   nb.x = GetDist(uvi+pix*float2(-1,-1));   nb.y = GetDist(uvi+pix*float2(1,-1));
warp_33=`   nb.z = GetDist(uvi+pix*float2(1,1));     nb.w = GetDist(uvi+pix*float2(-1,1));         
warp_34=`   nb2.x = GetDist(uvi+pix*float2(0,-1));   nb2.y = GetDist(uvi+pix*float2(1,0));          
warp_35=`   nb2.z = GetDist(uvi+pix*float2(0,1));    nb2.w = GetDist(uvi+pix*float2(-1,0));
warp_36=`   //Eo.S. more efficient usage of min to get min value of all 8 GetDist() calls, removes 11ALU
warp_37=`   nb = min( nb, nb2 );
warp_38=`   nb.xy = min( nb.xy, nb.zw );
warp_39=`   tmp =min( nb.x, nb.y );
warp_40=`   return min(tmp, GetDist(uvi));
warp_41=`}
warp_42=`
warp_43=`
warp_44=`//----------------------------------------------------------------------------------------------
warp_45=`float4 mbox (float3 uvi) {float2 domain; float light; 
warp_46=`  for (int n = 0; n <= 0; n++) 
warp_47=`  {
warp_48=`   float2 pos1 = float2(0.3, 0.4);
warp_49=`   float2 pos2 = float2(0.7, 0.3);
warp_50=`   float2 pos3 = float2(0.7, 0.6);
warp_51=`   float2 pos4 = float2(0.2, 0.6);
warp_52=`
warp_53=`   domain = uvi.xy;
warp_54=`   domain = complex_div(.0004, complex_mul(  complex_mul(domain-pos1, domain - pos2),
warp_55=`                                        complex_mul(domain-pos3, domain - pos4)));
warp_56=`   domain -= 0.5;
warp_57=`  }
warp_58=`  light = .2/length(sin(float3(domain*16,uvi.z*80+0*time)));
warp_59=`   return float4( abs(sin(atan2(domain.x, domain.y)) + uvi.z)+(light*-.2),domain,light) ;}
warp_60=`//----------------------------------------------------------------------------------------------
warp_61=`
warp_62=`shader_body {uv0 = uv_orig;
warp_63=`uv = (uv-.5)*(1-ds/(1-GetBlur1(uv).b)) + .5;
warp_64=`uv1 = (uv0-.5)*aspect.xy;
warp_65=`float3 noise = frac(8*tex2D (sampler_noise_lq,uv+rand_frame.yz)); 
warp_66=`   if (noise.g > .2) 
warp_67=`   {
warp_68=`       float3 noiseBiased = noise - float3( 0.5, 0.5, 0.5 );
warp_69=`      //Eo.S. combine the subtraction on noise to a single float3 
warp_70=`      //to ensure compiler does the subtraction in a single ALU
warp_71=`      dist = MinDist(uv) +  0.006 * (noiseBiased.x) * abs(noiseBiased.y);
warp_72=`   }    
warp_73=`   else {dist = noise.r;}
warp_74=` dist = min(dist,GetDist(uv)) - ds*.8;
warp_75=`
warp_76=`float tdist = dist + pow(dist,3)*0;
warp_77=`uv2 = mul(float3(uv1*tdist,tdist-.0)/myzoom,RotMat)+CamPos;
warp_78=`//uv2 = (frac(uv2/8.0+.5)-.5)*8.0;
warp_79=`box = mbox (uv2);
warp_80=`len = length(box.x);
warp_81=`
warp_82=`struc = tex2D (sampler_pw_noise_lq,box.yz*.5);
warp_83=`struc = len/8+box.w;
warp_84=`
warp_85=`if (len < 1){
warp_86=` ret.r = (1-sustain)*struc+sustain*(GetPixel(uv).r); ret.gb=  PutDist(dist); } 
warp_87=` else {ret = tex2D(sampler_fc_main,uv)*float3(sustain,0,.98)-float3(1.0/255,0,2.0/255);} 
warp_88=`//ret.r = struc;
warp_89=`}
comp_1=`#define sat saturate
comp_2=`static const float2 pix = texsize.zw;
comp_3=`float glow, tmp, lamp, dist, bdist, b2dist, dist_c, smask;
comp_4=`float2 uv1, uv3, uv4;
comp_5=`static const float3 col_struc =  float3(1,.7,.3) + .2*(rand_preset.xyz-.5);
comp_6=`static float2 hor = float2 (texsize.z,0);
comp_7=`static float2 ver = float2 (0,texsize.w);
comp_8=`
comp_9=`
comp_10=`float3 GetBlurX (float2 uvi, float x) {return lerp (GetPixel(uvi), GetBlur2(uvi), x);}
comp_11=`float GetDist(float2 uvi)   {return 1-GetPixel(uvi).b;}
comp_12=`float GetDistB(float2 uvi)  {return 1-GetBlur1(uvi).b;}
comp_13=`float GetDistB2(float2 uvi) {return 1-GetBlur2(uvi).b;}
comp_14=`
comp_15=`float MinDistB (float2 uvi) {float tmp; float4 nb; //##nicht ideal
comp_16=`  tmp = GetDist(uvi);
comp_17=`  tmp = min(tmp,GetDistB2(uvi)*1) ;
comp_18=`  return tmp;}
comp_19=`
comp_20=`shader_body {uv1= (uv-.5)*aspect.xy;
comp_21=`
comp_22=`dist = MinDistB(uv);
comp_23=`bdist = lerp(dist,GetDist(uv),.5);
comp_24=`
comp_25=`float struc = GetBlurX(uv,saturate(bdist)).r;
comp_26=`
comp_27=`ret = struc*2;
comp_28=`
comp_29=`
comp_30=`ret *= sat(1-bdist);
comp_31=`
comp_32=`ret = 1-exp((-2)*ret);
comp_33=`}
comp_34=`
comp_35=`//-------------------------------------------
comp_36=`//Written by martin
comp_37=`
