MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=1.000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=0.952
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=0
bAdditiveWaves=0
bWaveDots=1
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=100.000
fWaveScale=28.599
fWaveSmoothing=0.500
fWaveParam=-1.000
fModWaveAlphaStart=0.400
fModWaveAlphaEnd=1.000
fWarpAnimSpeed=1.000
fWarpScale=3.138
fZoomExponent=1.60920
fShader=0.000
zoom=0.90700
rot=0.14000
cx=0.530
cy=0.500
dx=0.00000
dy=0.00000
warp=0.23800
sx=1.00990
sy=1.25710
wave_r=1.000
wave_g=1.000
wave_b=1.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=0.010
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.010
nMotionVectorsX=12.000
nMotionVectorsY=9.000
mv_dx=0.000
mv_dy=0.000
mv_l=1.500
mv_r=0.000
mv_g=0.000
mv_b=0.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=0
wavecode_0_samples=512
wavecode_0_sep=256
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=0
wavecode_0_scaling=20.35074
wavecode_0_smoothing=0.50000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=1.000
wave_0_per_frame1=r=r+0.5*sin(treb*1.13);
wave_0_per_frame2=g=g+0.5*sin(bass*1.33);
wave_0_per_frame3=b=b+0.5*sin(mid*1.23);
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=256
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=100.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=1
shapecode_0_sides=100
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.40031
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.00000
shapecode_0_r=0.500
shapecode_0_g=0.500
shapecode_0_b=0.000
shapecode_0_a=1.000
shapecode_0_r2=0.500
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=0.500
shapecode_0_border_a=0.000
shape_0_per_frame1=sounds=(bass+treb+mid)/3;
shape_0_per_frame2=
shape_0_per_frame3=rad=rad*sounds*0.6;
shape_0_per_frame4=
shape_0_per_frame5=r=r+sin(bass)*g;
shape_0_per_frame6=g=g+sin(mid)*g;
shape_0_per_frame7=
shape_0_per_frame8=
shape_0_per_frame9=x=x+0.207*cos(time*bass*0.1);
shape_0_per_frame10=y=y+0.207*sin(time*bass*0.1);
shapecode_1_enabled=1
shapecode_1_sides=100
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.13465
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=1.000
shapecode_1_g=0.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=1.000
shapecode_1_g2=1.000
shapecode_1_b2=0.000
shapecode_1_a2=0.300
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.000
shape_1_per_frame1=
shape_1_per_frame2=g2=g2+0.09*sin((treb+mid)*1.23);
shape_1_per_frame3=g=g+0.09*cos((bass+mid)*1.37);
shape_1_per_frame4=
shape_1_per_frame5=sounds=(bass+mid+treb)/3;
shape_1_per_frame6=
shape_1_per_frame7=rad=rad*(treb+mid)/3;
shape_1_per_frame8=
shape_1_per_frame9=x=x+0.300*sin(time*bass);
shape_1_per_frame10=y=y+0.317*cos(time*bass);
shapecode_2_enabled=1
shapecode_2_sides=100
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.20047
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=1.000
shapecode_2_g=1.000
shapecode_2_b=1.000
shapecode_2_a=1.000
shapecode_2_r2=0.500
shapecode_2_g2=0.500
shapecode_2_b2=1.000
shapecode_2_a2=0.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=0.500
shapecode_2_border_a=0.000
shape_2_per_frame1=sounds=(bass+treb+mid)/3;
shape_2_per_frame2=att=(bass_att+treb_att+mid_att)/3;
shape_2_per_frame3=att=(bass_att+treb_att+mid_att)/3;
shape_2_per_frame4=r2=r2+(0.25*sin(time*6.28))-bass;
shape_2_per_frame5=g2=g2+(0.25*sin(time*6.28))-bass;
shape_2_per_frame6=
shape_2_per_frame7=rad=rad;
shape_2_per_frame8=x=x+0.217*cos(time*2.3)+sounds*0.1;
shape_2_per_frame9=y=y+0.217*sin((time*3.5)+(sounds*0.3));
shapecode_3_enabled=0
shapecode_3_sides=4
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.10000
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=1.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=1.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.100
per_frame_init_1=// clear buffer
per_frame_init_2=i = 0; loop(1024*1024, gmegabuf(i) = 0; i = i+1);
per_frame_init_3=
per_frame_init_4=count = 50;
per_frame_init_5=attributes = 16;
per_frame_init_6=
per_frame_init_7=minradius = 0.005;
per_frame_init_8=maxradius = 0.045;
per_frame_init_9=v = 0.005;
per_frame_init_10=
per_frame_init_11=// randomize initial coordinates
per_frame_init_12=index = 0;
per_frame_init_13=loop(count, 
per_frame_init_14=     gmegabuf(index*attributes) = rand(1000)/1000;
per_frame_init_15=     gmegabuf(index*attributes+1) = rand(1000)/1000;
per_frame_init_16=     gmegabuf(index*attributes+2) = v*(rand(1000)/1000-0.5);
per_frame_init_17=     gmegabuf(index*attributes+3) = v*(rand(1000)/1000-0.5);
per_frame_init_18=     gmegabuf(index*attributes+4) = minradius + (maxradius-minradius)*(index+1)/count;
per_frame_init_19=     gmegabuf(index*attributes+5) = rand(1000)/1000;
per_frame_init_20=     gmegabuf(index*attributes+6) = rand(1000)/1000;
per_frame_init_21=     gmegabuf(index*attributes+7) = rand(1000)/1000;
per_frame_init_22=     gmegabuf(index*attributes+8) = sqr(gmegabuf(index*attributes+4)) ;
per_frame_init_23=     index = index+1;
per_frame_init_24=    );
per_frame_init_25=
per_frame_init_26=q31 = count;
per_frame_init_27=q32 = attributes;
per_frame_init_28=
per_frame_init_29=// 0, x
per_frame_init_30=// 1, y
per_frame_init_31=// 2, vx
per_frame_init_32=// 3, vy
per_frame_init_33=// 4, radius
per_frame_init_34=// 5, red
per_frame_init_35=// 6, green
per_frame_init_36=// 7, blue
per_frame_init_37=// 8, mass
per_frame_1=chng=sin(time*.5);
per_frame_2=cthr=.9999;
per_frame_3=mq21=if(above(chng,cthr),rand(3),mq21);
per_frame_4=mq22=if(above(chng,cthr),rand(3),mq22);
per_frame_5=mq23=if(above(chng,cthr),rand(3),mq23);
per_frame_6=mq24=if(above(chng,cthr),rand(2),mq24);
per_frame_7=mq25=if(above(chng,cthr),rand(2),mq25);
per_frame_8=mq26=if(above(chng,cthr),rand(2),mq26);
per_frame_9=mq27=if(above(chng,cthr),rand(1),mq27);
per_frame_10=mq28=if(above(chng,cthr),rand(1),mq28);
per_frame_11=mq29=if(above(chng,cthr),rand(1)*.3,mq29);
per_frame_12=mq31=if(above(chng,cthr),rand(1)*.3,mq31);
per_frame_13=monitor=chng;
per_frame_14=q21=mq21;q22=mq22;q23=mq23;q24=mq24;q25=mq25;q26=mq26;
per_frame_15=q27=mq27;q28=mq28;q29=mq29;q31=mq31;
per_frame_16=
per_frame_17=monitor=mq1;
per_frame_18=vol=bass+treb+mid;
per_frame_19=atime=atime+vol;
per_frame_20=q11=.4+sin(atime*.006        )*.4;
per_frame_21=q12=.4+cos(atime*.00613828348)*.4;
per_frame_22=q13=.4+sin(atime*.00598593455)*.4;
per_frame_23=monitor=q13;
per_frame_24=wave_r = wave_r + 0.4*sin(time*3.14) + (0.2*mid);
per_frame_25=wave_b = wave_b + 0.2*sin(time*1.5);
per_frame_26=wave_g = wave_g + 0.2*mid;
per_frame_27=cx = cx + 0.1*sin(time);
per_frame_28=
per_frame_29=
per_frame_30=
per_frame_31=
per_frame_32=warp = 0;
per_frame_33=zoom = 1;
per_frame_34=
per_frame_35=gravity = 0.005/fps*0;
per_frame_36=dampening = 1;
per_frame_37=pi2 = asin(1);
per_frame_38=
per_frame_39=
per_frame_40=nn = 3; // number of nearest neighbors to search, reduce if not needed!
per_frame_41=        // collision detection is based on nearest neighbors now, so keep it at least at 1.
per_frame_42=
per_frame_43=check = 2; // how many neighbors will be checked for a possible collision. may not be above nn.
per_frame_44=           // raise to avoid odd behavior in clusters of touching balls.
per_frame_45=
per_frame_46=index = 0; index2 = 0;  w = (aspecty-aspectx)/2;
per_frame_47=loop(count, 
per_frame_48=     // simple physics: adding velocity vectors, applying gravity + bouncing off borders
per_frame_49=     gmegabuf(index*attributes+1) = gmegabuf(index*attributes+1) + gmegabuf(index*attributes+3);
per_frame_50=     gmegabuf(index*attributes) = gmegabuf(index*attributes) + gmegabuf(index*attributes+2);
per_frame_51=     gmegabuf(index*attributes+2) = if( below( gmegabuf(index*attributes), 0-w+gmegabuf(index*attributes+4)),
per_frame_52=                                        abs(gmegabuf(index*attributes+2))*dampening,
per_frame_53=                                        gmegabuf(index*attributes+2) ); 
per_frame_54=     gmegabuf(index*attributes+2) = if( above( gmegabuf(index*attributes), 1+w-gmegabuf(index*attributes+4)),
per_frame_55=                                        -abs(gmegabuf(index*attributes+2))*dampening,
per_frame_56=                                        gmegabuf(index*attributes+2) ); 
per_frame_57=     gmegabuf(index*attributes+3) = gmegabuf(index*attributes+3) - gravity;
per_frame_58=     gmegabuf(index*attributes+3) = if( below( gmegabuf(index*attributes+1), gmegabuf(index*attributes+4)),
per_frame_59=                                        abs(gmegabuf(index*attributes+3))*dampening,
per_frame_60=                                        gmegabuf(index*attributes+3); );
per_frame_61=     gmegabuf(index*attributes+3) = if( above( gmegabuf(index*attributes+1), 1-gmegabuf(index*attributes+4)),
per_frame_62=                                        -abs(gmegabuf(index*attributes+3))*dampening,
per_frame_63=                                        gmegabuf(index*attributes+3); );
per_frame_64=     i = 0; j = 0; // collecting pairs of index and distance to the current object in a local buffer
per_frame_65=     loop( count,
per_frame_66=           d = sqrt( sqr(gmegabuf(index*attributes)-gmegabuf(i*attributes)) + sqr(gmegabuf(index*attributes+1)-gmegabuf(i*attributes+1)));
per_frame_67=           d = if( equal(d,0), 10, d); // leave out comparison with itself (where d == 0, set d to a high value)
per_frame_68=           d = d - (gmegabuf(index*attributes+4)+gmegabuf(i*attributes+4))*0.5; // subtract radius (surface to surface distance)
per_frame_69=           megabuf(j)   = i; // store index/distance pairs
per_frame_70=           megabuf(j+1) = d; 
per_frame_71=           j = j+2;
per_frame_72=           i = i+1; );
per_frame_73=     i = 0; // sort that buffer, but only as many cycles as needed for the _nn_ nearest neighbors
per_frame_74=     loop( nn,
per_frame_75=           j = i; smallestfind = 10; findindex = -1;
per_frame_76=           loop( count-j,
per_frame_77=                 distance =megabuf(j*2+1);
per_frame_78=                 smaller = above( smallestfind, distance);
per_frame_79=                 smallestfind = if(smaller, distance, smallestfind);
per_frame_80=                 findindex = if( smaller, j*2, findindex);
per_frame_81=                 j = j + 1; );
per_frame_82=           j = megabuf(i*2); d = megabuf(i*2+1);
per_frame_83=           megabuf(i*2)   = megabuf(findindex);
per_frame_84=           megabuf(i*2+1) = megabuf(findindex+1);
per_frame_85=           megabuf(findindex)   = j;
per_frame_86=           megabuf(findindex+1) = d;
per_frame_87=           i = i+1;
per_frame_88=         );
per_frame_89=     i = 0; // storing the indexes of the nearest neighbors in the attributes beginning from 10
per_frame_90=     loop( nn,
per_frame_91=           gmegabuf(index*attributes + 10 + i) = megabuf(i*2);
per_frame_92=           i = i +1;
per_frame_93=         );
per_frame_94=     i = 0; // collision detection and impulse transmission below
per_frame_95=     loop( check,
per_frame_96=           index2 = megabuf(i);
per_frame_97=           hit = below( sqrt( sqr( gmegabuf(index*attributes) - gmegabuf(index2*attributes)) +
per_frame_98=                              sqr( gmegabuf(index*attributes+1) - gmegabuf(index2*attributes+1))),
per_frame_99=                        gmegabuf(index*attributes + 4) + gmegabuf(index2*attributes + 4)
per_frame_100=                      )
per_frame_101=                 *
per_frame_102=                 above( sqrt( sqr( gmegabuf(index*attributes)   - gmegabuf(index2*attributes))+
per_frame_103=                        sqr( gmegabuf(index*attributes+1) - gmegabuf(index2*attributes+1))),
per_frame_104=                        sqrt( sqr( gmegabuf(index*attributes+0) - gmegabuf(index2*attributes+0)+ 
per_frame_105=                                   gmegabuf(index*attributes+2) - gmegabuf(index2*attributes+2))+
per_frame_106=                              sqr( gmegabuf(index*attributes+1) - gmegabuf(index2*attributes+1)+
per_frame_107=                                   gmegabuf(index*attributes+3) - gmegabuf(index2*attributes+3)) ) );
per_frame_108=           ref_ang = atan2( gmegabuf(index2*attributes)-gmegabuf(index*attributes), // calculating the angle of the common tangent
per_frame_109=                            gmegabuf(index2*attributes + 1)-gmegabuf(index*attributes + 1)) + pi2;
per_frame_110=           v1 = sqrt(sqr( gmegabuf(index*attributes + 2)) + sqr( gmegabuf(index*attributes + 3))); // velocity of object1
per_frame_111=           v2 = sqrt(sqr( gmegabuf(index2*attributes + 2)) + sqr( gmegabuf(index2*attributes + 3)));  // velocity of object2
per_frame_112=           w1 = atan2( gmegabuf(index*attributes + 2), gmegabuf(index*attributes + 3));   // object1 motion angle
per_frame_113=           w2 = atan2( gmegabuf(index2*attributes + 2), gmegabuf(index2*attributes + 3)); // object2 motion angle
per_frame_114=           m1 = gmegabuf(index*attributes + 8); m2 = gmegabuf(index2*attributes + 8);
per_frame_115=           vv1 = ((m1-m2)*v1 + 2*m2*v2)/(m1+m2); vv2 = ((m2-m1)*v2 + 2*m1*v1)/(m1+m2);
per_frame_116=           gmegabuf( index*attributes + 2) = if( hit,sin(ref_ang)*v1*cos(w1-ref_ang) + sin(ref_ang+pi2)*vv1*cos(w2-ref_ang-pi2),
per_frame_117=                                                  gmegabuf( index*attributes + 2) );
per_frame_118=           gmegabuf( index*attributes + 3) = if( hit, cos(ref_ang)*v1*cos(w1-ref_ang) + cos(ref_ang+pi2)*vv1*cos(w2-ref_ang-pi2),
per_frame_119=                                                 gmegabuf( index*attributes + 3) );
per_frame_120=           gmegabuf( index2*attributes + 2) = if( hit, sin(ref_ang)*v2*cos(w2-ref_ang) + sin(ref_ang+pi2)*vv2*cos(w1-ref_ang-pi2),
per_frame_121=                                                  gmegabuf( index2*attributes + 2) );
per_frame_122=           gmegabuf( index2*attributes + 3) = if( hit, cos(ref_ang)*v2*cos(w2-ref_ang) + cos(ref_ang+pi2)*vv2*cos(w1-ref_ang-pi2),
per_frame_123=                                                  gmegabuf( index2*attributes + 3) );
per_frame_124=           i=i+2;
per_frame_125=         );
per_frame_126=     index = index+1;
per_frame_127=    );
per_frame_128=q1 = aspectx;
per_frame_129=q2 = aspecty;
warp_1=`shader_body
warp_2=`{
warp_3=`  float2 uv2 = lerp(uv_orig, uv, 0.2);
warp_4=`
warp_5=`  // diffused version:
warp_6=`  float ss = 0.3;
warp_7=`  float3 blur = 0.25*(
warp_8=`    tex2D(sampler_main, uv2+ss*texsize.zw*float2( 1, 1)).xyz +
warp_9=`    tex2D(sampler_main, uv2+ss*texsize.zw*float2(-1, 1)).xyz +
warp_10=`    tex2D(sampler_main, uv2+ss*texsize.zw*float2( 1,-1)).xyz +
warp_11=`    tex2D(sampler_main, uv2+ss*texsize.zw*float2(-1,-1)).xyz
warp_12=`  );
warp_13=`
warp_14=`  // diffusion:  
warp_15=`  ret = tex2D(sampler_main,uv2);//blur;
warp_16=`
warp_17=`  float F2 = 0.035;
warp_18=`  float k2 = 0.060;
warp_19=`  float s = 0.025;
warp_20=`  float scale = 9;
warp_21=`
warp_22=`  // reaction:
warp_23=`  float3 z = ret;
warp_24=`  float uvv = ret.x*ret.y*ret.y;
warp_25=`  z.x += (-uvv + F2*(1-ret.x) + 0.0007)*scale;
warp_26=`  z.y += (uvv - (F2+k2)*ret.y)*scale;
warp_27=`  //z.x += s*(16-ret.x*ret.y);
warp_28=`  //z.y += s*(ret.x*ret.y - ret.y - ret.z);
warp_29=`  z.z -= 0.02;
warp_30=`
warp_31=`  // apply laplacian:
warp_32=`  z.x += (blur - GetPixel(uv2))*0.2*scale;
warp_33=`
warp_34=`  ret = z;  
warp_35=`float4 noise9 = tex3D(sampler_noisevol_hq, 
warp_36=`                      ((uv.xyy*q27
warp_37=`                       )*texsize.xyy*texsize_noisevol_hq.zww
warp_38=`                      ).xyz*
warp_39=`                      float3(1,1,0)*0.05 + 
warp_40=`                      time*float3(0,0,1)*q29
warp_41=`                     );
warp_42=`if(ret.x> q21*q13         && ret.x<= q24*q11        )ret.y += (noise9).x*.5; 
warp_43=`if(ret.y> q22*q11         && ret.y<= q25*q12        )ret.z += (noise9).y*.5; 
warp_44=`if(ret.z> q23*q12         && ret.z<= q26*q13        )ret.x += (noise9).z*.5; 
warp_45=`
warp_46=`  // add noise:
warp_47=`  ret.x += 0.09*(tex2d(sampler_noise_lq, uv*texsize.xy*texsize_noise_lq.zw + rand_frame.xy).xyz*2-1);
warp_48=`
warp_49=`  // darken (decay) over time
warp_50=`  //ret = (ret - 0.002)*0.99;
warp_51=`}
comp_1=`float2 gradBlur1( float2 domain, float2 d, float3 filter){
comp_2=`   float3 dx = ( 2*GetBlur1(domain + float2(1,0)*d) - 2*GetBlur1(domain-float2(1,0)*d) );
comp_3=`   float3 dy = ( 2*GetBlur1(domain + float2(0,1)*d) - 2*GetBlur1(domain-float2(0,1)*d) );
comp_4=`
comp_5=`   return 0.5*float2(dx.x*filter.x + dx.y*filter.y + dx.z*filter.z,
comp_6=`                     dy.x*filter.x + dy.y*filter.y + dy.z*filter.z)/(filter.x+filter.y+filter.z);
comp_7=`}
comp_8=`
comp_9=`shader_body
comp_10=`{
comp_11=`float2 d = texsize.zw*4;
comp_12=`float2 grady = gradBlur1(uv, d, float3(0,1,0));
comp_13=`float2 gradx = gradBlur1(uv + grady*d, d, float3(1,0,0));
comp_14=`float2 uv_green = uv-gradx*d*8;
comp_15=`ret = (0.7 + (grady.x+grady.y))*GetPixel(uv_green-grady*texsize.zw*8).y;
comp_16=`float3 c1 = lerp(0,float3(1,1,1),GetPixel(uv - gradx*d*0).x)*saturate(1-GetPixel(uv).y*2);
comp_17=`float4 noise9 = tex3D(sampler_noisevol_hq, 
comp_18=`                      ((uv.xyy*q28
comp_19=`                       )*texsize.xyy*texsize_noisevol_hq.zww
comp_20=`                      ).xyz*
comp_21=`                      float3(1,1,0)*0.05 + 
comp_22=`                      time*float3(0,0,1)*q31
comp_23=`                     );
comp_24=`if(ret.x> q26*q13         && ret.x<= q23*q11        )ret.z -= (noise9).x*.5; 
comp_25=`if(ret.y> q25*q11         && ret.y<= q22*q12        )ret.x -= (noise9).y*.5; 
comp_26=`if(ret.z> q24*q12         && ret.z<= q21*q13        )ret.y -= (noise9).z*.5; 
comp_27=`ret = lerp(ret,float3(1,1.4,2.4), (GetBlur3(saturate(uv_green + grady*texsize.zw*8)).y-1.3*GetPixel(uv_green-grady*texsize.zw*8).y));
comp_28=`ret =  lerp(c1,1,ret);
comp_29=`ret = lerp(ret,float3(0,0,0),saturate(1*GetPixel(uv+grady*d*4 - gradx*d*16).z));
comp_30=`}
