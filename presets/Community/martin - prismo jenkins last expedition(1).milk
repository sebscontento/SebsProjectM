MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=4.000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.958
fWaveSmoothing=0.450
fWaveParam=0.000
fModWaveAlphaStart=0.000
fModWaveAlphaEnd=1.320
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.010
ob_r=0.000
ob_g=0.500
ob_b=0.500
ob_a=0.200
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=25.600
nMotionVectorsY=9.600
mv_dx=0.000
mv_dy=0.000
mv_l=0.000
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=0
wavecode_0_samples=282
wavecode_0_sep=20
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=3.91581
wavecode_0_smoothing=0.10000
wavecode_0_r=0.200
wavecode_0_g=0.300
wavecode_0_b=1.000
wavecode_0_a=0.600
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=0
wavecode_1_scaling=0.89152
wavecode_1_smoothing=0.82000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=0.100
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=0
wavecode_2_scaling=0.89152
wavecode_2_smoothing=0.82000
wavecode_2_r=0.000
wavecode_2_g=0.200
wavecode_2_b=0.000
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=1
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=0
shapecode_0_sides=4
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.090
shapecode_0_y=0.900
shapecode_0_rad=0.22437
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.76002
shapecode_0_r=1.000
shapecode_0_g=0.000
shapecode_0_b=0.000
shapecode_0_a=1.000
shapecode_0_r2=1.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.600
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shapecode_1_enabled=0
shapecode_1_sides=100
shapecode_1_additive=1
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.260
shapecode_1_y=0.200
shapecode_1_rad=0.39317
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=6.19589
shapecode_1_r=0.000
shapecode_1_g=0.550
shapecode_1_b=0.500
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.400
shapecode_1_b2=0.400
shapecode_1_a2=0.070
shapecode_1_border_r=0.300
shapecode_1_border_g=0.700
shapecode_1_border_b=0.800
shapecode_1_border_a=0.000
shapecode_2_enabled=0
shapecode_2_sides=44
shapecode_2_additive=1
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.503
shapecode_2_y=0.500
shapecode_2_rad=0.03886
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.60986
shapecode_2_r=1.000
shapecode_2_g=0.100
shapecode_2_b=0.000
shapecode_2_a=0.900
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=1.000
shapecode_2_a2=0.000
shapecode_2_border_r=0.500
shapecode_2_border_g=0.500
shapecode_2_border_b=0.500
shapecode_2_border_a=0.000
shapecode_3_enabled=0
shapecode_3_sides=100
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.01000
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.49981
shapecode_3_r=0.000
shapecode_3_g=0.000
shapecode_3_b=0.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=0.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=0.200
shapecode_3_border_g=0.700
shapecode_3_border_b=0.500
shapecode_3_border_a=0.000
per_frame_init_1=
per_frame_init_2=//******** INITIALIZATION *********
per_frame_init_3=avg = 0.01;
per_frame_init_4=q7 = .15; //MyZoom
per_frame_init_5=q8 =  (rand(200)/100-1)*2.5; //fractal modifier
per_frame_init_6=q16 = 1.25;
per_frame_init_7=q17 = 2.4; //fractal density factor ffac
per_frame_init_8=q19 =  (rand(200)/100-1)*2; //fractal modifier2
per_frame_init_9=start = 1;  RotZ = 0; ;
per_frame_init_10=
per_frame_init_11=n = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); 
per_frame_init_12=n = 0; loop (10000,  megabuf(n)=0; n=n+1; ); 
per_frame_init_13=trelx = 0;  trely = 0; trelz = 0;
per_frame_init_14=reg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;
per_frame_init_15=
per_frame_init_16=//Find random starting point
per_frame_init_17=while (exec2
per_frame_init_18=(
per_frame_init_19=  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;
per_frame_init_20=  PosX = rand(10)-5;   PosY = rand(10)-5;   PosZ = rand(10)-5; 
per_frame_init_21=
per_frame_init_22=  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); 
per_frame_init_23=  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);
per_frame_init_24=
per_frame_init_25=  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;
per_frame_init_26=  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;
per_frame_init_27=  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;
per_frame_init_28=
per_frame_init_29=  //***********BOT*************
per_frame_init_30=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_init_31=  dist = 0.001;
per_frame_init_32=  while (exec2(
per_frame_init_33=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_init_34=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_init_35=    uvx = 8.0*((uvx/8+300.5 - int(uvx/8+300.5))-.5);
per_frame_init_36=    uvy = 8.0*((uvy/8+300.5 - int(uvy/8+300.5))-.5);
per_frame_init_37=    uvz = 8.0*((uvz/8+300.5 - int(uvz/8+300.5))-.5);
per_frame_init_38=
per_frame_init_39=    uvx_ = (uvx*uvx+uvy*uvy)/5;
per_frame_init_40=    uvy_ = atan2(uvx,uvy);
per_frame_init_41=    uvz_ = uvz;
per_frame_init_42=    
per_frame_init_43=    uvx0 = uvx*(1-q19) + (q19)*uvx_ +q8; 
per_frame_init_44=    uvy0 = uvy*(1-q19) + (q19)*uvy_ +q8; 
per_frame_init_45=    uvz0 = uvz*(1-q19) + (q19)*uvz_ +q8;
per_frame_init_46=
per_frame_init_47=    uvx = uvx_; uvy = uvy_; uvz=uvz_;
per_frame_init_48=    loop (7,
per_frame_init_49=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_init_50=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_init_51=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_init_52=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_init_53=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *q17 + uvx0; 
per_frame_init_54=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *q17 + uvy0; 
per_frame_init_55=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *q17 + uvz0; 
per_frame_init_56=    );
per_frame_init_57=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_init_58=    dist *= 1.05;
per_frame_init_59=  ,(dist < 0.6)*(len > 30)));
per_frame_init_60=,(dist < .06))); //end while
per_frame_init_61=
per_frame_init_62=t1 = 0;
per_frame_1=fps_ = .0 * fps_ + 1*if(fps<=25,fps,25+.5*(fps-25)); 
per_frame_2=dec_s = 1-.05*30/fps_;
per_frame_3=speed = (min(dist_,1.5*avg)-.05)/q7;
per_frame_4=ds = ds * dec_s + (1-dec_s)*speed/fps_*.08; 
per_frame_5=
per_frame_6=//Position 
per_frame_7=DirX= reg26; DirY= reg27; DirZ = reg28;
per_frame_8=PosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ; 
per_frame_9=q4 = PosX; q5 = PosY; q6 = PosZ;
per_frame_10=
per_frame_11=trel1 += abs(bass-mid)/fps_/6;
per_frame_12=trel2 += abs(treb-mid)/fps_/6;
per_frame_13=trel3 += abs(bass-treb)/fps_/6;
per_frame_14=
per_frame_15=if (angchg > 0, t2 = 0; stuck += .1*(speed <= 0.2)/fps,stuck=0; t2 += 1/fps);
per_frame_16=angchg = min(.5+stuck,2)* pow(.5-dist_,2) * (dist_ < 0.5);
per_frame_17=
per_frame_18=r1 = pow (sin(trel1),15) * (t2 >= 6);
per_frame_19=r2 = pow (sin(trel1),15) * (t2 >= 6);
per_frame_20=r3 = pow (sin(trel1),15) * (t2 >= 6);
per_frame_21=
per_frame_22=v1 = v1 * dec_s + (1-dec_s)* r1*.06*speed/fps_;
per_frame_23=v2 = v2 *dec_s + (1-dec_s)*(angchg *xslope + r2*.04*speed)/fps_;
per_frame_24=v3 = v3 *dec_s + (1-dec_s)*(angchg *yslope + r3*.04*speed)/fps_;
per_frame_25=
per_frame_26=//push old RotMat
per_frame_27=reg30 =reg20; reg31 =reg21; reg32 =reg22; 
per_frame_28=reg33 =reg23; reg34 =reg24; reg35 =reg25; 
per_frame_29=reg36 =reg26; reg37 =reg27; reg38 =reg28; 
per_frame_30=
per_frame_31=n = 0; avg = 0;
per_frame_32=loop (5,
per_frame_33=  n = n+1;
per_frame_34=  //new Rot. Mat for infinitesimal angles
per_frame_35=  ran1 = rand(100)/100;
per_frame_36=  ran2 = rand(100)/200-.25;
per_frame_37=  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;
per_frame_38=  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); 
per_frame_39=  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);
per_frame_40=  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;
per_frame_41=  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;
per_frame_42=  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;
per_frame_43=
per_frame_44=  //pop old RotMat
per_frame_45=  reg20 =reg30; reg21 =reg31; reg22 =reg32; 
per_frame_46=  reg23 =reg33; reg24 =reg34; reg25 =reg35; 
per_frame_47=  reg26 =reg36; reg27 =reg37; reg28 =reg38; 
per_frame_48=
per_frame_49=  //Multiply new RotMat by old one
per_frame_50=  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;
per_frame_51=  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;
per_frame_52=  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;
per_frame_53=  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;
per_frame_54=  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;
per_frame_55=  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;
per_frame_56=  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;
per_frame_57=  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;
per_frame_58=  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;
per_frame_59=
per_frame_60=  reg20 =q20; reg21 =q21; reg22 =q22;
per_frame_61=  reg23 =q23; reg24 =q24; reg25 =q25;
per_frame_62=  reg26 =q26; reg27 =q27; reg28 =q28;
per_frame_63=
per_frame_64=  //***********BOT*************
per_frame_65=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_66=  dist = 0.002;
per_frame_67=  while (exec2(
per_frame_68=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_69=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_70=    uvx = 8.0*((uvx/8+300.5 - int(uvx/8+300.5))-.5);
per_frame_71=    uvy = 8.0*((uvy/8+300.5 - int(uvy/8+300.5))-.5);
per_frame_72=    uvz = 8.0*((uvz/8+300.5 - int(uvz/8+300.5))-.5);
per_frame_73=    
per_frame_74=    uvx_ = (uvx*uvx+uvy*uvy)/5;
per_frame_75=    uvy_ = atan2(uvx,uvy);
per_frame_76=    uvz_ = uvz;
per_frame_77=    
per_frame_78=   
per_frame_79=    uvx0 = uvx*(1-q19) + (q19)*uvx_ +q8; 
per_frame_80=    uvy0 = uvy*(1-q19) + (q19)*uvy_ +q8; 
per_frame_81=    uvz0 = uvz*(1-q19) + (q19)*uvz_ +q8;
per_frame_82=
per_frame_83=    uvx = uvx_; uvy = uvy_; uvz=uvz_;
per_frame_84=
per_frame_85=    loop (7,
per_frame_86=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_87=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_88=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_89=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_90=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *q17 + uvx0; 
per_frame_91=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *q17 + uvy0; 
per_frame_92=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *q17 + uvz0; 
per_frame_93=    );
per_frame_94=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_95=    dist *= 1.1;
per_frame_96=  ,(dist < 0.6)*(len > 30)));
per_frame_97=  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points
per_frame_98=  avg = avg+abs(megabuf(n)/5);
per_frame_99=); //end loop 5
per_frame_100=
per_frame_101=n = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));
per_frame_102=xslope = min(max(2/avg*(megabuf(1)-megabuf(3)),-3),3);
per_frame_103=yslope = min(max(2/avg*(megabuf(4)-megabuf(2)),-3),3);
per_frame_104=dist_ = dist_*dec_s + (1-dec_s)*dist;
per_frame_105=
per_frame_106=q10 = ds*q7; //compensation of lin. movement in GetDist and zoom uv
per_frame_107=q14 = 1*abs(ds) + 2*(abs(v1) + abs(v2) + abs(v3)) + start*.05; 
per_frame_108=start = start * .9;
per_frame_109=
per_frame_110=warp = 0.0; zoom = 1; 
per_frame_111=q11 = v1;  q12 = -v2; q13 = v3;
per_frame_112=dx = q12/q16; dy = q13/q16; rot = q11;
per_frame_113=monitor = t3;
per_frame_114=q30 = start*.3;
per_pixel_1=//Assuming wide screen, aspectx = 1
per_pixel_2=//in shader, the larger side is length 1
per_pixel_3=
per_pixel_4=
per_pixel_5=
per_pixel_6=
warp_1=`float limit, dist, struc, len; float2 uv0, uv1; float3 uv2; float4 box;
warp_2=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
warp_3=`static const float2 compxy = float2(q12,q13);
warp_4=`static const float3 CamPos = float3(q4,q5,q6);
warp_5=`static const float myzoom = q7,  res = 255, res2 = 64, tele = q16;
warp_6=`static const float sustain = .98 - 2*q14-q30, change = q14, ds = q10, tic8 = 1.0/255, ffac = q17;
warp_7=`
warp_8=`float aTan2(float y, float x) {float angle;	 float abs_y = abs(y);
warp_9=`if (x >= 0) {float r = (x - abs_y) / (x + abs_y); angle = 1-r;} 
warp_10=`else {float r = (x + abs_y) / (abs_y - x); angle = 3-r; }	
warp_11=`angle = angle * M_PI/4.0;
warp_12=`return y < 0 ? -angle : angle;}
warp_13=`
warp_14=`float2 fstep2 (float2 xy) {return 1.0/res*round(res*xy);}
warp_15=`
warp_16=`float GetDist(float2 uvi) {float2 tmp; tmp = (tex2D (sampler_pc_main, uvi).gb); 
warp_17=`return 1.0078125-tmp.y -0.015625*tmp.x;} // = 1-(tmp.y + 1.0/res2*(tmp.x-.50));}
warp_18=`
warp_19=`float2 PutDist(float x) {float tmp; tmp = fstep2(1-x);
warp_20=`  return (float2(res2*((1-x)-tmp)+.495,tmp));}
warp_21=`
warp_22=`float tdist (float d) {return d + pow(d,5);}
warp_23=`
warp_24=`float MinDist (float2 uvi) 
warp_25=`{  float tmp; float4 nb; float4 nb2; float2 pix;
warp_26=`   pix = texsize.zw*(1.0+max(abs(uvi.x-.5),abs(uvi.y-.5))*2.00);   
warp_27=`   nb.x = GetDist(uvi+pix*float2(-1,-1));   nb.y = GetDist(uvi+pix*float2(1,-1));
warp_28=`   nb.z = GetDist(uvi+pix*float2(1,1));     nb.w = GetDist(uvi+pix*float2(-1,1));         
warp_29=`   nb2.x = GetDist(uvi+pix*float2(0,-1));   nb2.y = GetDist(uvi+pix*float2(1,0));          
warp_30=`   nb2.z = GetDist(uvi+pix*float2(0,1));    nb2.w = GetDist(uvi+pix*float2(-1,0));
warp_31=`   //Eo.S. more efficient usage of min to get min value of all 8 GetDist calls, removes 11ALU
warp_32=`   nb = min( nb, nb2 );
warp_33=`   nb.xy = min( nb.xy, nb.zw );
warp_34=`   return min( nb.x, nb.y );}
warp_35=`
warp_36=`float3 Get1 (float2 uvi) {float diff;
warp_37=`  diff = abs (GetPixel(uvi).r- GetBlur1(uvi).r);
warp_38=`  return lerp (GetPixel(uvi), GetBlur1(uvi),0.2*diff);} 
warp_39=`
warp_40=`float2 mbox (float3 uvi) {float3 zz, zz0, zzlo; float tmp, ang1, len;
warp_41=`  uvi = (frac(uvi/8.0+.5)-.5)*8.0;  ang1 = aTan2(uvi.x,uvi.y); len = dot(uvi.xy,uvi.xy)/5;
warp_42=`  zz = float3 (len, ang1, uvi.z);
warp_43=`  zz0 = lerp(uvi,zz,q19)+q8;
warp_44=`  for (int n = 0; n <= 7; n++) {
warp_45=`    zz = 2.0*clamp(zz,-1,1)-zz;  tmp = dot(zz,zz);
warp_46=`    zz *= clamp(max(.25/tmp, .25), 0.0, 1.0)*4;
warp_47=`    zz = ffac*zz + zz0; if (n == 5) {zzlo = zz;}}
warp_48=`return float2(length(zzlo), length(zz));}
warp_49=`
warp_50=`shader_body {uv0 = uv_orig;
warp_51=`uv1 = (uv0-.5)*aspect.xy*tele;
warp_52=`uv = (uv-.5)*(1-(1*ds/(GetDist(uv0))+dot(compxy,uv1))) + .5;
warp_53=`float3 noise = frac(9.3453*tex2D (sampler_noise_lq,uv*4+rand_frame.yz)); 
warp_54=`float3 noiseBiased = noise - 0.5;  //Eo.S. combine the subtraction on noise to a single float3 
warp_55=`bool seed = (noise.g < .2);
warp_56=`if (!seed) 
warp_57=`{  dist = MinDist(uv)  +  0.008 * (noiseBiased.x) * abs(noiseBiased.y);}    
warp_58=`   else {dist = noise.r;}
warp_59=` dist = min(dist,GetDist(uv)) - (ds+.3*tele*dot(compxy,uv1))*(1-dist)*.8 ;
warp_60=`
warp_61=`limit = 12 + 8 * dist;
warp_62=`uv2 = mul(float3(uv1*tdist(dist),tdist(dist))/myzoom,RotMat)+CamPos;
warp_63=`float2 box = mbox(uv2);
warp_64=`len = lerp(box.x,box.y,saturate(2-2*dist));
warp_65=`struc = len/limit/2+.3;
warp_66=`
warp_67=`float2 shlen = (uv1-1);
warp_68=`float2 uv3 =  (uv - shlen * (.06 ));
warp_69=`struc *= 1- ( GetDist(uv)-.5*length(uv-uv3)>GetDist(uv3))*.5*(1-dist);
warp_70=`float sus = sustain; if (seed) {sus = 1;}
warp_71=`
warp_72=`float3 inside  = float3 (lerp(struc,Get1(uv).r,sus), PutDist(dist)); //##?
warp_73=`float3 outside = Get1(uv)*sus-tic8;
warp_74=`ret = lerp (inside,outside,saturate(.005/change*(len-limit)));
warp_75=`}
comp_1=`#define sat saturate
comp_2=`float glow, tmp, lamp, dist, bdist, b2dist, dist_c, smask;
comp_3=`float2 dz, uv1, uv3, uv4;
comp_4=`static const float3 CamPos = float3(q4,q5,q6);
comp_5=`static const float myzoom = q7,  res = 255, res2 = 64, tele = q16;
comp_6=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
comp_7=`
comp_8=`float2 fstep2 (float2 xy) {return 1.0/res*round(res*xy);}
comp_9=`
comp_10=`float GetDist(float2 uvi) {float2 tmp; tmp = (tex2D (sampler_fc_main, uvi).gb); 
comp_11=`return 1.0078125-tmp.y -0.015625*tmp.x;} // = 1-(tmp.y + 1.0/res2*(tmp.x-.50));}
comp_12=`
comp_13=`float GetDistB(float2 uvi)  {return 1-GetBlur1(uvi).b;}
comp_14=`float3 screen3;
comp_15=`float3 lavcol (float t) {return saturate(float3(pow(t,1),pow(t,2.),pow(t,5)));}
comp_16=`
comp_17=`static float3 t = float3(q20,q23,q26);
comp_18=`static float3 s = float3(q21,q24,q27);
comp_19=`static float3 ts = -cross(s,t);
comp_20=`static float3 pos = float3 (1,1,1);
comp_21=`
comp_22=`float3 project (float dist) {  float z;
comp_23=`  z = 4*dist/mul(cross(ts,-t),screen3);
comp_24=`  return float3(mul(float2x3(ts,t),cross(pos,screen3))*z,-z);}
comp_25=`
comp_26=`shader_body {
comp_27=`screen3 = float3 ((uv-.5)*aspect.xy,tele*0+1);
comp_28=`float3 uv2 = project(.1);
comp_29=`float3 sky = sat(lavcol (1-(abs(.7/uv2.z))))*.8;
comp_30=`
comp_31=`bdist = min(GetDist(uv),GetDistB(uv));;
comp_32=`
comp_33=`sky *= sat(3*bdist-2);
comp_34=`ret = sat(lerp (0, sky, bdist));
comp_35=`
comp_36=`float struc = lerp(GetPixel(uv).r, GetBlur1((uv-.5)*1+.5).r,GetBlur1(uv).r*.8);
comp_37=`ret += lavcol(struc)*(1-pow(bdist,1+20*mid_att));
comp_38=`//ret = struc;
comp_39=`}
comp_40=`
comp_41=`//-------------------------------------------
comp_42=`//Written by martin
comp_43=`
